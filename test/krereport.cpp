#include <iostream>
#include <fstream>
#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <string>
#include <cstdio>
#include <cstdlib>


#include <dirent.h>
#include <vector>


using namespace std;

double interpolationFunction(vector<double> v, int x) {
	double y = 0.0;
	int s = v.size();
	if (s <= 1) {
           return 0;
	}
        int size = s - 1;

        double xa = size-1;
        double yb = v.at(xa);

        double xb = size;
        double ya = v.at(xb);
       
	double a = ya;
	double b = x - xa;
	double c = yb - ya;
	double d = xb - xa;

	if (d >0) {
	   y =  a + (b*c)/d;
	} else {
	  cout<<"can not divide between zero."<<endl;
	}
	
        if (y > 0) {
           return y;
        } else {
           return 0;
        }
}

double getNextElement(double last, double bf, double bf_last) {
       return  (last*bf)/bf_last;
}

void create_report2(string dijkstraText, string fileName, string pasta, string heuristic) {
        cout<<dijkstraText<<"\n\n";
         
	string fnivel = "fnivel:"; //nivel 
	string nodosNivel = "nodesGeneratedByLevel:"; //number of nodes generated by level
        string time = "time0:"; //timer
        string nodesUpToNivel = "nodesGeneratedToTheLevel:"; //number of nodes generated to the  level
	string countLastNodesGerados = "count_last_nodes_gerados:";
	string branchingFactor = "effectiveBranchingFactor:";
	int count_lastNodes = 0;
	int total_niveles = 0;

	string amount;
	ifstream dijkstra;
       
	
	dijkstra.open(dijkstraText.c_str());
        
	string output;

        output = fileName;    
        output =  pasta+"/interpolar2/"+output;
	output = "test/"+heuristic+"/krereport/"+output;
	output = "marvin/" + output;
	output = "marvin/" + output;
	output = "/home/" + output;	
        cout<<output.c_str()<<endl;

	ofstream outputFile;
	outputFile.open(output.c_str(), ios::out);
	
	outputFile<<"\t"<<dijkstraText.c_str()<<endl;
 

	outputFile<<"\tf\t\t#Nodes_by_level\t\tRuntime(s)\t\t#Nodes_to_the_level\n";

        while (dijkstra>>amount) {
	        if (amount == fnivel) {
			dijkstra>>amount;
                        outputFile<<"\t"<<amount<<"\t\t";
                       
		} else if (amount == nodosNivel) {
                        dijkstra>>amount;
			outputFile<<amount<<"\t\t";	
		} else if (amount == time) {
			dijkstra>>amount;
			outputFile<<"\t"<<amount<<"\t\t";
		} else if (amount == nodesUpToNivel) {
	                dijkstra>>amount;
                        outputFile<<"\t"<<amount<<"\n";	
		}
	}
        outputFile.close();
        //inter 1
        ifstream inter;
        string trash;
	
	inter.open(output.c_str());
      
        inter>>trash;
        inter>>trash;
        inter>>trash;
        inter>>trash;
        inter>>trash;

        //Determinar el numero de niveles
        int count_data = 0;
       
        while (inter>>trash) {
              //inter>>trash;
              count_data++;
              cout<<count_data<<": "<<trash<<"\n";

        }
       
        cout<<"count_data = "<<count_data<<endl;
        total_niveles = (int)count_data/4;
        cout<<"total_niveles = "<<total_niveles<<endl;
        //inter2  
        ifstream inter2;
      	inter2.open(output.c_str());

        inter2>>trash;
        inter2>>trash;
        inter2>>trash;
        inter2>>trash;
        inter2>>trash;

        float** levels = new float*[total_niveles];
	for (int i = 0; i < total_niveles; i++) {
	    levels[i] = new float[4];
	}	

	for (int i = 0; i < total_niveles; i++) {
	    for (int j = 0; j < 4; j++) {
		 inter2>>levels[i][j];
	    }
	}

	vector<int> vn;
	vector<int> vf;
	for (int i = 0; i < total_niveles; i++) {
	    vf.insert(vf.begin() + i, levels[i][0]);
	    vn.insert(vn.begin() + i, levels[i][1]);
 	}

        vector<double> v_bf;
        for (int i = 0; i < vn.size() - 1; i++) {
            double first = vn.at(i); 
            double next = vn.at(i+1);
            double bfactor = (double)next/first;
            v_bf.insert(v_bf.begin() + i, bfactor);
        }



 
}

void create_report1(string heuristic, int countProblems) {

	int countRead = 0;
	do {

		ifstream readFile("h/report/d/instance360.txt");
        	string pasta;
        	string domain;
		std::vector<string> fileNames;

		readFile>>pasta;

		string  pastaReporte = "mkdir /home/marvin/marvin/test/"+heuristic+"/krereport/"+pasta;
		system(pastaReporte.c_str());     

		
	        string  pastaInterpolar2 = "mkdir /home/marvin/marvin/test/"+heuristic+"/krereport/"+pasta+"/interpolar2";
		system(pastaInterpolar2.c_str());     
		

 
        	string output;
        	output = "resultado/";
        	output =  pasta+"/"+output;
		output = "test/"+heuristic+"/problemas/"+output;
		output = "marvin/" + output;
		output = "marvin/" + output;
		output = "/home/" + output;	
		//cout<<output.c_str()<<endl; 

        	DIR *dir;
        	struct dirent *ent;
        
       	 	dir = opendir(output.c_str());
        	if (dir != NULL) {
	    		while ((ent = readdir(dir)) != NULL) {
				string fileName = ent->d_name;
				int sizeName = fileName.size();
                		if ((sizeName == 1)  || (sizeName == 2)) {
					//TODO
				} else {
		    			fileNames.push_back(fileName);
				}
            		}
            		closedir(dir);
		} else {
	    		cout<<"Error trying to open the directory: "<< output.c_str()<<endl;
		}


        	for (std::vector<string>::size_type i = 0; i != fileNames.size(); i++) {
			string output2 = output+fileNames.at(i);
	        	cout<<output2.c_str()<<" - "<<fileNames.at(i)<<endl;
			create_report2(output2.c_str(), fileNames.at(i), pasta, heuristic);
		}

	    	countRead = countRead + 1;
		} while (countRead < countProblems);
}


void create_report() {
	ifstream readFile("h/report/instance360.txt");
	int quantidade_total_opt;
	int total_heuristics;	 
	readFile>>quantidade_total_opt;
	readFile>>total_heuristics;
	
	int counter = 0;
	string heuristic;
	do {
		readFile>>heuristic;
		create_report1(heuristic, quantidade_total_opt);
		counter++;
	} while (counter < total_heuristics);
}




int main() {

	create_report();

	return 0;
}
