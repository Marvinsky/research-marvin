#include <iostream>
#include <fstream>
#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <string>
#include <cstdio>
#include <cstdlib>


#include <dirent.h>
#include <vector>


using namespace std;


void create_report2(string astarText, string fileName, string pasta, string heuristic) {
        cout<<astarText<<"\n\n";
         
        string tniveles = "totalniveles:"; //total number of levels
	string fnivel = "fnivel:"; //nivel 
	string nodosNivel = "nodesGeneratedByLevel:"; //number of nodes generated by level
        string time = "time0:"; //timer
        string nodesUpToNivel = "nodesGeneratedToTheLevel:"; //number of nodes generated to the  level
	string branchingFactor = "effectiveBranchingFactor:";
	string amount;
	ifstream astar;
        ifstream astar2;
	
	astar.open(astarText.c_str());
        
	string output;

        output = fileName;    
        output =  pasta+"/"+output;
	output = "test/"+heuristic+"/report/"+output;
	output = "marvin/" + output;
	output = "marvin/" + output;
	output = "/home/" + output;	
        cout<<output.c_str()<<endl;

	ofstream outputFile;
	outputFile.open(output.c_str(), ios::out);
	
	outputFile<<"\t"<<astarText.c_str()<<endl;
 	//first while just to find the total number of levels.
        while (astar>>amount) {
		if (amount == tniveles) {
			astar>>amount;
			outputFile<<"totalniveles:\t"<<amount<<"\n";
		}
	}
        astar.close();

        astar2.open(astarText.c_str());	
	outputFile<<"\tf\t\t#Nodes_by_level\t\tRuntime(s)\t\t#Nodes_to_the_level\n";

	while (astar2>>amount) {
           if (amount != tniveles) {
	        if (amount == fnivel) {
			astar2>>amount;
			outputFile<<"\t"<<amount<<"\t\t";
		} else if (amount == nodosNivel) {
			astar2>>amount;
			outputFile<<amount<<"\t\t";
		} else if (amount == time) {
			astar2>>amount;
			outputFile<<"\t"<<amount<<"\t\t";
		} else if (amount == nodesUpToNivel) {
			astar2>>amount;
                        outputFile<<"\t"<<amount<<"\n";
		}
	   }
	}
	astar2.close();
	outputFile.close();


	std::vector<double> v_bf;
	ifstream astar3;
	astar3.open(astarText.c_str());
	int r = 1;
	v_bf.push_back(0);
	while (astar3>>amount) {
		if (amount == branchingFactor) {
			astar3>>amount;
			double bfactor = atof(amount.c_str());
			v_bf.insert(v_bf.begin() + r, bfactor);
			r++;
		}
	}

	astar3.close();
	cout<<"printing..."<<endl;
	cout<<"size of v_bf = "<<v_bf.size()<<endl;
	for (size_t i = 0; i < v_bf.size(); i++) {
	     cout<<v_bf.at(i)<<endl;
	}

	//Open this file
	ifstream astar4;
	astar4.open(output.c_str());
	
	string output2;
	//Create directory to store the table with the branching factor
	string rFinal = "mkdir /home/marvin/marvin/test/"+heuristic+"/report/"+pasta+"/resultado";
	system(rFinal.c_str());
	 
        output2 = fileName;    
        output2 =  pasta+"/resultado/"+output2;
	output2 = "test/"+heuristic+"/report/"+output2;
	output2 = "marvin/" + output2;
	output2 = "marvin/" + output2;
	output2 = "/home/" + output2;	
        cout<<"string output2 = "<<output2.c_str()<<endl;
	
	ofstream outputFile2;
	outputFile2.open(output2.c_str(), ios::out);
	
	string title;
	string str;
	int totalniveles2 = 0;

	astar4>>title;
	outputFile2<<"\t\t"<<title<<"\n";
	astar4>>str;
	astar4>>totalniveles2;
	cout<<"totalniveles2 = "<<totalniveles2<<endl;
	outputFile2<<"\ttotalniveles: "<<totalniveles2<<"\n";
	astar4>>str;//f
	astar4>>str;//n.b.l
	astar4>>str;//time
	astar4>>str;//n.t.t.l
	//outputFile2<<"\tf\t\tn.b.l.\t\tRuntime(s)\t\tn.t.t.l\t\tb.f\n";
	outputFile2<<"\tf\t\teffective branching factor\n";
	//Initialize levels
	float** levels;
	levels = new float*[totalniveles2];
	for (int i = 0; i < totalniveles2; i++) {
		levels[i] = new float[4];
	}

	for (int i = 0; i < totalniveles2; i++) {
	    for (int j = 0; j < 4; j++) {
		astar4>>levels[i][j];
	    }
	}

	for (int i = 0; i < totalniveles2; i++) {
	    //outputFile2<<"\t"<<levels[i][0]<<"\t\t"<<levels[i][1]<<"\t\t"<<levels[i][2]<<"\t\t\t"<<levels[i][3]<<"\t\t"<<v_bf.at(i)<<"\n";
	      outputFile2<<"\t"<<levels[i][0]<<"\t\t"<<v_bf.at(i)<<"\n";
	}
	astar4.close();
	outputFile2.close();
}


void create_report1(string heuristic, int countProblems) {

	int countRead = 0;
	do {

		ifstream readFile("h/report/d/entradalmcut-blocks.txt");
        	string pasta;
        	string domain;
		std::vector<string> fileNames;

		readFile>>pasta;

		string  pastaReporte = "mkdir /home/marvin/marvin/test/"+heuristic+"/report/"+pasta;
		system(pastaReporte.c_str());     
 
        	string output;
        	output = "resultado/";
        	output =  pasta+"/"+output;
		output = "test/"+heuristic+"/problemas/"+output;
		output = "marvin/" + output;
		output = "marvin/" + output;
		output = "/home/" + output;	
		//cout<<output.c_str()<<endl; 

		char input[] = "/home/marvin/marvin/test/lmcut/problemas/blocks/resultado/";

        	DIR *dir;
        	struct dirent *ent;
        
       	 	dir = opendir(output.c_str());
        	if (dir != NULL) {
	    		while ((ent = readdir(dir)) != NULL) {
				string fileName = ent->d_name;
				int sizeName = fileName.size();
                		if ((sizeName == 1)  || (sizeName == 2)) {
					//TODO
				} else {
		    			fileNames.push_back(fileName);
				}
            		}
            		closedir(dir);
		} else {
	    		cout<<"Error trying to open the directory."<<endl;
		}


        	for (std::vector<string>::size_type i = 0; i != fileNames.size(); i++) {
			string output2 = output+fileNames.at(i);
	        	//cout<<output2.c_str()<<" - "<<fileNames.at(i)<<endl;
			create_report2(output2.c_str(), fileNames.at(i), pasta, heuristic);
		}

	    	countRead = countRead + 1;
		} while (countRead < countProblems);
}


void create_report() {
	ifstream readFile("h/report/oneHeuristicReport.txt");
	int quantidade_total_opt;
	int total_heuristics;	 
	readFile>>quantidade_total_opt;
	readFile>>total_heuristics;
	
	int counter = 0;
	string heuristic;
	do {
		readFile>>heuristic;
		create_report1(heuristic, quantidade_total_opt);
		counter++;
	} while (counter < total_heuristics);
}




int main() {

	create_report();

	return 0;
}
