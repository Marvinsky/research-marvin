Dispatcher selected state size 1.
This is a unit task.
Estos son los inicios de los inicios.
argv[0] = src/search/downward-1
argv[0][0] = s
argv[1] = --global_probes
argv[2] = 1000
argv[4] = blocks
argv[5] = --problem_name
argc = 11
Simplifying transitions... done!
OptionParser::parse_cmd_line
registered: ss
registered: ipdb
OptionParser::parse_cmd_line
registered: ss
registered: ipdb
Average operator cost: 1
Memory usage before compute_additive_vars:1048
Memory usage after compute_additive_vars:1048
canonical_max_memory=205848
Memory usage after compute_max_cliques:1048
PDB collection construction time: 0s
Got 4 PDBs
Found 1 cliques
done calculating initial pattern collection and candidate patterns for the search
Calling iPDB with time_limit:0
current collection size is 24
current initial h value: 8
starting generating samples
	 starting improvement phase
Improvement below threshold. Aborting hill climbing.
Pruned 0 of 1 cliques
Pruned 0 of 4 PDBs
Dominance pruning took 0s
iPDB: iterations = 1
iPDB: num_patterns = 4
iPDB: size = 24
iPDB: improvement = 0
iPDB: generated = 24
iPDB: rejected = 0
iPDB: max_pdb_size = 12
Pattern generation (Haslum et al.) time: 0.01s
rg: 0.01
 ___________________________________
|         calling initialize        |
 ___________________________________
SSSearch ...
Initial heuristic value: 8
h_min: 8 depth: 0 #states: 0 time: 0s

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.8 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 1 1 0 0 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 522
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 8 g = 9 f = 17 w = 288
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 6 g = 10 f = 16 w = 576
		New node added
		child_node.getWeight() = 576
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 576


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 576
w = 576
	Child: h = 5 g = 11 f = 16 w = 576
		New node added
		child_node.getWeight() = 576
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 576
	Child: h = 5 g = 11 f = 16 w = 576
	is duplicate: h = 5 g = 11 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1152
1152
	Child: h = 7 g = 11 f = 18 w = 576
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 1152


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 1152
w = 1152
	Child: h = 4 g = 12 f = 16 w = 1152
		New node added
		child_node.getWeight() = 1152
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 1152
	Child: h = 6 g = 12 f = 18 w = 1152
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1152
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 1152


End PrintQueue
13: Raiz: h = 4 g = 12 f = 16 w  = 1152
w = 1152
	Child: h = 5 g = 13 f = 18 w = 1152
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 1152
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 9
count2 = 13
print boolean: 
bount = 11
1 0 1 1 1 0 0 1 1 1 1 
1 1 2 4 8 16 48 96 288 576 576 1152 1152 
expansions = 3920
**********
p = 3920
prePre = 2221
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1506.67
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.38 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.5 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 1 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1260.5
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1024
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 0 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 875.667
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 0 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 771.429
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 1 0 0 0 
1 1 2 4 8 16 32 32 64 64 
expansions = 224
**********
p = 224
prePre = 703
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 1 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 639.778
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 587.2
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.81 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.95 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 0 1 1 0 0 1 1 0 0 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 628.364
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 0 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 588.667
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.97 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.74 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.86 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.63 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.4 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.69 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 432


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 432
w = 432
	Child: h = 6 g = 8 f = 14 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 432
	Child: h = 8 g = 8 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 432
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 432
		 h = 8 g = 8 f = 16 w = 864


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 5 g = 9 f = 14 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 432

PrintQueue
		 h = 8 g = 8 f = 16 w = 864
		 h = 5 g = 9 f = 14 w = 432
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 864
w = 864
	Child: h = 7 g = 9 f = 16 w = 864
	is duplicate: h = 7 g = 9 f = 16
a = 0.06 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 1296
1296
	Child: h = 7 g = 9 f = 16 w = 864
	is duplicate: h = 7 g = 9 f = 16
a = 0.96 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 432
		 h = 7 g = 9 f = 16 w = 2160


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 432
w = 432
	Child: h = 6 g = 10 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 432
	Child: h = 6 g = 10 f = 16 w = 432
	is duplicate: h = 6 g = 10 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 2160
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 2160
w = 2160
	Child: h = 8 g = 10 f = 18 w = 2160
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2160
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2160
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864

PrintQueue
		 h = 5 g = 11 f = 16 w = 864


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 864
w = 864
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 6
count2 = 14
print boolean: 
bount = 15
1 1 0 1 0 0 0 0 0 1 0 0 1 0 0 
1 1 2 4 12 36 144 432 432 864 432 2160 864 864 
expansions = 6248
**********
p = 6248
prePre = 1024
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 1 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 961.286
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.25 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 9
count2 = 10
print boolean: 
bount = 11
1 1 0 0 0 1 1 1 1 1 1 
1 1 2 4 12 24 48 96 288 864 
expansions = 1340
**********
p = 1340
prePre = 986.533
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 0 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 941.375
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.21 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.88 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.21 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.23 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 180
180
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.97 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 252


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 252
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 252
w = 252
	Child: h = 6 g = 8 f = 14 w = 252
	is duplicate: h = 6 g = 8 f = 14
a = 0.57 prob = 0.777778
b = 1
		Added even though is duplicate.
		w = 324
324
	Child: h = 8 g = 8 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 252
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 504
504

PrintQueue
		 h = 6 g = 8 f = 14 w = 324
		 h = 8 g = 8 f = 16 w = 504


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 324
w = 324
	Child: h = 7 g = 9 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 324
	Child: h = 5 g = 9 f = 14 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 324

PrintQueue
		 h = 8 g = 8 f = 16 w = 504
		 h = 5 g = 9 f = 14 w = 324
		 h = 7 g = 9 f = 16 w = 324


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 504
w = 504
	Child: h = 7 g = 9 f = 16 w = 504
	is duplicate: h = 7 g = 9 f = 16
a = 0.72 prob = 0.608696
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 504
	is duplicate: h = 7 g = 9 f = 16
a = 0.02 prob = 0.378378
b = 1
		Added even though is duplicate.
		w = 1332
1332
	Child: h = 7 g = 9 f = 16 w = 504
	is duplicate: h = 7 g = 9 f = 16
a = 0.21 prob = 0.27451
b = 1
		Added even though is duplicate.
		w = 1836
1836

PrintQueue
		 h = 5 g = 9 f = 14 w = 324
		 h = 7 g = 9 f = 16 w = 1836


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 324
w = 324
	Child: h = 6 g = 10 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 324
	Child: h = 6 g = 10 f = 16 w = 324
	is duplicate: h = 6 g = 10 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1836
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1836
w = 1836
	Child: h = 8 g = 10 f = 18 w = 1836
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1836
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1836
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 648
w = 648
	Child: h = 5 g = 11 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 648

PrintQueue
		 h = 5 g = 11 f = 16 w = 648


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 648
w = 648
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 13
count2 = 16
print boolean: 
bount = 17
1 1 1 1 1 0 1 1 1 0 0 1 1 0 1 1 0 
1 1 2 4 12 36 36 72 36 252 324 504 324 1836 648 648 
expansions = 4736
**********
p = 4736
prePre = 1164.59
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1104.22
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1052.42
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.89 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 8 g = 9 f = 17 w = 144
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 0 1 1 0 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1025.9
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 982.762
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.89 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 11
1 1 1 0 0 0 0 0 0 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1008.82
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 0 0 0 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 980.348
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.93 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.17 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.88 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.142857
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.65 prob = 0.125
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.111111
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.81 prob = 0.1
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 720


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 720
w = 720
	Child: h = 8 g = 9 f = 17 w = 720
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 720
		New node added
		child_node.getWeight() = 720
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 720

PrintQueue
		 h = 7 g = 9 f = 16 w = 720


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 720
w = 720
	Child: h = 8 g = 10 f = 18 w = 720
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 720
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 720
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 11
print boolean: 
bount = 14
1 1 1 0 0 0 1 0 1 0 0 0 0 0 
1 1 2 4 12 24 72 144 72 720 720 
expansions = 1772
**********
p = 1772
prePre = 1013.33
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.18 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.97 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 288
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 288
w = 288
	Child: h = 8 g = 8 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.67 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 8 g = 8 f = 16 w = 1152


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.111111
b = 1
		Added even though is duplicate.
		w = 1296
1296
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.1
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.56 prob = 0.0909091
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.0833333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 1728


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 1728
w = 1728
	Child: h = 8 g = 9 f = 17 w = 1728
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 1728
	Child: h = 7 g = 9 f = 16 w = 1728
	is duplicate: h = 7 g = 9 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 3456
3456

PrintQueue
		 h = 7 g = 9 f = 16 w = 3456


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 3456
w = 3456
	Child: h = 8 g = 10 f = 18 w = 3456
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 3456
		New node added
		child_node.getWeight() = 3456
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 3456
	Child: h = 8 g = 10 f = 18 w = 3456
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 3456


End PrintQueue
12: Raiz: h = 6 g = 10 f = 16 w  = 3456
w = 3456
	Child: h = 6 g = 11 f = 17 w = 3456
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 7 g = 11 f = 18 w = 3456
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
count1 = 8
count2 = 12
print boolean: 
bount = 18
1 1 1 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 
1 1 2 4 12 36 144 288 144 1728 3456 3456 
expansions = 9272
**********
p = 9272
prePre = 1343.68
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.45 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.01 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.83 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.84 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 252


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 252
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 252
w = 252
	Child: h = 8 g = 8 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 252
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 504
504
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 756
756
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.96 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 1008


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 1008
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 1008
w = 1008
	Child: h = 8 g = 9 f = 17 w = 1008
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 1008
	is duplicate: h = 7 g = 9 f = 16
a = 0.28 prob = 0.933333
b = 1
		Added even though is duplicate.
		w = 1080
1080
	Child: h = 7 g = 9 f = 16 w = 1008
	is duplicate: h = 7 g = 9 f = 16
a = 0.68 prob = 0.482759
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 2088


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 2088
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 2088
w = 2088
	Child: h = 8 g = 10 f = 18 w = 2088
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2088
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2088
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2088
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 12
count2 = 16
print boolean: 
bount = 17
1 1 0 1 1 0 1 1 0 0 1 1 1 0 1 0 1 
1 1 2 4 12 36 36 72 36 252 72 1008 72 2088 144 144 
expansions = 3980
**********
p = 3980
prePre = 1445.08
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.55 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.55 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.56 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 8 g = 8 f = 16 w = 864


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 864
w = 864
	Child: h = 8 g = 9 f = 17 w = 864
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 864
	Child: h = 7 g = 9 f = 16 w = 864
	is duplicate: h = 7 g = 9 f = 16
a = 0.53 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 864
	is duplicate: h = 7 g = 9 f = 16
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 2592
2592

PrintQueue
		 h = 7 g = 9 f = 16 w = 2592


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 2592
w = 2592
	Child: h = 6 g = 10 f = 16 w = 2592
		New node added
		child_node.getWeight() = 2592
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 2592
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 2592


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 2592
w = 2592
	Child: h = 5 g = 11 f = 16 w = 2592
		New node added
		child_node.getWeight() = 2592
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 2592
	Child: h = 5 g = 11 f = 16 w = 2592
	is duplicate: h = 5 g = 11 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 5184
5184
	Child: h = 7 g = 11 f = 18 w = 2592
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 5184


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 5184
w = 5184
	Child: h = 4 g = 12 f = 16 w = 5184
		New node added
		child_node.getWeight() = 5184
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 5184
	Child: h = 6 g = 12 f = 18 w = 5184
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 5184
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 5184


End PrintQueue
13: Raiz: h = 4 g = 12 f = 16 w  = 5184
w = 5184
	Child: h = 5 g = 13 f = 18 w = 5184
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 5184
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 10
count2 = 13
print boolean: 
bount = 15
1 1 0 0 1 1 1 0 0 0 1 1 0 1 1 
1 1 2 4 12 24 72 216 864 2592 2592 5184 5184 
expansions = 16748
**********
p = 16748
prePre = 2011.85
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1942.79
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1882.07
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1821.93
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1766.84
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 0 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1715.81
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1667.45
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.34 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 8 g = 9 f = 17 w = 288
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 11
0 1 1 1 1 0 0 1 0 0 0 
1 1 2 2 4 8 24 72 288 576 
expansions = 978
**********
p = 978
prePre = 1647.18
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.21 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.05 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.75 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 11
1 0 1 1 1 1 1 1 0 0 0 
1 1 2 4 8 16 48 144 432 864 
expansions = 1520
**********
p = 1520
prePre = 1643.54
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.77 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 1 1 0 1 0 0 0 1 0 
1 1 2 4 12 24 72 144 288 576 
expansions = 1124
**********
p = 1124
prePre = 1629.11
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.99 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 0 0 0 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1599.19
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1560.11
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.89 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.36 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 6 g = 8 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 144
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.59 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.19 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 360
360
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.66 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 504


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 504
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 504
w = 504
	Child: h = 6 g = 10 f = 16 w = 504
	is duplicate: h = 6 g = 10 f = 16
a = 0.39 prob = 0.777778
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 648
w = 648
	Child: h = 7 g = 11 f = 18 w = 648
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 648

PrintQueue
		 h = 5 g = 11 f = 16 w = 648


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 648
w = 648
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 10
count2 = 14
print boolean: 
bount = 13
0 1 1 0 1 1 0 1 1 1 0 1 1 
1 1 2 2 4 8 24 72 72 144 72 504 648 648 
expansions = 2202
**********
p = 2202
prePre = 1576.56
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.7 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1541.7
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 0 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1507.8
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.18 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.29 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.01 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 432
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 432
w = 432
	Child: h = 8 g = 8 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 432
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 1296
1296
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.44 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 8 g = 8 f = 16 w = 1728


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.0769231
b = 1
		Added even though is duplicate.
		w = 1872
1872
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.96 prob = 0.0714286
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.0666667
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.0625
b = 1
		Added even though is duplicate.
		w = 2304
2304
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.0588235
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 2448


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 2448
w = 2448
	Child: h = 8 g = 9 f = 17 w = 2448
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 2448
		New node added
		child_node.getWeight() = 2448
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 2448
	Child: h = 7 g = 9 f = 16 w = 2448
	is duplicate: h = 7 g = 9 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 2448
	is duplicate: h = 7 g = 9 f = 16
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 7344
7344

PrintQueue
		 h = 7 g = 9 f = 16 w = 7344


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 7344
w = 7344
	Child: h = 8 g = 10 f = 18 w = 7344
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 7344
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 7344
		New node added
		child_node.getWeight() = 7344
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 7344
	Child: h = 8 g = 10 f = 18 w = 7344
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 7344


End PrintQueue
12: Raiz: h = 6 g = 10 f = 16 w  = 7344
w = 7344
	Child: h = 6 g = 11 f = 17 w = 7344
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 7344
		New node added
		child_node.getWeight() = 7344
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 7344
	Child: h = 7 g = 11 f = 18 w = 7344
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 7344


End PrintQueue
13: Raiz: h = 5 g = 11 f = 16 w  = 7344
w = 7344
	Child: h = 6 g = 12 f = 18 w = 7344
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 7344
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 7344
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 11
count2 = 13
print boolean: 
bount = 21
1 1 0 1 0 0 1 1 1 0 0 0 1 0 1 0 0 1 0 0 1 
1 1 2 4 12 36 144 432 144 2448 7344 7344 7344 
expansions = 25256
**********
p = 25256
prePre = 2073.24
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.99 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 1 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 2037.16
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.93 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.45 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.93 prob = 0.25
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.02 prob = 0.2
b = 1
		Added even though is duplicate.
		w = 360
360
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.54 prob = 0.166667
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 11
print boolean: 
bount = 12
1 1 1 0 0 1 0 0 0 0 1 0 
1 1 2 4 12 24 72 72 72 432 432 
expansions = 1124
**********
p = 1124
prePre = 2016.41
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.64 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 10
1 0 1 1 0 0 1 0 0 0 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1994.71
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 384
384

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
1 0 1 1 0 0 0 1 1 
1 1 2 4 8 16 48 96 192 384 
expansions = 752
**********
p = 752
prePre = 1967.7
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 0 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1928.94
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.67 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.77 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 0 1 1 1 1 0 0 
1 1 2 2 4 8 16 32 96 288 
expansions = 450
**********
p = 450
prePre = 1898.13
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1861.71
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.69 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 0 0 0 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1831.56
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.02 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.75 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 648
648

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 8 g = 9 f = 17 w = 648
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 12
1 1 0 1 1 1 1 0 0 0 1 0 
1 1 2 4 12 36 108 216 648 1296 
expansions = 2324
**********
p = 2324
prePre = 1841.22
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1808
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.51 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 1 0 0 0 1 0 
1 1 2 2 4 8 24 48 96 192 
expansions = 378
**********
p = 378
prePre = 1781.02
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.07 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.44 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 6 g = 10 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 5
count2 = 12
print boolean: 
bount = 8
0 0 1 1 0 1 1 0 
1 1 2 2 4 4 8 16 48 144 144 144 
expansions = 518
**********
p = 518
prePre = 1757.63
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.64 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.75 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.14 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 648
648

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.19 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 1944
1944

PrintQueue
		 h = 7 g = 9 f = 16 w = 1944


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1944
w = 1944
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 9
count2 = 10
print boolean: 
bount = 13
1 1 0 0 1 1 1 0 1 0 1 0 1 
1 1 2 4 12 24 72 216 648 1944 
expansions = 2924
**********
p = 2924
prePre = 1778.84
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.82 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 1 0 0 0 1 0 
1 1 2 2 4 8 24 48 96 192 
expansions = 378
**********
p = 378
prePre = 1753.82
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1724.42
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.53 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.14 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 6 g = 8 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 6 g = 8 f = 14 w = 216
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 5 g = 9 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 216

PrintQueue
		 h = 8 g = 8 f = 16 w = 432
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 216


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.05 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.48 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.84 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 1512


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 216
w = 216
	Child: h = 6 g = 10 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 216
	Child: h = 6 g = 10 f = 16 w = 216
	is duplicate: h = 6 g = 10 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1512
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1512
w = 1512
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 432
w = 432
	Child: h = 5 g = 11 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 5 g = 11 f = 16 w = 432


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 432
w = 432
	Child: h = 6 g = 12 f = 18 w = 432
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 432
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 9
count2 = 14
print boolean: 
bount = 14
1 1 0 0 1 1 1 1 0 1 1 0 0 0 
1 1 2 4 12 24 72 216 216 432 216 1512 432 432 
expansions = 3572
**********
p = 3572
prePre = 1756.28
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.69 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.36 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 1 1 0 0 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1735.36
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.79 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 0 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1709.47
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
0 0 1 1 0 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1684.43
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 1 0 1 0 1 1 
1 1 2 2 4 8 16 32 64 128 
expansions = 258
**********
p = 258
prePre = 1661.42
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.94 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.11 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 6 g = 8 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 216
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 5 g = 9 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 216

PrintQueue
		 h = 8 g = 8 f = 16 w = 432
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 216


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.78 prob = 0.666667
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.26 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 1080
1080

PrintQueue
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 1080


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 216
w = 216
	Child: h = 6 g = 10 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 216
	Child: h = 6 g = 10 f = 16 w = 216
	is duplicate: h = 6 g = 10 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 7 g = 9 f = 16 w = 1080
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1080
w = 1080
	Child: h = 6 g = 10 f = 16 w = 1080
	is duplicate: h = 6 g = 10 f = 16
a = 0.96 prob = 0.714286
b = 0
		Not added.
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1512


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 1512
w = 1512
	Child: h = 7 g = 11 f = 18 w = 1512
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1512
		New node added
		child_node.getWeight() = 1512
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1512

PrintQueue
		 h = 5 g = 11 f = 16 w = 1512


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 1512
w = 1512
	Child: h = 6 g = 12 f = 18 w = 1512
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1512
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 9
count2 = 14
print boolean: 
bount = 14
1 1 0 0 1 1 1 1 0 0 0 1 1 0 
1 1 2 4 12 24 72 216 216 432 216 1080 1512 1512 
expansions = 5300
**********
p = 5300
prePre = 1719.17
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.94 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.6 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 1 0 0 0 0 1 1 
1 1 2 4 12 24 48 48 96 192 
expansions = 428
**********
p = 428
prePre = 1699
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1674.71
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 0 1 1 1 1 0 0 
1 1 2 2 4 4 8 16 48 144 
expansions = 230
**********
p = 230
prePre = 1652.82
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1631.04
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 1 0 0 1 0 
1 1 2 4 8 16 32 32 64 128 
expansions = 288
**********
p = 288
prePre = 1611.29
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.8 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.14 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.166667
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 11
print boolean: 
bount = 12
1 1 1 0 0 1 0 0 0 1 0 0 
1 1 2 4 12 24 72 72 72 432 432 
expansions = 1124
**********
p = 1124
prePre = 1604.23
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1582.2
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 8 g = 9 f = 17 w = 144
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 0 1 1 0 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1567.27
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1546.36
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 384
384
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.7 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 6 g = 10 f = 16 w = 576
		New node added
		child_node.getWeight() = 576
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 576


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 576
w = 576
	Child: h = 7 g = 11 f = 18 w = 576
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 576
		New node added
		child_node.getWeight() = 576
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 576

PrintQueue
		 h = 5 g = 11 f = 16 w = 576


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 576
w = 576
	Child: h = 6 g = 12 f = 18 w = 576
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 576
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 12
print boolean: 
bount = 10
1 0 1 0 1 1 0 1 1 0 
1 1 2 4 8 16 32 64 192 576 576 576 
expansions = 2048
**********
p = 2048
prePre = 1553.23
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 6 g = 8 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 144
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.46 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.78 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 360


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 360
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 360
w = 360
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 14
print boolean: 
bount = 11
0 1 1 1 1 1 0 0 1 0 1 
1 1 2 2 4 8 24 72 72 144 72 360 144 144 
expansions = 1050
**********
p = 1050
prePre = 1546.43
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.27 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.61 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.56 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 8 g = 8 f = 16 w = 576


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 576
w = 576
	Child: h = 8 g = 9 f = 17 w = 576
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 576
		New node added
		child_node.getWeight() = 576
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 576
	Child: h = 7 g = 9 f = 16 w = 576
	is duplicate: h = 7 g = 9 f = 16
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1152
1152
	Child: h = 7 g = 9 f = 16 w = 576
	is duplicate: h = 7 g = 9 f = 16
a = 0 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 1728
1728

PrintQueue
		 h = 7 g = 9 f = 16 w = 1728


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1728
w = 1728
	Child: h = 6 g = 10 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 1728
	Child: h = 8 g = 10 f = 18 w = 1728
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1728
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1728
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1728


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 1728
w = 1728
	Child: h = 5 g = 11 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1728
	Child: h = 5 g = 11 f = 16 w = 1728
	is duplicate: h = 5 g = 11 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 3456
3456
	Child: h = 7 g = 11 f = 18 w = 1728
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 3456


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 3456
w = 3456
	Child: h = 4 g = 12 f = 16 w = 3456
		New node added
		child_node.getWeight() = 3456
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 3456
	Child: h = 6 g = 12 f = 18 w = 3456
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 3456
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 3456


End PrintQueue
13: Raiz: h = 4 g = 12 f = 16 w  = 3456
w = 3456
	Child: h = 5 g = 13 f = 18 w = 3456
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 3456
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 10
count2 = 13
print boolean: 
bount = 14
1 0 1 1 1 1 0 0 0 0 1 1 1 1 
1 1 2 4 8 16 48 144 576 1728 1728 3456 3456 
expansions = 11168
**********
p = 11168
prePre = 1674.72
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1655.32
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 1 0 1 0 1 1 
1 1 2 2 4 8 16 32 64 128 
expansions = 258
**********
p = 258
prePre = 1637.17
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1616.97
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.96 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.52 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.13 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.72 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.81 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.65 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 864


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 864
w = 864
	Child: h = 8 g = 9 f = 17 w = 864
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 864
	Child: h = 7 g = 9 f = 16 w = 864
	is duplicate: h = 7 g = 9 f = 16
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1728
1728

PrintQueue
		 h = 7 g = 9 f = 16 w = 1728


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1728
w = 1728
	Child: h = 6 g = 10 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 1728
	Child: h = 8 g = 10 f = 18 w = 1728
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1728
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1728


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 1728
w = 1728
	Child: h = 5 g = 11 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1728
	Child: h = 7 g = 11 f = 18 w = 1728
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 1728


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 1728
w = 1728
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 12
print boolean: 
bount = 13
1 1 0 0 1 0 1 0 0 1 0 0 1 
1 1 2 4 12 24 72 216 864 1728 1728 1728 
expansions = 6380
**********
p = 6380
prePre = 1677.27
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.37 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.38 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.14 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 1 0 1 1 0 0 0 1 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1675.75
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.84 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.45 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.97 prob = 0.166667
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 11
print boolean: 
bount = 12
1 1 1 0 0 1 0 1 0 1 0 0 
1 1 2 4 12 24 72 72 72 432 432 
expansions = 1124
**********
p = 1124
prePre = 1668.94
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1649.54
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 0 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1631.28
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.58 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.12 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.57 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.46 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.84 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.46 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 288
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 288
w = 288
	Child: h = 8 g = 8 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.8 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.32 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 8 g = 8 f = 16 w = 1152


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.111111
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.81 prob = 0.1
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.0909091
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.0833333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 1728


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 1728
w = 1728
	Child: h = 8 g = 9 f = 17 w = 1728
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 1728
	Child: h = 7 g = 9 f = 16 w = 1728
	is duplicate: h = 7 g = 9 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 3456
3456

PrintQueue
		 h = 7 g = 9 f = 16 w = 3456


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 3456
w = 3456
	Child: h = 6 g = 10 f = 16 w = 3456
		New node added
		child_node.getWeight() = 3456
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 3456
	Child: h = 8 g = 10 f = 18 w = 3456
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3456
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 3456


End PrintQueue
12: Raiz: h = 6 g = 10 f = 16 w  = 3456
w = 3456
	Child: h = 5 g = 11 f = 16 w = 3456
		New node added
		child_node.getWeight() = 3456
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 3456
	Child: h = 7 g = 11 f = 18 w = 3456
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 3456


End PrintQueue
13: Raiz: h = 5 g = 11 f = 16 w  = 3456
w = 3456
	Child: h = 6 g = 12 f = 18 w = 3456
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 3456
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 3456
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 13
print boolean: 
bount = 18
1 1 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 
1 1 2 4 12 36 144 288 144 1728 3456 3456 3456 
expansions = 12728
**********
p = 12728
prePre = 1763.38
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.71 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.96 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
1 0 0 1 1 0 1 0 0 
1 1 2 4 8 8 16 32 96 288 
expansions = 456
**********
p = 456
prePre = 1748
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 0 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1729.79
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.62 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 1 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1713.98
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.55 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.2 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.79 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 6 g = 8 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 144
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.08 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.75 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.89 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 504


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 504
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 504
w = 504
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 14
print boolean: 
bount = 12
0 1 1 0 1 1 0 1 1 0 0 0 
1 1 2 2 4 8 24 72 72 144 72 504 144 144 
expansions = 1194
**********
p = 1194
prePre = 1708.07
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1689.57
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.79 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.17 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.33 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 7 g = 9 f = 16 w = 216
	is duplicate: h = 7 g = 9 f = 16
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 10
0 1 1 0 1 1 1 1 0 0 
1 1 2 2 4 8 24 72 216 432 
expansions = 762
**********
p = 762
prePre = 1679.27
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.09 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 6 g = 8 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 144
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.65 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.29 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 360
360
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.44 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 504


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 504
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 504
w = 504
	Child: h = 6 g = 10 f = 16 w = 504
	is duplicate: h = 6 g = 10 f = 16
a = 0.02 prob = 0.777778
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 648
w = 648
	Child: h = 7 g = 11 f = 18 w = 648
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 648

PrintQueue
		 h = 5 g = 11 f = 16 w = 648


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 648
w = 648
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 11
count2 = 14
print boolean: 
bount = 13
0 1 1 1 1 1 0 1 1 1 0 1 1 
1 1 2 2 4 8 24 72 72 144 72 504 648 648 
expansions = 2202
**********
p = 2202
prePre = 1685.01
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 384
384

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
1 0 1 0 1 1 0 0 1 
1 1 2 4 8 16 32 64 192 384 
expansions = 704
**********
p = 704
prePre = 1674.35
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.96 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.71 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.46 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 0 0 1 1 0 1 1 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1673.08
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.21 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.14 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 8
0 0 1 1 1 1 1 1 
1 1 2 2 4 4 8 16 48 144 
expansions = 230
**********
p = 230
prePre = 1657.72
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 1 0 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1645.77
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.17 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 6 g = 8 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 6 g = 8 f = 14 w = 144
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 5 g = 9 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 144

PrintQueue
		 h = 8 g = 8 f = 16 w = 288
		 h = 5 g = 9 f = 14 w = 144
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.34 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.99 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.88 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 144
		 h = 7 g = 9 f = 16 w = 1008


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 144
w = 144
	Child: h = 6 g = 10 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 144
	Child: h = 6 g = 10 f = 16 w = 144
	is duplicate: h = 6 g = 10 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1008
		 h = 6 g = 10 f = 16 w = 288


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1008
w = 1008
	Child: h = 8 g = 10 f = 18 w = 1008
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1008
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1008
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1008
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 288


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 288
w = 288
	Child: h = 5 g = 11 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 5 g = 11 f = 16 w = 288


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 288
w = 288
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 14
print boolean: 
bount = 13
1 0 1 1 0 1 1 0 1 1 0 0 0 
1 1 2 4 8 16 48 144 144 288 144 1008 288 288 
expansions = 2384
**********
p = 2384
prePre = 1653.46
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1637.46
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.93 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.58 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 1 0 0 0 1 0 0 
1 1 2 4 12 24 48 96 192 192 
expansions = 572
**********
p = 572
prePre = 1626.59
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 11
1 1 1 0 1 0 0 1 0 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1625.88
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1610.76
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.91 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 1 0 1 0 0 1 0 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1610.22
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.75 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 0 0 1 1 0 1 1 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1609.69
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.94 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 8 g = 9 f = 17 w = 288
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
1 0 1 1 1 0 0 1 0 
1 1 2 4 8 16 48 96 288 288 
expansions = 752
**********
p = 752
prePre = 1601.36
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1587.83
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.62 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.62 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 1 0 0 0 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1577.68
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
1 0 0 1 1 1 0 1 
1 1 2 4 8 8 16 32 96 192 
expansions = 360
**********
p = 360
prePre = 1566.19
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1552.67
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.81 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
0 0 1 1 0 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1539.98
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1526.95
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.86 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.01 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.79 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.16 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 12
1 1 0 0 1 1 1 0 1 1 0 0 
1 1 2 4 12 24 72 216 648 1296 
expansions = 2276
**********
p = 2276
prePre = 1533.76
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1520.97
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.81 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.75 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.39 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 8 g = 9 f = 17 w = 288
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 6 g = 10 f = 16 w = 576
		New node added
		child_node.getWeight() = 576
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 576


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 576
w = 576
	Child: h = 5 g = 11 f = 16 w = 576
		New node added
		child_node.getWeight() = 576
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 576
	Child: h = 7 g = 11 f = 18 w = 576
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 576


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 576
w = 576
	Child: h = 6 g = 12 f = 18 w = 576
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 576
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 576
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 12
print boolean: 
bount = 11
0 1 1 1 1 0 0 1 0 0 1 
1 1 2 2 4 8 24 72 288 576 576 576 
expansions = 2130
**********
p = 2130
prePre = 1526.41
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.27 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.3 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 11
1 0 1 1 0 1 0 1 0 0 0 
1 1 2 4 8 16 48 144 432 864 
expansions = 1520
**********
p = 1520
prePre = 1526.35
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1513.65
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1501.37
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.79 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
1 1 0 0 0 0 0 
1 1 2 4 12 24 48 48 96 96 
expansions = 332
**********
p = 332
prePre = 1491.29
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1480.1
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1468.85
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1457.36
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1446.22
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1435.52
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1425.39
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1414.44
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.46 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.25
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.6 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.166667
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 11
print boolean: 
bount = 13
1 1 1 0 0 1 0 0 0 0 0 0 0 
1 1 2 4 12 24 72 72 72 432 864 
expansions = 1556
**********
p = 1556
prePre = 1415.58
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.79 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 1 0 0 0 1 0 
1 1 2 2 4 8 24 48 96 192 
expansions = 378
**********
p = 378
prePre = 1407.28
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.18 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.79 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.38 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.64 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 288
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 288
w = 288
	Child: h = 8 g = 8 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 8 g = 8 f = 16 w = 1152


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.8 prob = 0.111111
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.69 prob = 0.1
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.0909091
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.46 prob = 0.0833333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 1728


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 1728
w = 1728
	Child: h = 8 g = 9 f = 17 w = 1728
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 1728
	Child: h = 7 g = 9 f = 16 w = 1728
	is duplicate: h = 7 g = 9 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 3456


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 3456
w = 3456
	Child: h = 8 g = 10 f = 18 w = 3456
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3456
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3456
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3456
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 11
print boolean: 
bount = 18
1 1 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 
1 1 2 4 12 36 144 288 144 1728 3456 
expansions = 5816
**********
p = 5816
prePre = 1442.27
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1431.4
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 0 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1421.36
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.41 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.86 prob = 0.666667
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.45 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.48 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 252


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 252
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 252
w = 252
	Child: h = 6 g = 8 f = 14 w = 252
	is duplicate: h = 6 g = 8 f = 14
a = 0.26 prob = 0.777778
b = 1
		Added even though is duplicate.
		w = 324
324
	Child: h = 8 g = 8 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 252
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 504
504

PrintQueue
		 h = 6 g = 8 f = 14 w = 324
		 h = 8 g = 8 f = 16 w = 504


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 324
w = 324
	Child: h = 7 g = 9 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 324
	Child: h = 5 g = 9 f = 14 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 324

PrintQueue
		 h = 8 g = 8 f = 16 w = 504
		 h = 5 g = 9 f = 14 w = 324
		 h = 7 g = 9 f = 16 w = 324


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 504
w = 504
	Child: h = 7 g = 9 f = 16 w = 504
	is duplicate: h = 7 g = 9 f = 16
a = 0.3 prob = 0.608696
b = 1
		Added even though is duplicate.
		w = 828
828
	Child: h = 7 g = 9 f = 16 w = 504
	is duplicate: h = 7 g = 9 f = 16
a = 0.38 prob = 0.378378
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 504
	is duplicate: h = 7 g = 9 f = 16
a = 0.39 prob = 0.27451
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 324
		 h = 7 g = 9 f = 16 w = 1836


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 324
w = 324
	Child: h = 6 g = 10 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 324
	Child: h = 6 g = 10 f = 16 w = 324
	is duplicate: h = 6 g = 10 f = 16
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 648
648

PrintQueue
		 h = 7 g = 9 f = 16 w = 1836
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1836
w = 1836
	Child: h = 8 g = 10 f = 18 w = 1836
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1836
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1836
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1836
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 648
w = 648
	Child: h = 7 g = 11 f = 18 w = 648
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 648

PrintQueue
		 h = 5 g = 11 f = 16 w = 648


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 648
w = 648
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 12
count2 = 16
print boolean: 
bount = 17
1 1 1 1 1 0 1 0 0 0 1 1 1 1 0 0 1 
1 1 2 4 12 36 36 72 36 252 324 504 324 1836 648 648 
expansions = 4736
**********
p = 4736
prePre = 1447.05
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.53 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.39 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 0 1 1 0 0 0 0 
1 1 2 4 8 16 48 96 192 192 
expansions = 560
**********
p = 560
prePre = 1440.23
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1430.4
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.94 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 288


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 288
w = 288
	Child: h = 7 g = 11 f = 18 w = 288
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 5 g = 11 f = 16 w = 288


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 288
w = 288
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 6
count2 = 12
print boolean: 
bount = 9
1 0 0 1 1 0 1 1 0 
1 1 2 4 8 8 16 32 96 288 288 288 
expansions = 1032
**********
p = 1032
prePre = 1427.38
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.67 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.3 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.07 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.39 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 180
180

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 180


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 180
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 180
w = 180
	Child: h = 6 g = 8 f = 14 w = 180
	is duplicate: h = 6 g = 8 f = 14
a = 0.01 prob = 0.714286
b = 1
		Added even though is duplicate.
		w = 252
252
	Child: h = 8 g = 8 f = 16 w = 180
		New node added
		child_node.getWeight() = 180
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 180
	Child: h = 8 g = 8 f = 16 w = 180
	is duplicate: h = 8 g = 8 f = 16
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 360
360

PrintQueue
		 h = 6 g = 8 f = 14 w = 252
		 h = 8 g = 8 f = 16 w = 360


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 252
w = 252
	Child: h = 7 g = 9 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 252
	Child: h = 5 g = 9 f = 14 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 252

PrintQueue
		 h = 8 g = 8 f = 16 w = 360
		 h = 5 g = 9 f = 14 w = 252
		 h = 7 g = 9 f = 16 w = 252


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 360
w = 360
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.98 prob = 0.588235
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.37037
b = 1
		Added even though is duplicate.
		w = 972
972
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.59 prob = 0.27027
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 252
		 h = 7 g = 9 f = 16 w = 1332


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 252
w = 252
	Child: h = 6 g = 10 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 252
	Child: h = 6 g = 10 f = 16 w = 252
	is duplicate: h = 6 g = 10 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1332
		 h = 6 g = 10 f = 16 w = 504


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1332
w = 1332
	Child: h = 6 g = 10 f = 16 w = 1332
	is duplicate: h = 6 g = 10 f = 16
a = 0.91 prob = 0.72549
b = 0
		Not added.
	Child: h = 8 g = 10 f = 18 w = 1332
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1332
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1836


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 1836
w = 1836
	Child: h = 5 g = 11 f = 16 w = 1836
		New node added
		child_node.getWeight() = 1836
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1836

PrintQueue
		 h = 5 g = 11 f = 16 w = 1836


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 1836
w = 1836
	Child: h = 6 g = 12 f = 18 w = 1836
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1836
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 11
count2 = 16
print boolean: 
bount = 17
1 1 0 1 1 0 0 1 1 1 1 1 0 1 0 0 0 
1 1 2 4 12 36 36 72 36 180 252 360 252 1332 1836 1836 
expansions = 6248
**********
p = 6248
prePre = 1463.62
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 0 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1453.7
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 1 0 0 1 0 
1 1 2 4 8 16 32 32 64 128 
expansions = 288
**********
p = 288
prePre = 1445.07
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.99 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.61 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.42 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.11 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 8 g = 8 f = 16 w = 864


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 864
w = 864
	Child: h = 8 g = 9 f = 17 w = 864
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 864
	Child: h = 7 g = 9 f = 16 w = 864
	is duplicate: h = 7 g = 9 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1728
1728
	Child: h = 7 g = 9 f = 16 w = 864
	is duplicate: h = 7 g = 9 f = 16
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 2592


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 2592
w = 2592
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 2592
		New node added
		child_node.getWeight() = 2592
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 2592
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 2592


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 2592
w = 2592
	Child: h = 6 g = 11 f = 17 w = 2592
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 7 g = 11 f = 18 w = 2592
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 2592
		New node added
		child_node.getWeight() = 2592
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 2592

PrintQueue
		 h = 5 g = 11 f = 16 w = 2592


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 2592
w = 2592
	Child: h = 4 g = 12 f = 16 w = 2592
		New node added
		child_node.getWeight() = 2592
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 2592
	Child: h = 6 g = 12 f = 18 w = 2592
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 2592
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 2592


End PrintQueue
13: Raiz: h = 4 g = 12 f = 16 w  = 2592
w = 2592
	Child: h = 5 g = 13 f = 18 w = 2592
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 2592
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 9
count2 = 13
print boolean: 
bount = 14
1 1 1 0 1 0 1 0 0 1 0 1 1 0 
1 1 2 4 12 24 72 216 864 2592 2592 2592 2592 
expansions = 11564
**********
p = 11564
prePre = 1519.47
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1509.12
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1498.93
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1488.71
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.34 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
0 0 1 1 0 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1479.37
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1470.26
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.77 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.84 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.04 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 6 g = 8 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 6 g = 8 f = 14 w = 216
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 5 g = 9 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 216

PrintQueue
		 h = 8 g = 8 f = 16 w = 432
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 216


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.25 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.01 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 1080
1080
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.9 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 1512


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 216
w = 216
	Child: h = 6 g = 10 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 216
	Child: h = 6 g = 10 f = 16 w = 216
	is duplicate: h = 6 g = 10 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1512
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1512
w = 1512
	Child: h = 6 g = 10 f = 16 w = 1512
	is duplicate: h = 6 g = 10 f = 16
a = 0.66 prob = 0.777778
b = 1
		Added even though is duplicate.
		w = 1944
1944
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1944


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 1944
w = 1944
	Child: h = 7 g = 11 f = 18 w = 1944
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1944
		New node added
		child_node.getWeight() = 1944
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1944

PrintQueue
		 h = 5 g = 11 f = 16 w = 1944


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 1944
w = 1944
	Child: h = 6 g = 12 f = 18 w = 1944
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1944
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 10
count2 = 14
print boolean: 
bount = 15
1 1 0 0 1 0 1 1 0 1 1 1 0 0 1 
1 1 2 4 12 24 72 216 216 432 216 1512 1944 1944 
expansions = 6596
**********
p = 6596
prePre = 1506.35
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1496.66
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 0 0 1 1 0 0 0 
1 1 2 4 8 8 16 32 96 192 
expansions = 360
**********
p = 360
prePre = 1488.76
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.91 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 384
384

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
1 1 0 0 0 1 0 1 1 
1 1 2 4 12 24 48 96 192 384 
expansions = 764
**********
p = 764
prePre = 1483.77
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.86 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 10
1 0 1 1 0 0 1 0 0 0 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1480.73
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.42 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 6 g = 8 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 144
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.41 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.64 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.74 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 504


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 504
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 504
w = 504
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 14
print boolean: 
bount = 12
0 1 1 0 1 1 0 1 1 0 0 0 
1 1 2 2 4 8 24 72 72 144 72 504 144 144 
expansions = 1194
**********
p = 1194
prePre = 1478.78
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1469.2
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1460.03
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1450.81
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.86 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 6 g = 8 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.58 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 6 g = 8 f = 14 w = 144
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.58 prob = 0.142857
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.125
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.111111
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.1
b = 1
		Added even though is duplicate.
		w = 720
720

PrintQueue
		 h = 6 g = 8 f = 14 w = 144
		 h = 8 g = 8 f = 16 w = 720


End PrintQueue
10: Raiz: h = 6 g = 8 f = 14 w  = 144
w = 144
	Child: h = 5 g = 9 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 144
	Child: h = 5 g = 9 f = 14 w = 144
	is duplicate: h = 5 g = 9 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 8 g = 8 f = 16 w = 720
		 h = 5 g = 9 f = 14 w = 288
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
11: Raiz: h = 8 g = 8 f = 16 w  = 720
w = 720
	Child: h = 8 g = 9 f = 17 w = 720
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 720
	is duplicate: h = 7 g = 9 f = 16
a = 0.34 prob = 0.833333
b = 1
		Added even though is duplicate.
		w = 864
864
	Child: h = 7 g = 9 f = 16 w = 720
	is duplicate: h = 7 g = 9 f = 16
a = 0.62 prob = 0.454545
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 720
	is duplicate: h = 7 g = 9 f = 16
a = 0.02 prob = 0.3125
b = 1
		Added even though is duplicate.
		w = 2304
2304

PrintQueue
		 h = 5 g = 9 f = 14 w = 288
		 h = 7 g = 9 f = 16 w = 2304


End PrintQueue
12: Raiz: h = 5 g = 9 f = 14 w  = 288
w = 288
	Child: h = 4 g = 10 f = 14 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 4 g = 10 f = 14 threshold: 16 w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 2304
		 h = 4 g = 10 f = 14 w = 288
		 h = 6 g = 10 f = 16 w = 576


End PrintQueue
13: Raiz: h = 7 g = 9 f = 16 w  = 2304
w = 2304
	Child: h = 6 g = 10 f = 16 w = 2304
	is duplicate: h = 6 g = 10 f = 16
a = 0.99 prob = 0.8
b = 0
		Not added.
	Child: h = 8 g = 10 f = 18 w = 2304
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2304
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2304
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2304
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 10 f = 14 w = 288
		 h = 6 g = 10 f = 16 w = 2880


End PrintQueue
14: Raiz: h = 4 g = 10 f = 14 w  = 288
w = 288
	Child: h = 5 g = 11 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 288
	Child: h = 5 g = 11 f = 16 w = 288
	is duplicate: h = 5 g = 11 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 6 g = 10 f = 16 w = 2880
		 h = 5 g = 11 f = 16 w = 576


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 2880
w = 2880
	Child: h = 5 g = 11 f = 16 w = 2880
	is duplicate: h = 5 g = 11 f = 16
a = 0.42 prob = 0.833333
b = 1
		Added even though is duplicate.
		w = 3456
3456
	Child: h = 5 g = 11 f = 16 w = 2880
	is duplicate: h = 5 g = 11 f = 16
a = 0.97 prob = 0.454545
b = 0
		Not added.
	Child: h = 7 g = 11 f = 18 w = 2880
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 6336


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 6336
w = 6336
	Child: h = 6 g = 12 f = 18 w = 6336
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 6336
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 6336
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 16
count2 = 16
print boolean: 
bount = 23
1 1 1 0 0 1 1 1 1 0 0 1 0 1 1 1 0 1 1 0 1 1 0 
1 1 2 4 12 24 72 144 72 144 720 288 2304 288 2880 6336 
expansions = 13292
**********
p = 13292
prePre = 1529.23
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.8 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.09 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.17 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 7 g = 9 f = 16 w = 216
	is duplicate: h = 7 g = 9 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 10
0 1 1 0 1 1 1 1 0 0 
1 1 2 2 4 8 24 72 216 432 
expansions = 762
**********
p = 762
prePre = 1524.18
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.5 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.71 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 10
1 0 1 1 1 0 0 0 0 0 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1521.02
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.48 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 10
1 0 1 0 1 1 1 1 0 0 
1 1 2 4 8 16 32 64 192 576 
expansions = 896
**********
p = 896
prePre = 1516.96
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.7 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.69 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
0 0 1 1 0 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1508.35
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 1 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1499.62
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.08 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.28 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.78 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 180


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 180
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 180
w = 180
	Child: h = 8 g = 8 f = 16 w = 180
		New node added
		child_node.getWeight() = 180
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 180
	Child: h = 8 g = 8 f = 16 w = 180
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 360
360
	Child: h = 8 g = 8 f = 16 w = 180
	is duplicate: h = 8 g = 8 f = 16
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 540
540

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 540


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 540
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 540
w = 540
	Child: h = 8 g = 9 f = 17 w = 540
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 540
	is duplicate: h = 7 g = 9 f = 16
a = 0.05 prob = 0.882353
b = 1
		Added even though is duplicate.
		w = 612
612
	Child: h = 7 g = 9 f = 16 w = 540
	is duplicate: h = 7 g = 9 f = 16
a = 0.86 prob = 0.46875
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 1152


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1152
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1152
w = 1152
	Child: h = 8 g = 10 f = 18 w = 1152
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1152
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1152
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 11
count2 = 16
print boolean: 
bount = 15
1 1 1 1 1 0 0 1 0 1 1 1 1 0 0 
1 1 2 4 12 36 36 72 36 180 72 540 72 1152 144 144 
expansions = 2504
**********
p = 2504
prePre = 1506.01
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.16 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.1 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.51 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 12
1 0 1 1 0 1 0 1 0 1 0 0 
1 1 2 4 8 16 48 144 432 1296 
expansions = 1952
**********
p = 1952
prePre = 1508.84
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1500.06
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.79 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.72 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 10
0 1 1 0 0 1 0 1 0 0 
1 1 2 2 4 8 24 48 144 432 
expansions = 666
**********
p = 666
prePre = 1494.85
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 0 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1486.47
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1478.42
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 1 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1470.97
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.06 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.08 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.17 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 324
324

PrintQueue
		 h = 7 g = 7 f = 14 w = 324


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 324
w = 324
	Child: h = 8 g = 8 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 324
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 972


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 972
w = 972
	Child: h = 7 g = 9 f = 16 w = 972
		New node added
		child_node.getWeight() = 972
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 972
	Child: h = 7 g = 9 f = 16 w = 972
	is duplicate: h = 7 g = 9 f = 16
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1944
1944

PrintQueue
		 h = 7 g = 9 f = 16 w = 1944


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1944
w = 1944
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 12
count2 = 10
print boolean: 
bount = 13
1 1 1 1 1 1 0 1 1 1 1 0 1 
1 1 2 4 12 36 108 324 972 1944 
expansions = 3404
**********
p = 3404
prePre = 1482.76
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.53 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
1 1 0 0 0 0 0 
1 1 2 4 12 24 48 48 96 96 
expansions = 332
**********
p = 332
prePre = 1475.78
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1467.27
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 1 0 0 0 0 1 1 
1 1 2 4 12 24 48 48 96 192 
expansions = 428
**********
p = 428
prePre = 1461.04
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1452.71
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1444.49
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1436.88
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.95 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.34 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.25
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.58 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.166667
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 11
print boolean: 
bount = 12
1 1 1 0 0 1 0 1 0 0 0 0 
1 1 2 4 12 24 72 72 72 432 432 
expansions = 1124
**********
p = 1124
prePre = 1435.05
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.33 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.29 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
0 0 1 1 0 1 1 1 
1 1 2 2 4 4 8 16 48 144 
expansions = 230
**********
p = 230
prePre = 1428.05
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
1 0 0 1 1 1 0 1 
1 1 2 4 8 8 16 32 96 192 
expansions = 360
**********
p = 360
prePre = 1421.87
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 0 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1414.75
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 1 0 0 0 
1 1 2 4 8 16 32 32 64 64 
expansions = 224
**********
p = 224
prePre = 1407.94
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1400.81
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.79 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 0 0 0 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1394.89
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1387.49
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1380.41
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 0 1 1 1 1 0 0 
1 1 2 2 4 8 16 32 96 288 
expansions = 450
**********
p = 450
prePre = 1375.24
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.8 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 0 0 1 0 0 1 1 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1376.24
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1369.02
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 384
384

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
1 0 1 0 1 1 0 0 1 
1 1 2 4 8 16 32 64 192 384 
expansions = 704
**********
p = 704
prePre = 1365.39
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 1 0 1 0 1 1 
1 1 2 2 4 8 16 32 64 128 
expansions = 258
**********
p = 258
prePre = 1359.37
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1352.36
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1345.42
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.54 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.97 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.74 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 0 1 1 0 1 0 0 
1 1 2 2 4 4 8 16 48 144 
expansions = 230
**********
p = 230
prePre = 1339.45
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 0 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1333.11
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.65 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.78 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 6 g = 8 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 216
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 5 g = 9 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 216

PrintQueue
		 h = 8 g = 8 f = 16 w = 432
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 216


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.46 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.87 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 1080


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 216
w = 216
	Child: h = 6 g = 10 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 216
	Child: h = 6 g = 10 f = 16 w = 216
	is duplicate: h = 6 g = 10 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 7 g = 9 f = 16 w = 1080
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1080
w = 1080
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 432
w = 432
	Child: h = 7 g = 11 f = 18 w = 432
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 5 g = 11 f = 16 w = 432


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 432
w = 432
	Child: h = 6 g = 12 f = 18 w = 432
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 432
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 9
count2 = 14
print boolean: 
bount = 13
1 1 1 0 1 0 1 1 0 0 1 0 1 
1 1 2 4 12 24 72 216 216 432 216 1080 432 432 
expansions = 3140
**********
p = 3140
prePre = 1342.67
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.76 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.44 prob = 0.25
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.33 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.64 prob = 0.166667
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 11
print boolean: 
bount = 13
1 1 1 0 0 1 0 0 0 0 0 0 1 
1 1 2 4 12 24 72 72 72 432 864 
expansions = 1556
**********
p = 1556
prePre = 1343.79
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.99 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.77 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 11
1 1 0 0 1 1 0 0 0 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1344.9
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1338.69
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.57 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.89 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 9
1 1 0 0 1 0 0 0 0 
1 1 2 4 12 24 72 144 288 288 
expansions = 836
**********
p = 836
prePre = 1336.08
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.61 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 10
1 0 1 1 0 0 1 1 0 1 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1334.56
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 0 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1328.49
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 8 g = 9 f = 17 w = 144
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 1 1 1 0 0 1 0 
1 1 2 2 4 8 24 48 144 144 
expansions = 378
**********
p = 378
prePre = 1323.64
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 128


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 128
w = 128
	Child: h = 7 g = 9 f = 16 w = 128
		New node added
		child_node.getWeight() = 128
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 1 0 1 0 0 
1 1 2 4 8 16 32 64 128 128 
expansions = 384
**********
p = 384
prePre = 1318.87
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.64 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.92 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 6 g = 10 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864
	Child: h = 5 g = 11 f = 16 w = 864
	is duplicate: h = 5 g = 11 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 11 f = 18 w = 864
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 1728


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 1728
w = 1728
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 12
print boolean: 
bount = 12
1 1 0 0 1 1 0 0 0 1 1 0 
1 1 2 4 12 24 72 144 432 864 864 1728 
expansions = 4148
**********
p = 4148
prePre = 1333.16
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.96 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 1 0 0 0 0 1 1 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1334.28
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 1 0 0 0 
1 1 2 4 8 16 32 32 64 64 
expansions = 224
**********
p = 224
prePre = 1328.73
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.51 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 6 g = 10 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 7 g = 11 f = 18 w = 864
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864

PrintQueue
		 h = 5 g = 11 f = 16 w = 864


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 864
w = 864
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 12
print boolean: 
bount = 11
1 0 1 1 1 0 1 0 1 1 0 
1 1 2 4 8 16 48 96 288 864 864 864 
expansions = 3056
**********
p = 3056
prePre = 1337.32
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.82 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 8 g = 9 f = 17 w = 144
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 0 1 1 0 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1333.29
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.44 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.44 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 8 g = 9 f = 17 w = 288
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.54 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.25 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 6 g = 10 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864
	Child: h = 5 g = 11 f = 16 w = 864
	is duplicate: h = 5 g = 11 f = 16
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1728
1728
	Child: h = 7 g = 11 f = 18 w = 864
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 1728


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 1728
w = 1728
	Child: h = 4 g = 12 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 1728
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 1728


End PrintQueue
13: Raiz: h = 4 g = 12 f = 16 w  = 1728
w = 1728
	Child: h = 5 g = 13 f = 18 w = 1728
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 1728
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 8
count2 = 13
print boolean: 
bount = 13
0 1 1 0 1 0 0 1 0 1 0 1 1 
1 1 2 2 4 8 24 72 288 864 864 1728 1728 
expansions = 5586
**********
p = 5586
prePre = 1354.24
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 0 0 0 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1349.33
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.33 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.2 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.91 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 288
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 288
w = 288
	Child: h = 8 g = 8 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.54 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.46 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 8 g = 8 f = 16 w = 1152


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.3 prob = 0.111111
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.62 prob = 0.1
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.0909091
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.0833333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 1728


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 1728
w = 1728
	Child: h = 7 g = 9 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 1728
	Child: h = 7 g = 9 f = 16 w = 1728
	is duplicate: h = 7 g = 9 f = 16
a = 0.5 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 1728
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 5184
5184

PrintQueue
		 h = 7 g = 9 f = 16 w = 5184


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 5184
w = 5184
	Child: h = 8 g = 10 f = 18 w = 5184
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 5184
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 5184
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 11
print boolean: 
bount = 19
1 1 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 
1 1 2 4 12 36 144 288 144 1728 5184 
expansions = 7544
**********
p = 7544
prePre = 1379.55
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.87 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 1 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1375.39
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.62 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.17 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 6 g = 8 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 6 g = 8 f = 14 w = 144
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.98 prob = 0.142857
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.125
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.7 prob = 0.111111
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.1
b = 1
		Added even though is duplicate.
		w = 720
720

PrintQueue
		 h = 6 g = 8 f = 14 w = 144
		 h = 8 g = 8 f = 16 w = 720


End PrintQueue
10: Raiz: h = 6 g = 8 f = 14 w  = 144
w = 144
	Child: h = 5 g = 9 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 144
	Child: h = 5 g = 9 f = 14 w = 144
	is duplicate: h = 5 g = 9 f = 14
a = 0.86 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 8 g = 8 f = 16 w = 720
		 h = 5 g = 9 f = 14 w = 288
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
11: Raiz: h = 8 g = 8 f = 16 w  = 720
w = 720
	Child: h = 8 g = 9 f = 17 w = 720
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 720
	is duplicate: h = 7 g = 9 f = 16
a = 0.95 prob = 0.833333
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 720
	is duplicate: h = 7 g = 9 f = 16
a = 0.64 prob = 0.454545
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 720
	is duplicate: h = 7 g = 9 f = 16
a = 0.32 prob = 0.3125
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 288
		 h = 7 g = 9 f = 16 w = 2304


End PrintQueue
12: Raiz: h = 5 g = 9 f = 14 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0.75 prob = 0.5
b = 0
		Not added.
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 2304
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
13: Raiz: h = 7 g = 9 f = 16 w  = 2304
w = 2304
	Child: h = 6 g = 10 f = 16 w = 2304
	is duplicate: h = 6 g = 10 f = 16
a = 0.37 prob = 0.727273
b = 1
		Added even though is duplicate.
		w = 3168
3168
	Child: h = 8 g = 10 f = 18 w = 2304
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2304
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2304
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 3168


End PrintQueue
14: Raiz: h = 6 g = 10 f = 16 w  = 3168
w = 3168
	Child: h = 5 g = 11 f = 16 w = 3168
		New node added
		child_node.getWeight() = 3168
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 3168
	Child: h = 5 g = 11 f = 16 w = 3168
	is duplicate: h = 5 g = 11 f = 16
a = 0.93 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 11 f = 18 w = 3168
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 6336


End PrintQueue
15: Raiz: h = 5 g = 11 f = 16 w  = 6336
w = 6336
	Child: h = 6 g = 12 f = 18 w = 6336
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 6336
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 6336
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 15
print boolean: 
bount = 22
1 1 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 
1 1 2 4 12 24 72 144 72 144 720 288 2304 3168 6336 
expansions = 13292
**********
p = 13292
prePre = 1432.96
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.56 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.89 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.96 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 11
1 1 1 0 0 0 0 1 1 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1433.55
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.56 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.56 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 10
1 1 1 0 1 0 0 0 1 1 
1 1 2 4 12 24 72 144 288 576 
expansions = 1124
**********
p = 1124
prePre = 1432.07
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1425.54
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 1 0 1 0 1 0 
1 1 2 2 4 8 16 32 64 128 
expansions = 258
**********
p = 258
prePre = 1420.01
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 1 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1414
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1407.65
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.29 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 6 g = 8 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 144
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.9 prob = 0.666667
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.18 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 360
360

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 360


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 360
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 360
w = 360
	Child: h = 6 g = 10 f = 16 w = 360
	is duplicate: h = 6 g = 10 f = 16
a = 0.76 prob = 0.714286
b = 0
		Not added.
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 504


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 504
w = 504
	Child: h = 5 g = 11 f = 16 w = 504
		New node added
		child_node.getWeight() = 504
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 504

PrintQueue
		 h = 5 g = 11 f = 16 w = 504


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 504
w = 504
	Child: h = 6 g = 12 f = 18 w = 504
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 504
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 6
count2 = 14
print boolean: 
bount = 12
0 1 1 0 1 1 0 0 0 1 0 0 
1 1 2 2 4 8 24 72 72 144 72 360 504 504 
expansions = 1770
**********
p = 1770
prePre = 1409.35
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 1 0 0 0 
1 1 2 4 8 16 32 32 64 64 
expansions = 224
**********
p = 224
prePre = 1403.83
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.55 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.97 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.94 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
0 1 1 0 0 1 1 1 0 0 
1 1 2 2 4 8 24 48 144 432 
expansions = 666
**********
p = 666
prePre = 1400.42
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 0 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1394.64
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.04 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.04 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 10
count2 = 10
print boolean: 
bount = 11
1 0 1 1 1 0 1 1 1 1 1 
1 1 2 4 8 16 48 96 288 864 
expansions = 1328
**********
p = 1328
prePre = 1394.33
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.51 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.79 prob = 0.666667
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.37 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 180
180

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 180


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 180
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 180
w = 180
	Child: h = 6 g = 8 f = 14 w = 180
	is duplicate: h = 6 g = 8 f = 14
a = 0.71 prob = 0.714286
b = 1
		Added even though is duplicate.
		w = 252
252
	Child: h = 8 g = 8 f = 16 w = 180
		New node added
		child_node.getWeight() = 180
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 180
	Child: h = 8 g = 8 f = 16 w = 180
	is duplicate: h = 8 g = 8 f = 16
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 252
		 h = 8 g = 8 f = 16 w = 360


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 252
w = 252
	Child: h = 7 g = 9 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 252
	Child: h = 5 g = 9 f = 14 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 252

PrintQueue
		 h = 8 g = 8 f = 16 w = 360
		 h = 5 g = 9 f = 14 w = 252
		 h = 7 g = 9 f = 16 w = 252


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 360
w = 360
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.78 prob = 0.588235
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.67 prob = 0.37037
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 252
		 h = 7 g = 9 f = 16 w = 972


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 252
w = 252
	Child: h = 6 g = 10 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 252
	Child: h = 6 g = 10 f = 16 w = 252
	is duplicate: h = 6 g = 10 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 504
504

PrintQueue
		 h = 7 g = 9 f = 16 w = 972
		 h = 6 g = 10 f = 16 w = 504


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 972
w = 972
	Child: h = 6 g = 10 f = 16 w = 972
	is duplicate: h = 6 g = 10 f = 16
a = 0.95 prob = 0.658537
b = 0
		Not added.
	Child: h = 8 g = 10 f = 18 w = 972
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 972
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1476


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 1476
w = 1476
	Child: h = 7 g = 11 f = 18 w = 1476
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1476
		New node added
		child_node.getWeight() = 1476
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1476

PrintQueue
		 h = 5 g = 11 f = 16 w = 1476


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 1476
w = 1476
	Child: h = 6 g = 12 f = 18 w = 1476
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1476
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 9
count2 = 16
print boolean: 
bount = 16
1 1 1 1 1 0 0 0 1 0 1 0 0 0 1 0 
1 1 2 4 12 36 36 72 36 180 252 360 252 972 1476 1476 
expansions = 5168
**********
p = 5168
prePre = 1411.56
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1405.69
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.86 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.13 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.57 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.76 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.92 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.85 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.11 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 7 g = 7 f = 14 w = 432


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 432
w = 432
	Child: h = 8 g = 8 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 432
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 1296
1296

PrintQueue
		 h = 8 g = 8 f = 16 w = 1296


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 1296
w = 1296
	Child: h = 7 g = 9 f = 16 w = 1296
		New node added
		child_node.getWeight() = 1296
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 1296
	Child: h = 7 g = 9 f = 16 w = 1296
	is duplicate: h = 7 g = 9 f = 16
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2592
2592
	Child: h = 7 g = 9 f = 16 w = 1296
	is duplicate: h = 7 g = 9 f = 16
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 3888


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 3888
w = 3888
	Child: h = 6 g = 10 f = 16 w = 3888
		New node added
		child_node.getWeight() = 3888
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 3888
	Child: h = 8 g = 10 f = 18 w = 3888
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3888
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 3888


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 3888
w = 3888
	Child: h = 7 g = 11 f = 18 w = 3888
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 3888
		New node added
		child_node.getWeight() = 3888
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 3888

PrintQueue
		 h = 5 g = 11 f = 16 w = 3888


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 3888
w = 3888
	Child: h = 6 g = 12 f = 18 w = 3888
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 3888
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 12
print boolean: 
bount = 15
1 1 0 1 0 0 0 0 0 0 1 0 1 1 0 
1 1 2 4 12 36 144 432 1296 3888 3888 3888 
expansions = 13592
**********
p = 13592
prePre = 1460.83
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.62 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.2 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.59 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.14 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.84 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 432
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 432
w = 432
	Child: h = 8 g = 8 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 432
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.54 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 8 g = 8 f = 16 w = 1728


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.0769231
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.21 prob = 0.0714286
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.0666667
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.0625
b = 1
		Added even though is duplicate.
		w = 2304
2304
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.0588235
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 2448


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 2448
w = 2448
	Child: h = 8 g = 9 f = 17 w = 2448
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 2448
		New node added
		child_node.getWeight() = 2448
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 2448
	Child: h = 7 g = 9 f = 16 w = 2448
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4896
4896
	Child: h = 7 g = 9 f = 16 w = 2448
	is duplicate: h = 7 g = 9 f = 16
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 7344
7344

PrintQueue
		 h = 7 g = 9 f = 16 w = 7344


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 7344
w = 7344
	Child: h = 8 g = 10 f = 18 w = 7344
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 7344
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 7344
		New node added
		child_node.getWeight() = 7344
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 7344
	Child: h = 8 g = 10 f = 18 w = 7344
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 7344


End PrintQueue
12: Raiz: h = 6 g = 10 f = 16 w  = 7344
w = 7344
	Child: h = 6 g = 11 f = 17 w = 7344
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 7344
		New node added
		child_node.getWeight() = 7344
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 7344
	Child: h = 7 g = 11 f = 18 w = 7344
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 7344


End PrintQueue
13: Raiz: h = 5 g = 11 f = 16 w  = 7344
w = 7344
	Child: h = 6 g = 12 f = 18 w = 7344
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 7344
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 7344
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 10
count2 = 13
print boolean: 
bount = 21
1 1 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 1 0 1 1 
1 1 2 4 12 36 144 432 144 2448 7344 7344 7344 
expansions = 25256
**********
p = 25256
prePre = 1568.02
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.01 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.08 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.48 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 9
count2 = 10
print boolean: 
bount = 12
1 0 1 1 1 1 0 1 1 1 0 0 
1 1 2 4 8 16 48 144 432 1296 
expansions = 1952
**********
p = 1952
prePre = 1569.74
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.12 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.64 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.25 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.84 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.3 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 648
648

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.36 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1944


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1944
w = 1944
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 9
count2 = 10
print boolean: 
bount = 13
1 1 1 1 0 1 0 0 1 1 1 0 0 
1 1 2 4 12 36 108 216 648 1944 
expansions = 2972
**********
p = 2972
prePre = 1576
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.96 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.51 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.98 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 0 0 1 1 0 0 1 1 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1575.91
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.53 prob = 0.25
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.96 prob = 0.166667
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 11
print boolean: 
bount = 12
1 1 1 0 0 1 0 1 0 0 0 0 
1 1 2 4 12 24 72 72 72 432 432 
expansions = 1124
**********
p = 1124
prePre = 1573.91
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.69 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 0 0 1 1 1 0 0 
1 1 2 4 8 8 16 32 96 192 
expansions = 360
**********
p = 360
prePre = 1568.56
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1562.54
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.45 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.37 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 1 0 0 0 1 1 0 0 1 
1 1 2 4 12 24 48 96 288 576 
expansions = 1052
**********
p = 1052
prePre = 1560.31
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.62 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 8 g = 9 f = 17 w = 288
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.56 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.62 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 12
0 1 1 1 1 0 0 0 1 1 0 0 
1 1 2 2 4 8 24 72 288 864 
expansions = 1266
**********
p = 1266
prePre = 1559.03
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 1 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1552.91
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 0 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1547
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 0 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1541.49
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1535.17
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.95 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.7 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 8 g = 9 f = 17 w = 288
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 576
		New node added
		child_node.getWeight() = 576
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 576


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 576
w = 576
	Child: h = 6 g = 11 f = 17 w = 576
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 7 g = 11 f = 18 w = 576
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
count1 = 7
count2 = 11
print boolean: 
bount = 11
0 1 1 0 1 0 0 1 1 0 1 
1 1 2 2 4 8 24 72 288 576 576 
expansions = 1554
**********
p = 1554
prePre = 1535.25
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1529.08
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 0 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1523.74
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.93 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.33 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.68 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.91 prob = 0.666667
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.1 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 180
180

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 180


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 180
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 180
w = 180
	Child: h = 6 g = 8 f = 14 w = 180
	is duplicate: h = 6 g = 8 f = 14
a = 0.36 prob = 0.714286
b = 1
		Added even though is duplicate.
		w = 252
252
	Child: h = 8 g = 8 f = 16 w = 180
		New node added
		child_node.getWeight() = 180
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 180
	Child: h = 8 g = 8 f = 16 w = 180
	is duplicate: h = 8 g = 8 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 360
360

PrintQueue
		 h = 6 g = 8 f = 14 w = 252
		 h = 8 g = 8 f = 16 w = 360


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 252
w = 252
	Child: h = 7 g = 9 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 252
	Child: h = 5 g = 9 f = 14 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 252

PrintQueue
		 h = 8 g = 8 f = 16 w = 360
		 h = 5 g = 9 f = 14 w = 252
		 h = 7 g = 9 f = 16 w = 252


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 360
w = 360
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.28 prob = 0.588235
b = 1
		Added even though is duplicate.
		w = 612
612
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.2 prob = 0.37037
b = 1
		Added even though is duplicate.
		w = 972
972
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.21 prob = 0.27027
b = 1
		Added even though is duplicate.
		w = 1332
1332

PrintQueue
		 h = 5 g = 9 f = 14 w = 252
		 h = 7 g = 9 f = 16 w = 1332


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 252
w = 252
	Child: h = 6 g = 10 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 252
	Child: h = 6 g = 10 f = 16 w = 252
	is duplicate: h = 6 g = 10 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1332
		 h = 6 g = 10 f = 16 w = 504


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1332
w = 1332
	Child: h = 8 g = 10 f = 18 w = 1332
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1332
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1332
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 504


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 504
w = 504
	Child: h = 5 g = 11 f = 16 w = 504
		New node added
		child_node.getWeight() = 504
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 504

PrintQueue
		 h = 5 g = 11 f = 16 w = 504


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 504
w = 504
	Child: h = 6 g = 12 f = 18 w = 504
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 504
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 11
count2 = 16
print boolean: 
bount = 16
1 1 0 1 1 0 0 0 1 0 1 1 1 1 1 0 
1 1 2 4 12 36 36 72 36 180 252 360 252 1332 504 504 
expansions = 3584
**********
p = 3584
prePre = 1532.39
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1526.46
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.82 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.5 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.09 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 180
180
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.64 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 252


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 252
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 252
w = 252
	Child: h = 6 g = 8 f = 14 w = 252
	is duplicate: h = 6 g = 8 f = 14
a = 0.43 prob = 0.777778
b = 1
		Added even though is duplicate.
		w = 324
324
	Child: h = 8 g = 8 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 252
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 504
504

PrintQueue
		 h = 6 g = 8 f = 14 w = 324
		 h = 8 g = 8 f = 16 w = 504


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 324
w = 324
	Child: h = 7 g = 9 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 324
	Child: h = 5 g = 9 f = 14 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 324

PrintQueue
		 h = 8 g = 8 f = 16 w = 504
		 h = 5 g = 9 f = 14 w = 324
		 h = 7 g = 9 f = 16 w = 324


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 504
w = 504
	Child: h = 7 g = 9 f = 16 w = 504
	is duplicate: h = 7 g = 9 f = 16
a = 0.41 prob = 0.608696
b = 1
		Added even though is duplicate.
		w = 828
828
	Child: h = 7 g = 9 f = 16 w = 504
	is duplicate: h = 7 g = 9 f = 16
a = 0.58 prob = 0.378378
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 504
	is duplicate: h = 7 g = 9 f = 16
a = 0.93 prob = 0.27451
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 324
		 h = 7 g = 9 f = 16 w = 1836


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 324
w = 324
	Child: h = 6 g = 10 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 324
	Child: h = 6 g = 10 f = 16 w = 324
	is duplicate: h = 6 g = 10 f = 16
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 648
648

PrintQueue
		 h = 7 g = 9 f = 16 w = 1836
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1836
w = 1836
	Child: h = 8 g = 10 f = 18 w = 1836
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1836
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1836
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1836
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 648
w = 648
	Child: h = 7 g = 11 f = 18 w = 648
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 648

PrintQueue
		 h = 5 g = 11 f = 16 w = 648


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 648
w = 648
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 12
count2 = 16
print boolean: 
bount = 17
1 1 0 1 1 0 1 1 1 0 0 1 1 1 0 0 1 
1 1 2 4 12 36 36 72 36 252 324 504 324 1836 648 648 
expansions = 4736
**********
p = 4736
prePre = 1539.83
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1533.94
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.64 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.28 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1296
1296

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 12
1 1 0 0 1 0 1 0 1 0 0 1 
1 1 2 4 12 24 72 216 648 1296 
expansions = 2276
**********
p = 2276
prePre = 1537.01
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.91 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.01 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.39 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 6 g = 10 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 432
w = 432
	Child: h = 7 g = 11 f = 18 w = 432
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 5 g = 11 f = 16 w = 432


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 432
w = 432
	Child: h = 6 g = 12 f = 18 w = 432
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 432
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 12
print boolean: 
bount = 10
0 1 1 1 0 1 1 1 1 0 
1 1 2 2 4 8 24 48 144 432 432 432 
expansions = 1530
**********
p = 1530
prePre = 1536.98
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 6 g = 10 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 6
count2 = 12
print boolean: 
bount = 8
0 0 1 1 1 1 1 0 
1 1 2 2 4 4 8 16 48 144 144 144 
expansions = 518
**********
p = 518
prePre = 1532.8
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.82 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 10
1 0 1 1 1 0 0 0 0 0 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1530.79
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1525.03
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 1 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1519.45
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1513.78
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1508.18
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1502.56
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.67 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 0 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1497.98
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 0 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1492.64
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.84 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.16 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 324


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 324
w = 324
	Child: h = 8 g = 8 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 324
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.62 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 1296


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 1296
w = 1296
	Child: h = 7 g = 9 f = 16 w = 1296
		New node added
		child_node.getWeight() = 1296
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 1296
	Child: h = 7 g = 9 f = 16 w = 1296
	is duplicate: h = 7 g = 9 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2592
2592
	Child: h = 7 g = 9 f = 16 w = 1296
	is duplicate: h = 7 g = 9 f = 16
a = 0.2 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 3888
3888

PrintQueue
		 h = 7 g = 9 f = 16 w = 3888


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 3888
w = 3888
	Child: h = 8 g = 10 f = 18 w = 3888
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3888
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3888
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 10
count2 = 10
print boolean: 
bount = 15
1 1 0 1 1 1 1 1 0 0 0 0 0 1 1 
1 1 2 4 12 36 108 324 1296 3888 
expansions = 5672
**********
p = 5672
prePre = 1509.16
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
1 0 0 1 1 0 1 0 0 
1 1 2 4 8 8 16 32 96 288 
expansions = 456
**********
p = 456
prePre = 1505.02
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.55 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 1 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1501.16
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.81 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.6 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.166667
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 11
print boolean: 
bount = 12
1 1 1 0 0 1 0 1 0 1 0 0 
1 1 2 4 12 24 72 72 72 432 432 
expansions = 1124
**********
p = 1124
prePre = 1499.69
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1494.09
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.36 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 0 0 1 1 0 0 1 1 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1494.33
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.72 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.97 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 1 0 0 0 0 1 1 
1 1 2 4 12 24 48 48 96 192 
expansions = 428
**********
p = 428
prePre = 1490.22
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1484.78
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1479.86
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.67 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.42 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.82 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 1 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1476.21
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 1 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1471.1
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.55 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.59 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 1 0 0 0 1 0 
1 1 2 2 4 8 24 48 96 192 
expansions = 378
**********
p = 378
prePre = 1466.96
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1461.66
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1456.46
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.71 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 1 0 0 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1452.33
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.46 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.27 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.62 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 7 g = 7 f = 14 w = 432
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 432
w = 432
	Child: h = 6 g = 8 f = 14 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 432
	Child: h = 8 g = 8 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 432
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 1296
1296

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 6 g = 8 f = 14 w = 432
		 h = 8 g = 8 f = 16 w = 1296


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.04 prob = 0.1
b = 1
		Added even though is duplicate.
		w = 1440
1440
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.33 prob = 0.0909091
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.62 prob = 0.0833333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.0769231
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.35 prob = 0.0714286
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 432
		 h = 8 g = 8 f = 16 w = 2016


End PrintQueue
10: Raiz: h = 6 g = 8 f = 14 w  = 432
w = 432
	Child: h = 5 g = 9 f = 14 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 432
	Child: h = 5 g = 9 f = 14 w = 432
	is duplicate: h = 5 g = 9 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 8 g = 8 f = 16 w = 2016
		 h = 5 g = 9 f = 14 w = 864
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
11: Raiz: h = 8 g = 8 f = 16 w  = 2016
w = 2016
	Child: h = 8 g = 9 f = 17 w = 2016
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 2016
	is duplicate: h = 7 g = 9 f = 16
a = 0.22 prob = 0.823529
b = 1
		Added even though is duplicate.
		w = 2448
2448
	Child: h = 7 g = 9 f = 16 w = 2016
	is duplicate: h = 7 g = 9 f = 16
a = 0.38 prob = 0.451613
b = 1
		Added even though is duplicate.
		w = 4464
4464
	Child: h = 7 g = 9 f = 16 w = 2016
	is duplicate: h = 7 g = 9 f = 16
a = 0.26 prob = 0.311111
b = 1
		Added even though is duplicate.
		w = 6480
6480

PrintQueue
		 h = 5 g = 9 f = 14 w = 864
		 h = 7 g = 9 f = 16 w = 6480


End PrintQueue
12: Raiz: h = 5 g = 9 f = 14 w  = 864
w = 864
	Child: h = 4 g = 10 f = 14 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 4 g = 10 f = 14 threshold: 16 w = 864
	Child: h = 6 g = 10 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 864
	Child: h = 6 g = 10 f = 16 w = 864
	is duplicate: h = 6 g = 10 f = 16
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 6480
		 h = 4 g = 10 f = 14 w = 864
		 h = 6 g = 10 f = 16 w = 1728


End PrintQueue
13: Raiz: h = 7 g = 9 f = 16 w  = 6480
w = 6480
	Child: h = 6 g = 10 f = 16 w = 6480
	is duplicate: h = 6 g = 10 f = 16
a = 0.74 prob = 0.789474
b = 1
		Added even though is duplicate.
		w = 8208
8208
	Child: h = 8 g = 10 f = 18 w = 6480
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 6480
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 6480
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 10 f = 14 w = 864
		 h = 6 g = 10 f = 16 w = 8208


End PrintQueue
14: Raiz: h = 4 g = 10 f = 14 w  = 864
w = 864
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864
	Child: h = 5 g = 11 f = 16 w = 864
	is duplicate: h = 5 g = 11 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1728
1728

PrintQueue
		 h = 6 g = 10 f = 16 w = 8208
		 h = 5 g = 11 f = 16 w = 1728


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 8208
w = 8208
	Child: h = 5 g = 11 f = 16 w = 8208
	is duplicate: h = 5 g = 11 f = 16
a = 0.81 prob = 0.826087
b = 1
		Added even though is duplicate.
		w = 9936
9936
	Child: h = 5 g = 11 f = 16 w = 8208
	is duplicate: h = 5 g = 11 f = 16
a = 0.14 prob = 0.452381
b = 1
		Added even though is duplicate.
		w = 18144
18144
	Child: h = 7 g = 11 f = 18 w = 8208
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 18144


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 18144
w = 18144
	Child: h = 4 g = 12 f = 16 w = 18144
		New node added
		child_node.getWeight() = 18144
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 18144
	Child: h = 6 g = 12 f = 18 w = 18144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 18144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 18144


End PrintQueue
17: Raiz: h = 4 g = 12 f = 16 w  = 18144
w = 18144
	Child: h = 5 g = 13 f = 18 w = 18144
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 18144
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 19
count2 = 17
print boolean: 
bount = 27
1 1 1 1 0 0 1 1 1 0 1 0 1 1 0 0 0 0 1 1 1 1 0 1 1 1 1 
1 1 2 4 12 36 144 432 144 432 2016 864 6480 864 8208 18144 18144 
expansions = 55928
**********
p = 55928
prePre = 1655.6
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.64 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 384
384

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
1 0 1 1 0 0 0 1 1 
1 1 2 4 8 16 48 96 192 384 
expansions = 752
**********
p = 752
prePre = 1652.24
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 1 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1646.66
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1641.14
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 1 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1636.08
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.02 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.89 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 6 g = 8 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 144
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.46 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.21 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 360
360
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.44 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 504


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 504
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 504
w = 504
	Child: h = 6 g = 10 f = 16 w = 504
	is duplicate: h = 6 g = 10 f = 16
a = 0.59 prob = 0.777778
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 648
w = 648
	Child: h = 7 g = 11 f = 18 w = 648
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 648

PrintQueue
		 h = 5 g = 11 f = 16 w = 648


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 648
w = 648
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 9
count2 = 14
print boolean: 
bount = 13
0 1 1 0 1 1 0 1 1 1 0 0 1 
1 1 2 2 4 8 24 72 72 144 72 504 648 648 
expansions = 2202
**********
p = 2202
prePre = 1638.15
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 0 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1632.73
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.1 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.75 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 324


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 324
w = 324
	Child: h = 6 g = 8 f = 14 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 324
	Child: h = 8 g = 8 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 324
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 324
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 324
w = 324
	Child: h = 7 g = 9 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 324
	Child: h = 5 g = 9 f = 14 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 324

PrintQueue
		 h = 8 g = 8 f = 16 w = 648
		 h = 5 g = 9 f = 14 w = 324
		 h = 7 g = 9 f = 16 w = 324


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.89 prob = 0.666667
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.5 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 324
		 h = 7 g = 9 f = 16 w = 1620


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 324
w = 324
	Child: h = 6 g = 10 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 324
	Child: h = 6 g = 10 f = 16 w = 324
	is duplicate: h = 6 g = 10 f = 16
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1620
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1620
w = 1620
	Child: h = 6 g = 10 f = 16 w = 1620
	is duplicate: h = 6 g = 10 f = 16
a = 0.49 prob = 0.714286
b = 1
		Added even though is duplicate.
		w = 2268
2268
	Child: h = 8 g = 10 f = 18 w = 1620
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1620
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 2268


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 2268
w = 2268
	Child: h = 7 g = 11 f = 18 w = 2268
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 2268
		New node added
		child_node.getWeight() = 2268
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 2268

PrintQueue
		 h = 5 g = 11 f = 16 w = 2268


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 2268
w = 2268
	Child: h = 6 g = 12 f = 18 w = 2268
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 2268
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 10
count2 = 14
print boolean: 
bount = 15
1 1 1 1 0 1 1 1 1 0 0 0 0 0 1 
1 1 2 4 12 36 108 324 324 648 324 1620 2268 2268 
expansions = 7940
**********
p = 7940
prePre = 1655.67
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1650.1
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1644.69
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.56 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 10
0 1 1 0 0 1 0 1 1 1 
1 1 2 2 4 8 24 48 144 432 
expansions = 666
**********
p = 666
prePre = 1641.17
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.97 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.45 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.34 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 1 0 0 1 1 0 0 1 0 
1 1 2 4 12 24 72 144 432 432 
expansions = 1124
**********
p = 1124
prePre = 1639.32
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.16 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.62 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.55 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.39 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.96 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.07 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 7 g = 7 f = 14 w = 432


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 432
w = 432
	Child: h = 8 g = 8 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 432
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 1296


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 1296
w = 1296
	Child: h = 7 g = 9 f = 16 w = 1296
		New node added
		child_node.getWeight() = 1296
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 1296
	Child: h = 7 g = 9 f = 16 w = 1296
	is duplicate: h = 7 g = 9 f = 16
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 2592


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 2592
w = 2592
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 14
1 1 0 1 0 0 0 0 0 0 1 1 0 0 
1 1 2 4 12 36 144 432 1296 2592 
expansions = 4520
**********
p = 4520
prePre = 1649.61
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1643.96
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1638.53
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.5 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 0 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1633.39
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.2 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 9
count2 = 10
print boolean: 
bount = 11
1 0 1 1 1 1 1 1 0 0 1 
1 1 2 4 8 16 48 144 432 864 
expansions = 1520
**********
p = 1520
prePre = 1632.99
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1627.47
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1622.14
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 1 0 1 0 1 0 
1 1 2 2 4 8 16 32 64 128 
expansions = 258
**********
p = 258
prePre = 1617.39
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.06 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.74 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.11 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.53 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 180


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 180
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 180
w = 180
	Child: h = 8 g = 8 f = 16 w = 180
		New node added
		child_node.getWeight() = 180
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 180
	Child: h = 8 g = 8 f = 16 w = 180
	is duplicate: h = 8 g = 8 f = 16
a = 0.56 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 180
	is duplicate: h = 8 g = 8 f = 16
a = 0.56 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 540


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 540
		 h = 5 g = 9 f = 14 w = 72


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 540
w = 540
	Child: h = 7 g = 9 f = 16 w = 540
		New node added
		child_node.getWeight() = 540
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 540
	Child: h = 7 g = 9 f = 16 w = 540
	is duplicate: h = 7 g = 9 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 1080


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1080
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1080
w = 1080
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 16
print boolean: 
bount = 14
1 1 1 1 1 0 0 1 0 0 0 0 0 0 
1 1 2 4 12 36 36 72 36 180 72 540 72 1080 144 144 
expansions = 2432
**********
p = 2432
prePre = 1620.22
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 1 0 0 0 
1 1 2 4 8 16 32 32 64 64 
expansions = 224
**********
p = 224
prePre = 1615.38
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.69 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.39 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 10
1 1 0 0 1 0 0 0 1 0 
1 1 2 4 12 24 72 144 288 576 
expansions = 1124
**********
p = 1124
prePre = 1613.69
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.07 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 7 g = 9 f = 16 w = 216
	is duplicate: h = 7 g = 9 f = 16
a = 0.79 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 216
	is duplicate: h = 7 g = 9 f = 16
a = 0.04 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 648
648

PrintQueue
		 h = 7 g = 9 f = 16 w = 648


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 648
w = 648
	Child: h = 8 g = 10 f = 18 w = 648
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 648
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 648
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 10
count2 = 10
print boolean: 
bount = 11
0 1 1 1 1 1 1 1 1 0 1 
1 1 2 2 4 8 24 72 216 648 
expansions = 978
**********
p = 978
prePre = 1611.51
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1606.4
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 1 0 0 0 
1 1 2 4 8 16 32 32 64 64 
expansions = 224
**********
p = 224
prePre = 1601.68
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
0 1 1 0 0 0 0 
1 1 2 2 4 8 24 48 96 96 
expansions = 282
**********
p = 282
prePre = 1597.19
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.6 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.42 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 8 g = 9 f = 17 w = 144
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 1 1 1 0 0 1 0 
1 1 2 2 4 8 24 48 144 144 
expansions = 378
**********
p = 378
prePre = 1593.06
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1587.89
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 128


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 128
w = 128
	Child: h = 7 g = 9 f = 16 w = 128
		New node added
		child_node.getWeight() = 128
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 1 0 1 0 0 
1 1 2 4 8 16 32 64 128 128 
expansions = 384
**********
p = 384
prePre = 1583.83
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.28 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 9
1 0 0 1 1 0 1 1 1 
1 1 2 4 8 8 16 32 96 288 
expansions = 456
**********
p = 456
prePre = 1580.05
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.06 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.07 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.97 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.04 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 7 g = 9 f = 16 w = 216
	is duplicate: h = 7 g = 9 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 7 g = 9 f = 16 w = 216
	is duplicate: h = 7 g = 9 f = 16
a = 0.94 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 648


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 648
w = 648
	Child: h = 6 g = 10 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 648
	Child: h = 8 g = 10 f = 18 w = 648
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 648
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 648
w = 648
	Child: h = 7 g = 11 f = 18 w = 648
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 648

PrintQueue
		 h = 5 g = 11 f = 16 w = 648


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 648
w = 648
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 12
print boolean: 
bount = 11
0 1 1 0 1 1 1 0 1 1 0 
1 1 2 2 4 8 24 72 216 648 648 648 
expansions = 2274
**********
p = 2274
prePre = 1582.37
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.39 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 10
1 0 1 1 1 0 1 1 0 0 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1580.56
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.93 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.86 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 1 0 0 0 0 1 0 
1 1 2 4 12 24 48 48 96 192 
expansions = 428
**********
p = 428
prePre = 1576.73
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.57 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.3 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.19 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 648
648

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.97 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.41 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1944


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1944
w = 1944
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 10
count2 = 10
print boolean: 
bount = 13
1 1 1 0 1 1 1 0 1 1 1 0 0 
1 1 2 4 12 24 72 216 648 1944 
expansions = 2924
**********
p = 2924
prePre = 1581.19
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 1 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1576.42
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1571.43
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.62 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 0 0 0 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1567.44
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.11 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.71 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.35 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
1 0 0 1 1 0 1 0 0 
1 1 2 4 8 8 16 32 96 288 
expansions = 456
**********
p = 456
prePre = 1563.81
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.56 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.72 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 0 0 0 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1559.87
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.77 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.81 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
0 1 1 0 0 0 0 
1 1 2 2 4 8 24 48 96 96 
expansions = 282
**********
p = 282
prePre = 1555.72
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1550.89
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.07 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.48 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 576


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 576
w = 576
	Child: h = 8 g = 9 f = 17 w = 576
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 576
		New node added
		child_node.getWeight() = 576
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 576
	Child: h = 7 g = 9 f = 16 w = 576
	is duplicate: h = 7 g = 9 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1152


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1152
w = 1152
	Child: h = 8 g = 10 f = 18 w = 1152
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1152
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1152
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1152
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 12
1 0 1 1 0 1 0 0 1 0 0 0 
1 1 2 4 8 16 48 144 576 1152 
expansions = 1952
**********
p = 1952
prePre = 1552.18
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1547.83
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 0 0 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1544.54
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.93 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.68 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
0 1 1 0 0 1 1 1 0 0 
1 1 2 2 4 8 24 48 144 432 
expansions = 666
**********
p = 666
prePre = 1541.74
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 128


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 128
w = 128
	Child: h = 7 g = 9 f = 16 w = 128
		New node added
		child_node.getWeight() = 128
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 1 0 1 0 0 
1 1 2 4 8 16 32 64 128 128 
expansions = 384
**********
p = 384
prePre = 1538.05
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1533.42
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1528.81
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.32 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.96 prob = 0.666667
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.07 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 180
180
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.2 prob = 0.285714
b = 1
		Added even though is duplicate.
		w = 252
252

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 252


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 252
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 252
w = 252
	Child: h = 8 g = 8 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 252
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 504
504
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.62 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 756


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 756
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 756
w = 756
	Child: h = 7 g = 9 f = 16 w = 756
	is duplicate: h = 7 g = 9 f = 16
a = 0 prob = 0.913043
b = 1
		Added even though is duplicate.
		w = 828
828
	Child: h = 7 g = 9 f = 16 w = 756
	is duplicate: h = 7 g = 9 f = 16
a = 0.61 prob = 0.477273
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 1584


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 1584
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1584
w = 1584
	Child: h = 8 g = 10 f = 18 w = 1584
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1584
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1584
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 12
count2 = 16
print boolean: 
bount = 16
1 1 0 1 1 0 1 0 1 1 1 1 0 1 0 1 
1 1 2 4 12 36 36 72 36 252 72 756 72 1584 144 144 
expansions = 3224
**********
p = 3224
prePre = 1534.16
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.96 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.55 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 0 0 0 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1530.97
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.5 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.11 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 384
384
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.29 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 10
1 0 1 0 1 1 0 1 1 1 
1 1 2 4 8 16 32 64 192 576 
expansions = 896
**********
p = 896
prePre = 1528.98
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1524.4
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.51 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.76 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 1 1 0 1 0 0 0 1 0 
1 1 2 4 12 24 72 144 288 576 
expansions = 1124
**********
p = 1124
prePre = 1523.15
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1518.61
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1514.48
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.59 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.94 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 1 0 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1511.41
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1507.38
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1503.1
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1498.86
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.14 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 6 g = 8 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 144
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.49 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.14 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 360
360

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 360


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 360
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 360
w = 360
	Child: h = 6 g = 10 f = 16 w = 360
	is duplicate: h = 6 g = 10 f = 16
a = 0.31 prob = 0.714286
b = 1
		Added even though is duplicate.
		w = 504
504
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 504


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 504
w = 504
	Child: h = 7 g = 11 f = 18 w = 504
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 504
		New node added
		child_node.getWeight() = 504
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 504

PrintQueue
		 h = 5 g = 11 f = 16 w = 504


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 504
w = 504
	Child: h = 6 g = 12 f = 18 w = 504
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 504
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 9
count2 = 14
print boolean: 
bount = 12
0 1 1 0 1 1 0 0 1 1 1 1 
1 1 2 2 4 8 24 72 72 144 72 360 504 504 
expansions = 1770
**********
p = 1770
prePre = 1499.68
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.2 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.89 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.5 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.81 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 180


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 180
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 180
w = 180
	Child: h = 8 g = 8 f = 16 w = 180
		New node added
		child_node.getWeight() = 180
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 180
	Child: h = 8 g = 8 f = 16 w = 180
	is duplicate: h = 8 g = 8 f = 16
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 360
360
	Child: h = 8 g = 8 f = 16 w = 180
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 540


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 540
		 h = 5 g = 9 f = 14 w = 72


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 540
w = 540
	Child: h = 8 g = 9 f = 17 w = 540
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 540
		New node added
		child_node.getWeight() = 540
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 540

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 540


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 540
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 540
w = 540
	Child: h = 8 g = 10 f = 18 w = 540
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 540
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 540
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 16
print boolean: 
bount = 13
1 1 1 1 1 0 0 1 0 0 1 0 0 
1 1 2 4 12 36 36 72 36 180 72 540 72 540 144 144 
expansions = 1892
**********
p = 1892
prePre = 1500.88
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1496.52
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 1 0 0 0 
1 1 2 4 8 16 32 32 64 64 
expansions = 224
**********
p = 224
prePre = 1492.67
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.4 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.8 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 0 1 1 1 0 1 0 0 0 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1491.31
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 0 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1487.62
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.89 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.98 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 10
1 0 1 1 1 0 1 0 0 1 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1486.28
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.8 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 6 g = 10 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 6
count2 = 12
print boolean: 
bount = 8
0 0 1 1 1 1 1 0 
1 1 2 2 4 4 8 16 48 144 144 144 
expansions = 518
**********
p = 518
prePre = 1483.39
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1479.32
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.75 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.77 prob = 0.666667
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.1 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 180
180

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 180


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 180
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 180
w = 180
	Child: h = 6 g = 8 f = 14 w = 180
	is duplicate: h = 6 g = 8 f = 14
a = 0.96 prob = 0.714286
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 180
		New node added
		child_node.getWeight() = 180
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 180
	Child: h = 8 g = 8 f = 16 w = 180
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 360
360

PrintQueue
		 h = 6 g = 8 f = 14 w = 252
		 h = 8 g = 8 f = 16 w = 360


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 252
w = 252
	Child: h = 5 g = 9 f = 14 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 252

PrintQueue
		 h = 8 g = 8 f = 16 w = 360
		 h = 5 g = 9 f = 14 w = 252


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 360
w = 360
	Child: h = 7 g = 9 f = 16 w = 360
		New node added
		child_node.getWeight() = 360
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 360
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.82 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.37 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 252
		 h = 7 g = 9 f = 16 w = 1080


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 252
w = 252
	Child: h = 6 g = 10 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 252
	Child: h = 6 g = 10 f = 16 w = 252
	is duplicate: h = 6 g = 10 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 504
504

PrintQueue
		 h = 7 g = 9 f = 16 w = 1080
		 h = 6 g = 10 f = 16 w = 504


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1080
w = 1080
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 504


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 504
w = 504
	Child: h = 7 g = 11 f = 18 w = 504
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 504
		New node added
		child_node.getWeight() = 504
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 504

PrintQueue
		 h = 5 g = 11 f = 16 w = 504


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 504
w = 504
	Child: h = 6 g = 12 f = 18 w = 504
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 504
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 16
print boolean: 
bount = 15
1 1 0 1 1 0 0 0 1 0 0 1 0 0 1 
1 1 2 4 12 36 36 72 36 180 252 360 252 1080 504 504 
expansions = 3332
**********
p = 3332
prePre = 1484.81
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.4 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.32 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.142857
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.67 prob = 0.125
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.14 prob = 0.111111
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.1
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 720


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 720
w = 720
	Child: h = 8 g = 9 f = 17 w = 720
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 720
		New node added
		child_node.getWeight() = 720
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 720
	Child: h = 7 g = 9 f = 16 w = 720
	is duplicate: h = 7 g = 9 f = 16
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1440


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 1440
w = 1440
	Child: h = 8 g = 10 f = 18 w = 1440
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1440
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1440
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 11
print boolean: 
bount = 15
1 1 1 0 0 1 1 0 1 1 0 0 0 0 0 
1 1 2 4 12 24 72 144 72 720 1440 
expansions = 2492
**********
p = 2492
prePre = 1487.79
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 0 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1483.8
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1479.88
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.53 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 10
1 1 0 0 0 1 1 1 0 1 
1 1 2 4 12 24 48 96 288 576 
expansions = 1052
**********
p = 1052
prePre = 1478.63
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1474.6
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1470.65
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.06 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.88 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 6 g = 8 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 144
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.23 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.62 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 360


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 360
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 360
w = 360
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 14
print boolean: 
bount = 11
0 1 1 1 1 1 0 0 1 0 1 
1 1 2 2 4 8 24 72 72 144 72 360 144 144 
expansions = 1050
**********
p = 1050
prePre = 1469.43
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.81 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.81 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.58 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.02 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 8 g = 8 f = 16 w = 576


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 576
w = 576
	Child: h = 8 g = 9 f = 17 w = 576
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 576
		New node added
		child_node.getWeight() = 576
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 576
	Child: h = 7 g = 9 f = 16 w = 576
	is duplicate: h = 7 g = 9 f = 16
a = 0.59 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 576
	is duplicate: h = 7 g = 9 f = 16
a = 0.02 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 1728
1728

PrintQueue
		 h = 7 g = 9 f = 16 w = 1728


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1728
w = 1728
	Child: h = 6 g = 10 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 1728
	Child: h = 8 g = 10 f = 18 w = 1728
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1728
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1728
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1728


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 1728
w = 1728
	Child: h = 5 g = 11 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1728
	Child: h = 5 g = 11 f = 16 w = 1728
	is duplicate: h = 5 g = 11 f = 16
a = 0.94 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 11 f = 18 w = 1728
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 3456


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 3456
w = 3456
	Child: h = 6 g = 12 f = 18 w = 3456
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 3456
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 3456
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 12
print boolean: 
bount = 14
1 0 1 1 1 1 0 0 0 0 1 0 1 0 
1 1 2 4 8 16 48 144 576 1728 1728 3456 
expansions = 7712
**********
p = 7712
prePre = 1487.52
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 1 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1484.73
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.7 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 1 0 1 1 0 0 0 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1484.94
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.94 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.35 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 10
1 1 1 0 0 0 0 0 1 0 
1 1 2 4 12 24 72 144 432 432 
expansions = 1124
**********
p = 1124
prePre = 1483.9
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 1 0 0 0 
1 1 2 4 8 16 32 32 64 64 
expansions = 224
**********
p = 224
prePre = 1480.29
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.21 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.55 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 6 g = 8 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 144
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.62 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.32 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 360
360
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.55 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 504


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 504
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 504
w = 504
	Child: h = 6 g = 10 f = 16 w = 504
	is duplicate: h = 6 g = 10 f = 16
a = 0.01 prob = 0.777778
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 648
w = 648
	Child: h = 7 g = 11 f = 18 w = 648
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 648

PrintQueue
		 h = 5 g = 11 f = 16 w = 648


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 648
w = 648
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 9
count2 = 14
print boolean: 
bount = 13
0 1 1 0 1 1 0 1 1 1 0 0 1 
1 1 2 2 4 8 24 72 72 144 72 504 648 648 
expansions = 2202
**********
p = 2202
prePre = 1482.35
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 0 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1478.51
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.65 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 384
384

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
1 0 1 0 1 1 0 0 1 
1 1 2 4 8 16 32 64 192 384 
expansions = 704
**********
p = 704
prePre = 1476.31
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
1 0 1 1 0 0 0 1 0 
1 1 2 4 8 16 48 96 192 384 
expansions = 752
**********
p = 752
prePre = 1474.26
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
0 0 1 1 1 1 0 1 
1 1 2 2 4 4 8 16 48 144 
expansions = 230
**********
p = 230
prePre = 1470.75
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1466.78
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.78 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 1 0 0 0 0 1 0 
1 1 2 4 12 24 48 48 96 192 
expansions = 428
**********
p = 428
prePre = 1463.86
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1460.32
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1456.46
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.67 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.01 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 9
1 0 0 1 1 0 1 1 1 
1 1 2 4 8 8 16 32 96 288 
expansions = 456
**********
p = 456
prePre = 1453.67
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.2 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.07 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.7 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 324


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 324
w = 324
	Child: h = 6 g = 8 f = 14 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 324
	Child: h = 8 g = 8 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 324
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 324
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 324
w = 324
	Child: h = 7 g = 9 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 324
	Child: h = 5 g = 9 f = 14 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 324

PrintQueue
		 h = 8 g = 8 f = 16 w = 648
		 h = 5 g = 9 f = 14 w = 324
		 h = 7 g = 9 f = 16 w = 324


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.14 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 972
972
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.88 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 324
		 h = 7 g = 9 f = 16 w = 1620


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 324
w = 324
	Child: h = 6 g = 10 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 324
	Child: h = 6 g = 10 f = 16 w = 324
	is duplicate: h = 6 g = 10 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1620
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1620
w = 1620
	Child: h = 8 g = 10 f = 18 w = 1620
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1620
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1620
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 648
w = 648
	Child: h = 5 g = 11 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 648

PrintQueue
		 h = 5 g = 11 f = 16 w = 648


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 648
w = 648
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 11
count2 = 14
print boolean: 
bount = 14
1 1 1 1 1 1 1 1 1 0 0 1 0 0 
1 1 2 4 12 36 108 324 324 648 324 1620 648 648 
expansions = 4700
**********
p = 4700
prePre = 1462.69
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.79 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.7 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 11
1 1 0 0 1 0 0 1 0 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1462.95
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1459.12
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.54 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.19 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 10
0 1 1 1 0 1 1 1 0 1 
1 1 2 2 4 8 24 48 144 432 
expansions = 666
**********
p = 666
prePre = 1456.94
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 0 0 1 1 0 0 1 
1 1 2 4 8 8 16 32 96 192 
expansions = 360
**********
p = 360
prePre = 1453.92
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1450.49
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.55 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.79 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 11
1 1 1 0 1 0 0 1 1 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1450.78
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.82 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.62 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.62 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.71 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 1 0 0 1 0 0 0 1 1 
1 1 2 4 12 24 72 144 288 576 
expansions = 1124
**********
p = 1124
prePre = 1449.89
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.32 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.5 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.94 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 576


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 576
w = 576
	Child: h = 8 g = 9 f = 17 w = 576
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 576
		New node added
		child_node.getWeight() = 576
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 576
	Child: h = 7 g = 9 f = 16 w = 576
	is duplicate: h = 7 g = 9 f = 16
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1152


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1152
w = 1152
	Child: h = 8 g = 10 f = 18 w = 1152
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1152
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1152
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1152
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 12
1 0 1 1 1 1 0 0 1 0 0 0 
1 1 2 4 8 16 48 144 576 1152 
expansions = 1952
**********
p = 1952
prePre = 1451.25
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 0 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1447.68
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1444.26
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.96 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 0 0 1 1 0 0 0 
1 1 2 4 8 8 16 32 96 192 
expansions = 360
**********
p = 360
prePre = 1441.34
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 1 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1437.85
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
1 0 1 0 0 1 1 
1 1 2 4 8 16 32 32 64 128 
expansions = 288
**********
p = 288
prePre = 1434.77
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1431.14
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1427.49
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1423.97
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 0 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1420.89
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1417.34
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.91 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.4 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.04 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.19 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.44 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 432
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 432
w = 432
	Child: h = 8 g = 8 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 432
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 8 g = 8 f = 16 w = 1728


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.0769231
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.11 prob = 0.0714286
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.88 prob = 0.0666667
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.0625
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.0588235
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 2448


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 2448
w = 2448
	Child: h = 7 g = 9 f = 16 w = 2448
		New node added
		child_node.getWeight() = 2448
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 2448
	Child: h = 7 g = 9 f = 16 w = 2448
	is duplicate: h = 7 g = 9 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4896
4896
	Child: h = 7 g = 9 f = 16 w = 2448
	is duplicate: h = 7 g = 9 f = 16
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 7344


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 7344
w = 7344
	Child: h = 6 g = 10 f = 16 w = 7344
		New node added
		child_node.getWeight() = 7344
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 7344
	Child: h = 8 g = 10 f = 18 w = 7344
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 7344
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 7344


End PrintQueue
12: Raiz: h = 6 g = 10 f = 16 w  = 7344
w = 7344
	Child: h = 7 g = 11 f = 18 w = 7344
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 7344
		New node added
		child_node.getWeight() = 7344
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 7344

PrintQueue
		 h = 5 g = 11 f = 16 w = 7344


End PrintQueue
13: Raiz: h = 5 g = 11 f = 16 w  = 7344
w = 7344
	Child: h = 6 g = 12 f = 18 w = 7344
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 7344
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 13
print boolean: 
bount = 21
1 1 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 
1 1 2 4 12 36 144 432 144 2448 7344 7344 7344 
expansions = 25256
**********
p = 25256
prePre = 1480.24
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1476.51
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1473.15
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 1 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1469.65
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.99 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.59 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.86 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.51 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 6 g = 8 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 6 g = 8 f = 14 w = 216
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 5 g = 9 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 216

PrintQueue
		 h = 8 g = 8 f = 16 w = 432
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 216


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.92 prob = 0.666667
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.39 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 1080
1080
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.57 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 1512


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 216
w = 216
	Child: h = 6 g = 10 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 216
	Child: h = 6 g = 10 f = 16 w = 216
	is duplicate: h = 6 g = 10 f = 16
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 7 g = 9 f = 16 w = 1512
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1512
w = 1512
	Child: h = 6 g = 10 f = 16 w = 1512
	is duplicate: h = 6 g = 10 f = 16
a = 0.44 prob = 0.777778
b = 1
		Added even though is duplicate.
		w = 1944
1944
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1944


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 1944
w = 1944
	Child: h = 7 g = 11 f = 18 w = 1944
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1944
		New node added
		child_node.getWeight() = 1944
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1944

PrintQueue
		 h = 5 g = 11 f = 16 w = 1944


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 1944
w = 1944
	Child: h = 6 g = 12 f = 18 w = 1944
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1944
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 10
count2 = 14
print boolean: 
bount = 15
1 1 0 0 1 0 1 1 0 1 0 1 0 1 1 
1 1 2 4 12 24 72 216 216 432 216 1512 1944 1944 
expansions = 6596
**********
p = 6596
prePre = 1483.03
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1479.48
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1475.94
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.4 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 8 g = 9 f = 17 w = 144
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 1 1 1 0 0 1 0 
1 1 2 2 4 8 24 48 144 144 
expansions = 378
**********
p = 378
prePre = 1473.09
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1469.55
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.79 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.41 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 6 g = 10 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 5
count2 = 12
print boolean: 
bount = 8
0 0 1 1 0 1 1 0 
1 1 2 2 4 4 8 16 48 144 144 144 
expansions = 518
**********
p = 518
prePre = 1467.1
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1463.53
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.89 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.68 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 11
1 1 1 0 0 0 0 1 0 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1463.76
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1460.22
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.51 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 1 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1457.83
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.8 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.88 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 1 0 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1455.45
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1452.06
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1448.58
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 1 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1445.81
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.96 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 1 1 0 0 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1443.49
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.8 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.35 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 10
1 0 1 1 0 0 1 1 0 1 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1442.47
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.89 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.45 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 7 f = 14 w = 288
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 288
w = 288
	Child: h = 6 g = 8 f = 14 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 288
	Child: h = 8 g = 8 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 6 g = 8 f = 14 w = 288
		 h = 8 g = 8 f = 16 w = 576


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.65 prob = 0.166667
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.8 prob = 0.142857
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.125
b = 1
		Added even though is duplicate.
		w = 1152
1152

PrintQueue
		 h = 6 g = 8 f = 14 w = 288
		 h = 8 g = 8 f = 16 w = 1152


End PrintQueue
10: Raiz: h = 6 g = 8 f = 14 w  = 288
w = 288
	Child: h = 5 g = 9 f = 14 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 8 g = 8 f = 16 w = 1152
		 h = 5 g = 9 f = 14 w = 288
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
11: Raiz: h = 8 g = 8 f = 16 w  = 1152
w = 1152
	Child: h = 8 g = 9 f = 17 w = 1152
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 1152
	is duplicate: h = 7 g = 9 f = 16
a = 0.14 prob = 0.8
b = 1
		Added even though is duplicate.
		w = 1440
1440
	Child: h = 7 g = 9 f = 16 w = 1152
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.444444
b = 1
		Added even though is duplicate.
		w = 2592
2592
	Child: h = 7 g = 9 f = 16 w = 1152
	is duplicate: h = 7 g = 9 f = 16
a = 0.16 prob = 0.307692
b = 1
		Added even though is duplicate.
		w = 3744
3744

PrintQueue
		 h = 5 g = 9 f = 14 w = 288
		 h = 7 g = 9 f = 16 w = 3744


End PrintQueue
12: Raiz: h = 5 g = 9 f = 14 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 3744
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
13: Raiz: h = 7 g = 9 f = 16 w  = 3744
w = 3744
	Child: h = 6 g = 10 f = 16 w = 3744
	is duplicate: h = 6 g = 10 f = 16
a = 0.51 prob = 0.8125
b = 1
		Added even though is duplicate.
		w = 4608
4608
	Child: h = 8 g = 10 f = 18 w = 3744
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3744
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3744
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 4608


End PrintQueue
14: Raiz: h = 6 g = 10 f = 16 w  = 4608
w = 4608
	Child: h = 5 g = 11 f = 16 w = 4608
		New node added
		child_node.getWeight() = 4608
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 4608
	Child: h = 5 g = 11 f = 16 w = 4608
	is duplicate: h = 5 g = 11 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 9216
9216
	Child: h = 7 g = 11 f = 18 w = 4608
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 9216


End PrintQueue
15: Raiz: h = 5 g = 11 f = 16 w  = 9216
w = 9216
	Child: h = 4 g = 12 f = 16 w = 9216
		New node added
		child_node.getWeight() = 9216
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 9216
	Child: h = 6 g = 12 f = 18 w = 9216
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 9216
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 9216
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 9216


End PrintQueue
16: Raiz: h = 4 g = 12 f = 16 w  = 9216
w = 9216
	Child: h = 5 g = 13 f = 18 w = 9216
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 3 g = 13 f = 16 w = 9216
		New node added
		child_node.getWeight() = 9216
		Child: h = 3 g = 13 f = 16 threshold: 16 w = 9216
	Child: h = 5 g = 13 f = 18 w = 9216
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16

PrintQueue
		 h = 3 g = 13 f = 16 w = 9216


End PrintQueue
17: Raiz: h = 3 g = 13 f = 16 w  = 9216
w = 9216
	Child: h = 2 g = 14 f = 16 w = 9216
		New node added
		child_node.getWeight() = 9216
		Child: h = 2 g = 14 f = 16 threshold: 16 w = 9216
	Child: h = 4 g = 14 f = 18 w = 9216
	Node was pruned!
	Child: h = 4 g = 14 f = 18 threshold: 16
	Child: h = 4 g = 14 f = 18 w = 9216
	Node was pruned!
	Child: h = 4 g = 14 f = 18 threshold: 16

PrintQueue
		 h = 2 g = 14 f = 16 w = 9216


End PrintQueue
18: Raiz: h = 2 g = 14 f = 16 w  = 9216
w = 9216
	Child: h = 3 g = 15 f = 18 w = 9216
	Node was pruned!
	Child: h = 3 g = 15 f = 18 threshold: 16
	Child: h = 3 g = 15 f = 18 w = 9216
	Node was pruned!
	Child: h = 3 g = 15 f = 18 threshold: 16
count1 = 15
count2 = 18
print boolean: 
bount = 22
1 1 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 1 1 0 1 1 
1 1 2 4 12 36 144 288 144 288 1152 288 3744 4608 9216 9216 9216 9216 
expansions = 47576
**********
p = 47576
prePre = 1558.1
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.69 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 0 0 0 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1555.09
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.5 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 1 1 0 0 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1552.51
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1549.14
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1545.6
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.6 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.48 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 9
1 1 0 0 1 0 0 0 0 
1 1 2 4 12 24 72 144 288 288 
expansions = 836
**********
p = 836
prePre = 1543.84
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 10
1 0 1 1 1 0 0 0 0 0 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1542.6
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.76 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.8 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 11
1 1 1 0 0 0 0 1 0 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1542.63
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.35 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.56 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.97 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.64 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 1 0 1 0 0 1 0 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1542.66
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1539.07
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.64 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.93 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.34 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 11
1 1 0 0 1 0 0 1 0 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1539.11
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 0 0 1 1 1 0 0 
1 1 2 4 8 8 16 32 96 192 
expansions = 360
**********
p = 360
prePre = 1536.24
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.75 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.64 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.65 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 11
1 1 0 0 1 1 0 1 1 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1536.29
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.76 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 288


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 288
w = 288
	Child: h = 7 g = 11 f = 18 w = 288
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 5 g = 11 f = 16 w = 288


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 288
w = 288
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 6
count2 = 12
print boolean: 
bount = 9
0 1 0 1 1 0 1 1 0 
1 1 2 2 4 8 16 32 96 288 288 288 
expansions = 1026
**********
p = 1026
prePre = 1535.05
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.25 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.64 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.89 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.21 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.98 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 7 f = 14 w = 288
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 288
w = 288
	Child: h = 8 g = 8 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 288
	Child: h = 6 g = 8 f = 14 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 288
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 6 g = 8 f = 14 w = 288
		 h = 8 g = 8 f = 16 w = 576


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.02 prob = 0.2
b = 1
		Added even though is duplicate.
		w = 720
720
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.19 prob = 0.166667
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.142857
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.33 prob = 0.125
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 288
		 h = 8 g = 8 f = 16 w = 1152


End PrintQueue
10: Raiz: h = 6 g = 8 f = 14 w  = 288
w = 288
	Child: h = 6 g = 9 f = 15 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 9 f = 15 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 8 g = 8 f = 16 w = 1152
		 h = 6 g = 9 f = 15 w = 288
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
11: Raiz: h = 8 g = 8 f = 16 w  = 1152
w = 1152
	Child: h = 8 g = 9 f = 17 w = 1152
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 1152
	is duplicate: h = 7 g = 9 f = 16
a = 0.18 prob = 0.8
b = 1
		Added even though is duplicate.
		w = 1440
1440
	Child: h = 7 g = 9 f = 16 w = 1152
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.444444
b = 1
		Added even though is duplicate.
		w = 2592
2592

PrintQueue
		 h = 6 g = 9 f = 15 w = 288
		 h = 7 g = 9 f = 16 w = 2592


End PrintQueue
12: Raiz: h = 6 g = 9 f = 15 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0.35 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 2592
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
13: Raiz: h = 7 g = 9 f = 16 w  = 2592
w = 2592
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 2592
	is duplicate: h = 6 g = 10 f = 16
a = 0.95 prob = 0.75
b = 0
		Not added.
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 3456


End PrintQueue
14: Raiz: h = 6 g = 10 f = 16 w  = 3456
w = 3456
	Child: h = 6 g = 11 f = 17 w = 3456
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 3456
		New node added
		child_node.getWeight() = 3456
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 3456

PrintQueue
		 h = 5 g = 11 f = 16 w = 3456


End PrintQueue
15: Raiz: h = 5 g = 11 f = 16 w  = 3456
w = 3456
	Child: h = 6 g = 12 f = 18 w = 3456
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 3456
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 11
count2 = 15
print boolean: 
bount = 20
1 1 1 1 0 0 0 1 0 1 0 1 0 0 0 1 1 1 0 0 
1 1 2 4 12 36 144 288 144 288 1152 288 2592 3456 3456 
expansions = 11864
**********
p = 11864
prePre = 1560.06
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.09 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.53 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 12
1 1 0 1 0 1 0 0 1 1 0 0 
1 1 2 4 12 36 108 216 648 1296 
expansions = 2324
**********
p = 2324
prePre = 1561.9
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.64 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.2 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.08 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.87 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.36 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 324


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 324
w = 324
	Child: h = 8 g = 8 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 324
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.88 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 1296


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 1296
w = 1296
	Child: h = 7 g = 9 f = 16 w = 1296
		New node added
		child_node.getWeight() = 1296
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 1296
	Child: h = 7 g = 9 f = 16 w = 1296
	is duplicate: h = 7 g = 9 f = 16
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2592
2592
	Child: h = 7 g = 9 f = 16 w = 1296
	is duplicate: h = 7 g = 9 f = 16
a = 0.33 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 3888
3888

PrintQueue
		 h = 7 g = 9 f = 16 w = 3888


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 3888
w = 3888
	Child: h = 8 g = 10 f = 18 w = 3888
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3888
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3888
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 9
count2 = 10
print boolean: 
bount = 15
1 1 0 1 1 1 0 1 0 0 0 0 0 1 1 
1 1 2 4 12 36 108 324 1296 3888 
expansions = 5672
**********
p = 5672
prePre = 1571.81
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.08 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.65 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.57 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.63 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.51 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 252


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 252
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 252
w = 252
	Child: h = 8 g = 8 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 252
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 756
756
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.37 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 1008


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 1008
		 h = 5 g = 9 f = 14 w = 72


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 1008
w = 1008
	Child: h = 8 g = 9 f = 17 w = 1008
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 1008
		New node added
		child_node.getWeight() = 1008
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 1008
	Child: h = 7 g = 9 f = 16 w = 1008
	is duplicate: h = 7 g = 9 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 2016


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 2016
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 2016
w = 2016
	Child: h = 8 g = 10 f = 18 w = 2016
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2016
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2016
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2016
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 9
count2 = 16
print boolean: 
bount = 16
1 1 1 1 1 0 1 1 0 0 0 0 1 0 0 0 
1 1 2 4 12 36 36 72 36 252 72 1008 72 2016 144 144 
expansions = 3908
**********
p = 3908
prePre = 1577.42
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.71 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.46 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
1 1 0 0 0 0 0 
1 1 2 4 12 24 48 48 96 96 
expansions = 332
**********
p = 332
prePre = 1574.44
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.57 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.11 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.86 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 6 g = 8 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 6 g = 8 f = 14 w = 216
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 5 g = 9 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 216

PrintQueue
		 h = 8 g = 8 f = 16 w = 432
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 216


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.98 prob = 0.666667
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.26 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 1080
1080
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.45 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 1512


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 216
w = 216
	Child: h = 6 g = 10 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 216
	Child: h = 6 g = 10 f = 16 w = 216
	is duplicate: h = 6 g = 10 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1512
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1512
w = 1512
	Child: h = 6 g = 10 f = 16 w = 1512
	is duplicate: h = 6 g = 10 f = 16
a = 0.27 prob = 0.777778
b = 1
		Added even though is duplicate.
		w = 1944
1944
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1944


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 1944
w = 1944
	Child: h = 7 g = 11 f = 18 w = 1944
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1944
		New node added
		child_node.getWeight() = 1944
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1944

PrintQueue
		 h = 5 g = 11 f = 16 w = 1944


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 1944
w = 1944
	Child: h = 6 g = 12 f = 18 w = 1944
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1944
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 10
count2 = 14
print boolean: 
bount = 15
1 1 1 0 1 0 1 1 0 1 0 1 0 0 1 
1 1 2 4 12 24 72 216 216 432 216 1512 1944 1944 
expansions = 6596
**********
p = 6596
prePre = 1586.45
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.18 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.95 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.81 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 9
count2 = 10
print boolean: 
bount = 12
1 1 1 1 1 1 0 0 1 1 0 0 
1 1 2 4 12 36 108 216 648 1296 
expansions = 2324
**********
p = 2324
prePre = 1588.21
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.75 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 0 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1584.86
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.92 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.87 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.42 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 8 g = 8 f = 16 w = 864


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 864
w = 864
	Child: h = 8 g = 9 f = 17 w = 864
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 864
	Child: h = 7 g = 9 f = 16 w = 864
	is duplicate: h = 7 g = 9 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1728
1728
	Child: h = 7 g = 9 f = 16 w = 864
	is duplicate: h = 7 g = 9 f = 16
a = 0.97 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 2592


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 2592
w = 2592
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 2592
		New node added
		child_node.getWeight() = 2592
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 2592
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 2592


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 2592
w = 2592
	Child: h = 6 g = 11 f = 17 w = 2592
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 7 g = 11 f = 18 w = 2592
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 2592
		New node added
		child_node.getWeight() = 2592
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 2592

PrintQueue
		 h = 5 g = 11 f = 16 w = 2592


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 2592
w = 2592
	Child: h = 4 g = 12 f = 16 w = 2592
		New node added
		child_node.getWeight() = 2592
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 2592
	Child: h = 6 g = 12 f = 18 w = 2592
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 2592
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 2592


End PrintQueue
13: Raiz: h = 4 g = 12 f = 16 w  = 2592
w = 2592
	Child: h = 5 g = 13 f = 18 w = 2592
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 2592
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 10
count2 = 13
print boolean: 
bount = 14
1 1 1 0 1 1 1 0 0 1 0 1 1 0 
1 1 2 4 12 24 72 216 864 2592 2592 2592 2592 
expansions = 11564
**********
p = 11564
prePre = 1608.57
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1604.9
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 1 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1601.42
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1597.92
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.35 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.29 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 8 g = 9 f = 17 w = 288
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 0 1 1 1 0 0 0 1 0 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1596.6
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.73 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 1 0 0 0 0 1 1 
1 1 2 4 12 24 48 48 96 192 
expansions = 428
**********
p = 428
prePre = 1593.86
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.86 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.13 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.04 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 648
648

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.05 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 1944
1944

PrintQueue
		 h = 7 g = 9 f = 16 w = 1944


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1944
w = 1944
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 11
count2 = 10
print boolean: 
bount = 13
1 1 1 0 1 0 1 1 1 1 1 0 1 
1 1 2 4 12 24 72 216 648 1944 
expansions = 2924
**********
p = 2924
prePre = 1596.97
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 0 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1593.56
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.29 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.42 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 288


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 288
w = 288
	Child: h = 7 g = 11 f = 18 w = 288
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 5 g = 11 f = 16 w = 288


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 288
w = 288
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 6
count2 = 12
print boolean: 
bount = 9
0 1 0 1 1 0 1 1 0 
1 1 2 2 4 8 16 32 96 288 288 288 
expansions = 1026
**********
p = 1026
prePre = 1592.23
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1588.8
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 0 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1585.42
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1581.89
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.53 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.58 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.56 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.64 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 11
1 1 0 0 1 0 0 1 1 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1581.83
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 8 g = 8 f = 16 w = 128


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 128
w = 128
	Child: h = 7 g = 9 f = 16 w = 128
		New node added
		child_node.getWeight() = 128
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 128
	Child: h = 7 g = 9 f = 16 w = 128
	is duplicate: h = 7 g = 9 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 256
256

PrintQueue
		 h = 7 g = 9 f = 16 w = 256


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 256
w = 256
	Child: h = 8 g = 10 f = 18 w = 256
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 256
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 256
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
1 0 1 0 1 0 1 1 
1 1 2 4 8 16 32 64 128 256 
expansions = 512
**********
p = 512
prePre = 1579.37
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1575.92
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 1 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1572.61
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1569.36
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1566.04
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1562.82
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1559.7
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1556.58
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1553.2
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.4 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 6 g = 10 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 6
count2 = 12
print boolean: 
bount = 8
0 0 1 1 1 1 1 0 
1 1 2 2 4 4 8 16 48 144 144 144 
expansions = 518
**********
p = 518
prePre = 1550.86
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 0 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1547.96
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.53 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.11 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.93 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.29 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 324


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 324
w = 324
	Child: h = 8 g = 8 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 324
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.97 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 972
972
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.34 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 1296


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 9 f = 17 w = 1296
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 1296
		New node added
		child_node.getWeight() = 1296
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 1296
	Child: h = 7 g = 9 f = 16 w = 1296
	is duplicate: h = 7 g = 9 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2592
2592

PrintQueue
		 h = 7 g = 9 f = 16 w = 2592


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 2592
w = 2592
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 2592
		New node added
		child_node.getWeight() = 2592
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 2592
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 2592


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 2592
w = 2592
	Child: h = 6 g = 11 f = 17 w = 2592
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 7 g = 11 f = 18 w = 2592
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
count1 = 8
count2 = 11
print boolean: 
bount = 14
1 1 0 1 0 1 0 1 0 0 0 1 0 1 
1 1 2 4 12 36 108 324 1296 2592 2592 
expansions = 6968
**********
p = 6968
prePre = 1560.14
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.65 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.51 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 11
1 1 0 0 1 1 0 0 0 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1560.13
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.62 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 1 0 0 0 1 0 
1 1 2 2 4 8 24 48 96 192 
expansions = 378
**********
p = 378
prePre = 1557.49
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1554.19
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.39 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 384
384

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 9
1 0 1 0 1 1 1 0 1 
1 1 2 4 8 16 32 64 192 384 
expansions = 704
**********
p = 704
prePre = 1552.29
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.56 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.62 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 12
1 1 1 0 1 1 0 1 0 1 0 0 
1 1 2 4 12 24 72 144 432 1296 
expansions = 1988
**********
p = 1988
prePre = 1553.26
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.18 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.55 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.35 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 12
1 1 0 1 0 1 1 0 1 0 0 0 
1 1 2 4 12 36 108 216 648 1296 
expansions = 2324
**********
p = 2324
prePre = 1554.97
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.02 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.84 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.57 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.97 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.84 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 252


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 252
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 252
w = 252
	Child: h = 8 g = 8 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 252
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 756
756
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 1008


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 1008
		 h = 5 g = 9 f = 14 w = 72


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 1008
w = 1008
	Child: h = 8 g = 9 f = 17 w = 1008
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 1008
		New node added
		child_node.getWeight() = 1008
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 1008
	Child: h = 7 g = 9 f = 16 w = 1008
	is duplicate: h = 7 g = 9 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2016
2016

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 2016


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 2016
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 2016
w = 2016
	Child: h = 8 g = 10 f = 18 w = 2016
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 2016
	is duplicate: h = 6 g = 10 f = 16
a = 0 prob = 0.933333
b = 1
		Added even though is duplicate.
		w = 2160
2160
	Child: h = 8 g = 10 f = 18 w = 2016
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 2160


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 2160
w = 2160
	Child: h = 6 g = 11 f = 17 w = 2160
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 7 g = 11 f = 18 w = 2160
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
count1 = 10
count2 = 15
print boolean: 
bount = 17
1 1 0 1 1 0 1 1 0 0 0 0 1 0 1 0 1 
1 1 2 4 12 36 36 72 36 252 72 1008 72 2016 2160 
expansions = 5780
**********
p = 5780
prePre = 1564.32
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 1 0 0 1 0 
1 1 2 4 8 16 32 32 64 128 
expansions = 288
**********
p = 288
prePre = 1561.5
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1558.23
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.58 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
1 0 1 0 1 1 1 0 0 
1 1 2 4 8 16 32 64 192 384 
expansions = 704
**********
p = 704
prePre = 1556.36
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1553.11
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
0 0 1 1 0 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1550.11
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.25 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 6 g = 8 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 6 g = 8 f = 14 w = 144
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.22 prob = 0.142857
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.67 prob = 0.125
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.1 prob = 0.111111
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.1
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 144
		 h = 8 g = 8 f = 16 w = 720


End PrintQueue
10: Raiz: h = 6 g = 8 f = 14 w  = 144
w = 144
	Child: h = 5 g = 9 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 144
	Child: h = 5 g = 9 f = 14 w = 144
	is duplicate: h = 5 g = 9 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 8 g = 8 f = 16 w = 720
		 h = 5 g = 9 f = 14 w = 288
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
11: Raiz: h = 8 g = 8 f = 16 w  = 720
w = 720
	Child: h = 8 g = 9 f = 17 w = 720
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 720
	is duplicate: h = 7 g = 9 f = 16
a = 0.32 prob = 0.833333
b = 1
		Added even though is duplicate.
		w = 864
864
	Child: h = 7 g = 9 f = 16 w = 720
	is duplicate: h = 7 g = 9 f = 16
a = 0.83 prob = 0.454545
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 288
		 h = 7 g = 9 f = 16 w = 1584


End PrintQueue
12: Raiz: h = 5 g = 9 f = 14 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1584
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
13: Raiz: h = 7 g = 9 f = 16 w  = 1584
w = 1584
	Child: h = 8 g = 10 f = 18 w = 1584
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1584
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1584
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
14: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864
	Child: h = 5 g = 11 f = 16 w = 864
	is duplicate: h = 5 g = 11 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 5 g = 11 f = 16 w = 1728


End PrintQueue
15: Raiz: h = 5 g = 11 f = 16 w  = 1728
w = 1728
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 11
count2 = 15
print boolean: 
bount = 20
1 1 1 0 0 1 1 1 1 0 0 0 1 0 0 1 0 1 0 0 
1 1 2 4 12 24 72 144 72 144 720 288 1584 864 1728 
expansions = 5660
**********
p = 5660
prePre = 1559.09
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.94 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.17 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.45 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 6 g = 8 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 6 g = 8 f = 14 w = 144
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 5 g = 9 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 144

PrintQueue
		 h = 8 g = 8 f = 16 w = 288
		 h = 5 g = 9 f = 14 w = 144
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.18 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.08 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 720
720
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.76 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 144
		 h = 7 g = 9 f = 16 w = 1008


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 144
w = 144
	Child: h = 6 g = 10 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 144
	Child: h = 6 g = 10 f = 16 w = 144
	is duplicate: h = 6 g = 10 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 1008
		 h = 6 g = 10 f = 16 w = 288


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1008
w = 1008
	Child: h = 6 g = 10 f = 16 w = 1008
	is duplicate: h = 6 g = 10 f = 16
a = 0.59 prob = 0.777778
b = 1
		Added even though is duplicate.
		w = 1296
1296
	Child: h = 8 g = 10 f = 18 w = 1008
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1008
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1296


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 1296
w = 1296
	Child: h = 7 g = 11 f = 18 w = 1296
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1296
		New node added
		child_node.getWeight() = 1296
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1296

PrintQueue
		 h = 5 g = 11 f = 16 w = 1296


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 1296
w = 1296
	Child: h = 6 g = 12 f = 18 w = 1296
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1296
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 11
count2 = 14
print boolean: 
bount = 14
1 0 1 1 0 1 1 0 1 1 1 0 1 1 
1 1 2 4 8 16 48 144 144 288 144 1008 1296 1296 
expansions = 4400
**********
p = 4400
prePre = 1565.28
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 1 0 1 0 1 0 
1 1 2 2 4 8 16 32 64 128 
expansions = 258
**********
p = 258
prePre = 1562.43
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1559.31
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.25 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.79 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.35 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1296
1296

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 9
count2 = 10
print boolean: 
bount = 12
1 1 0 1 1 1 0 0 1 1 0 1 
1 1 2 4 12 36 108 216 648 1296 
expansions = 2324
**********
p = 2324
prePre = 1560.96
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.65 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 10
1 1 1 0 1 0 0 0 1 1 
1 1 2 4 12 24 72 144 288 576 
expansions = 1124
**********
p = 1124
prePre = 1560.02
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.69 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 0 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1557.78
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 1 0 0 0 
1 1 2 4 8 16 32 32 64 64 
expansions = 224
**********
p = 224
prePre = 1554.91
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1551.79
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.53 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.96 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 10
1 0 1 1 1 0 0 0 0 0 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1550.7
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 0 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1547.67
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 8 g = 8 f = 16 w = 128


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 128
w = 128
	Child: h = 7 g = 9 f = 16 w = 128
		New node added
		child_node.getWeight() = 128
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 128
	Child: h = 7 g = 9 f = 16 w = 128
	is duplicate: h = 7 g = 9 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 256


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 256
w = 256
	Child: h = 8 g = 10 f = 18 w = 256
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 256
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 0 1 0 1 0 1 0 
1 1 2 4 8 16 32 64 128 256 
expansions = 512
**********
p = 512
prePre = 1545.46
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.06 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.48 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 8 g = 9 f = 17 w = 288
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.04 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 6 g = 10 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864
	Child: h = 5 g = 11 f = 16 w = 864
	is duplicate: h = 5 g = 11 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 11 f = 18 w = 864
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 1728


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 1728
w = 1728
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 6
count2 = 12
print boolean: 
bount = 13
0 1 1 0 1 0 0 0 0 1 0 1 0 
1 1 2 2 4 8 24 72 288 864 864 1728 
expansions = 3858
**********
p = 3858
prePre = 1550.38
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.6 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 288


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 288
w = 288
	Child: h = 7 g = 11 f = 18 w = 288
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 5 g = 11 f = 16 w = 288


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 288
w = 288
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 6
count2 = 12
print boolean: 
bount = 9
0 1 0 1 1 0 1 1 0 
1 1 2 2 4 8 16 32 96 288 288 288 
expansions = 1026
**********
p = 1026
prePre = 1549.27
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.82 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.65 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.29 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.76 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 6 g = 10 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 7 g = 11 f = 18 w = 864
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864

PrintQueue
		 h = 5 g = 11 f = 16 w = 864


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 864
w = 864
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 12
print boolean: 
bount = 11
1 1 0 0 0 1 1 1 1 1 0 
1 1 2 4 12 24 48 96 288 864 864 864 
expansions = 3068
**********
p = 3068
prePre = 1552.49
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.64 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 10
0 1 1 1 0 1 1 1 0 0 
1 1 2 2 4 8 24 48 144 432 
expansions = 666
**********
p = 666
prePre = 1550.61
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.39 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.79 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 0 0 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1548.44
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 0 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1545.5
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1542.39
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.77 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.75 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.46 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 12
1 1 1 0 0 0 0 1 1 1 0 0 
1 1 2 4 12 24 72 144 432 1296 
expansions = 1988
**********
p = 1988
prePre = 1543.32
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1540.26
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1537.46
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.38 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 1 0 0 0 1 0 
1 1 2 2 4 8 24 48 96 192 
expansions = 378
**********
p = 378
prePre = 1535.04
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.79 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 1 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1532.59
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.8 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.92 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.42 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 1 0 1 0 0 1 1 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1532.63
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.87 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.31 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.04 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 0 1 1 0 1 0 1 0 0 1 
1 1 2 4 8 16 48 144 432 864 
expansions = 1520
**********
p = 1520
prePre = 1532.61
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1529.6
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 1 0 1 0 1 0 
1 1 2 2 4 8 16 32 64 128 
expansions = 258
**********
p = 258
prePre = 1526.98
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1523.97
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.67 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.91 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 1 0 0 0 1 0 0 
1 1 2 4 12 24 48 96 192 192 
expansions = 572
**********
p = 572
prePre = 1522.01
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.57 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.47 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.04 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.58 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.34 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
0 1 1 0 0 1 1 1 0 0 
1 1 2 2 4 8 24 48 144 432 
expansions = 666
**********
p = 666
prePre = 1520.26
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 1 0 0 0 
1 1 2 4 8 16 32 32 64 64 
expansions = 224
**********
p = 224
prePre = 1517.61
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1514.92
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1511.99
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.46 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.75 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 1 1 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1509.98
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 0 0 1 1 0 0 0 
1 1 2 4 8 8 16 32 96 192 
expansions = 360
**********
p = 360
prePre = 1507.65
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.93 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.37 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.05 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.6 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 288
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 288
w = 288
	Child: h = 8 g = 8 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.67 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 8 g = 8 f = 16 w = 1152


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.01 prob = 0.111111
b = 1
		Added even though is duplicate.
		w = 1296
1296
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.62 prob = 0.1
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.5 prob = 0.0909091
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.67 prob = 0.0833333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 1728


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 1728
w = 1728
	Child: h = 8 g = 9 f = 17 w = 1728
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 1728
	Child: h = 7 g = 9 f = 16 w = 1728
	is duplicate: h = 7 g = 9 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 3456
3456

PrintQueue
		 h = 7 g = 9 f = 16 w = 3456


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 3456
w = 3456
	Child: h = 8 g = 10 f = 18 w = 3456
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 3456
		New node added
		child_node.getWeight() = 3456
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 3456
	Child: h = 8 g = 10 f = 18 w = 3456
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 3456


End PrintQueue
12: Raiz: h = 6 g = 10 f = 16 w  = 3456
w = 3456
	Child: h = 6 g = 11 f = 17 w = 3456
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 7 g = 11 f = 18 w = 3456
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
count1 = 7
count2 = 12
print boolean: 
bount = 18
1 1 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 
1 1 2 4 12 36 144 288 144 1728 3456 3456 
expansions = 9272
**********
p = 9272
prePre = 1523.36
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.93 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
1 1 0 0 0 0 0 
1 1 2 4 12 24 48 48 96 96 
expansions = 332
**********
p = 332
prePre = 1520.96
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.02 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.56 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 12
1 0 1 1 0 1 1 1 0 1 0 0 
1 1 2 4 8 16 48 144 432 1296 
expansions = 1952
**********
p = 1952
prePre = 1521.83
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 1 0 1 0 1 1 
1 1 2 2 4 8 16 32 64 128 
expansions = 258
**********
p = 258
prePre = 1519.28
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1516.39
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 0 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1513.64
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.21 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 0 1 1 1 1 0 0 
1 1 2 2 4 4 8 16 48 144 
expansions = 230
**********
p = 230
prePre = 1511.08
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.81 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
0 0 1 1 0 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1508.42
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 1 0 1 0 1 1 
1 1 2 2 4 8 16 32 64 128 
expansions = 258
**********
p = 258
prePre = 1505.93
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1503.3
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1500.68
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.19 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.86 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.29 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 7 g = 9 f = 16 w = 216
	is duplicate: h = 7 g = 9 f = 16
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 10
0 1 1 1 1 0 1 1 0 1 
1 1 2 2 4 8 24 72 216 432 
expansions = 762
**********
p = 762
prePre = 1499.22
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.58 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.71 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.8 prob = 0.25
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.96 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.65 prob = 0.166667
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 11
print boolean: 
bount = 12
1 1 1 0 0 1 0 1 0 0 0 0 
1 1 2 4 12 24 72 72 72 432 432 
expansions = 1124
**********
p = 1124
prePre = 1498.47
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.58 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
1 1 0 0 0 0 0 
1 1 2 4 12 24 48 48 96 96 
expansions = 332
**********
p = 332
prePre = 1496.17
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.06 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.18 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.02 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 180
180
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.47 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 252


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 252
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 252
w = 252
	Child: h = 6 g = 8 f = 14 w = 252
	is duplicate: h = 6 g = 8 f = 14
a = 0.14 prob = 0.777778
b = 1
		Added even though is duplicate.
		w = 324
324
	Child: h = 8 g = 8 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 252
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 324
		 h = 8 g = 8 f = 16 w = 504


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 324
w = 324
	Child: h = 7 g = 9 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 324
	Child: h = 5 g = 9 f = 14 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 324

PrintQueue
		 h = 8 g = 8 f = 16 w = 504
		 h = 5 g = 9 f = 14 w = 324
		 h = 7 g = 9 f = 16 w = 324


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 504
w = 504
	Child: h = 7 g = 9 f = 16 w = 504
	is duplicate: h = 7 g = 9 f = 16
a = 0.72 prob = 0.608696
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 504
	is duplicate: h = 7 g = 9 f = 16
a = 0.13 prob = 0.378378
b = 1
		Added even though is duplicate.
		w = 1332
1332

PrintQueue
		 h = 5 g = 9 f = 14 w = 324
		 h = 7 g = 9 f = 16 w = 1332


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 324
w = 324
	Child: h = 6 g = 10 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 324
	Child: h = 6 g = 10 f = 16 w = 324
	is duplicate: h = 6 g = 10 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1332
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1332
w = 1332
	Child: h = 6 g = 10 f = 16 w = 1332
	is duplicate: h = 6 g = 10 f = 16
a = 0.13 prob = 0.672727
b = 1
		Added even though is duplicate.
		w = 1980
1980
	Child: h = 8 g = 10 f = 18 w = 1332
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1332
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1980


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 1980
w = 1980
	Child: h = 7 g = 11 f = 18 w = 1980
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1980
		New node added
		child_node.getWeight() = 1980
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1980

PrintQueue
		 h = 5 g = 11 f = 16 w = 1980


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 1980
w = 1980
	Child: h = 6 g = 12 f = 18 w = 1980
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1980
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 12
count2 = 16
print boolean: 
bount = 17
1 1 1 1 1 0 1 1 1 0 0 1 0 0 1 0 1 
1 1 2 4 12 36 36 72 36 252 324 504 324 1332 1980 1980 
expansions = 6896
**********
p = 6896
prePre = 1506.8
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.3 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.39 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.12 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.34 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 180
180

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 180


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 180
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 180
w = 180
	Child: h = 6 g = 8 f = 14 w = 180
	is duplicate: h = 6 g = 8 f = 14
a = 0.55 prob = 0.714286
b = 1
		Added even though is duplicate.
		w = 252
252
	Child: h = 8 g = 8 f = 16 w = 180
		New node added
		child_node.getWeight() = 180
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 180
	Child: h = 8 g = 8 f = 16 w = 180
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 252
		 h = 8 g = 8 f = 16 w = 360


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 252
w = 252
	Child: h = 7 g = 9 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 252
	Child: h = 5 g = 9 f = 14 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 252

PrintQueue
		 h = 8 g = 8 f = 16 w = 360
		 h = 5 g = 9 f = 14 w = 252
		 h = 7 g = 9 f = 16 w = 252


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 360
w = 360
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.21 prob = 0.588235
b = 1
		Added even though is duplicate.
		w = 612
612
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.01 prob = 0.37037
b = 1
		Added even though is duplicate.
		w = 972
972

PrintQueue
		 h = 5 g = 9 f = 14 w = 252
		 h = 7 g = 9 f = 16 w = 972


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 252
w = 252
	Child: h = 6 g = 10 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 252
	Child: h = 6 g = 10 f = 16 w = 252
	is duplicate: h = 6 g = 10 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 504
504

PrintQueue
		 h = 7 g = 9 f = 16 w = 972
		 h = 6 g = 10 f = 16 w = 504


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 972
w = 972
	Child: h = 6 g = 10 f = 16 w = 972
	is duplicate: h = 6 g = 10 f = 16
a = 0.99 prob = 0.658537
b = 0
		Not added.
	Child: h = 8 g = 10 f = 18 w = 972
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 972
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1476


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 1476
w = 1476
	Child: h = 7 g = 11 f = 18 w = 1476
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1476
		New node added
		child_node.getWeight() = 1476
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1476

PrintQueue
		 h = 5 g = 11 f = 16 w = 1476


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 1476
w = 1476
	Child: h = 6 g = 12 f = 18 w = 1476
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1476
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 12
count2 = 16
print boolean: 
bount = 16
1 1 1 1 1 0 0 1 1 0 1 0 1 1 1 0 
1 1 2 4 12 36 36 72 36 180 252 360 252 972 1476 1476 
expansions = 5168
**********
p = 5168
prePre = 1514
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.58 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.62 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.48 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.166667
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 9
count2 = 11
print boolean: 
bount = 13
1 1 1 0 0 1 0 1 1 1 0 1 0 
1 1 2 4 12 24 72 72 72 432 864 
expansions = 1556
**********
p = 1556
prePre = 1514.08
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 0 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1511.41
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 1 0 0 0 
1 1 2 4 8 16 32 32 64 64 
expansions = 224
**********
p = 224
prePre = 1508.9
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 0 1 1 0 0 0 0 
1 1 2 4 8 16 48 96 192 192 
expansions = 560
**********
p = 560
prePre = 1507.05
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.78 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 1 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1505.13
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.91 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
0 1 1 0 0 0 0 
1 1 2 2 4 8 24 48 96 96 
expansions = 282
**********
p = 282
prePre = 1502.76
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1500
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.39 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.79 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.5 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.6 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 11
1 1 1 0 0 0 0 1 1 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1500.1
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.38 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 1 0 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1498.22
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.3 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.91 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.16 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.31 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 180
180

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 180


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 180
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 180
w = 180
	Child: h = 6 g = 8 f = 14 w = 180
	is duplicate: h = 6 g = 8 f = 14
a = 0.97 prob = 0.714286
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 180
		New node added
		child_node.getWeight() = 180
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 180
	Child: h = 8 g = 8 f = 16 w = 180
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 360
360

PrintQueue
		 h = 6 g = 8 f = 14 w = 252
		 h = 8 g = 8 f = 16 w = 360


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 252
w = 252
	Child: h = 7 g = 9 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 252
	Child: h = 5 g = 9 f = 14 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 252

PrintQueue
		 h = 8 g = 8 f = 16 w = 360
		 h = 5 g = 9 f = 14 w = 252
		 h = 7 g = 9 f = 16 w = 252


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 360
w = 360
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.59 prob = 0.588235
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.17 prob = 0.37037
b = 1
		Added even though is duplicate.
		w = 972
972
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.47 prob = 0.27027
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 252
		 h = 7 g = 9 f = 16 w = 1332


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 252
w = 252
	Child: h = 6 g = 10 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 252
	Child: h = 6 g = 10 f = 16 w = 252
	is duplicate: h = 6 g = 10 f = 16
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 504
504

PrintQueue
		 h = 7 g = 9 f = 16 w = 1332
		 h = 6 g = 10 f = 16 w = 504


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1332
w = 1332
	Child: h = 6 g = 10 f = 16 w = 1332
	is duplicate: h = 6 g = 10 f = 16
a = 0.18 prob = 0.72549
b = 1
		Added even though is duplicate.
		w = 1836
1836
	Child: h = 8 g = 10 f = 18 w = 1332
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1332
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1836


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 1836
w = 1836
	Child: h = 7 g = 11 f = 18 w = 1836
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1836
		New node added
		child_node.getWeight() = 1836
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1836

PrintQueue
		 h = 5 g = 11 f = 16 w = 1836


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 1836
w = 1836
	Child: h = 6 g = 12 f = 18 w = 1836
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1836
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 13
count2 = 16
print boolean: 
bount = 17
1 1 1 1 1 0 0 1 1 1 0 1 0 1 0 1 1 
1 1 2 4 12 36 36 72 36 180 252 360 252 1332 1836 1836 
expansions = 6248
**********
p = 6248
prePre = 1507.37
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 1 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1504.73
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 7 g = 9 f = 16 w = 216
	is duplicate: h = 7 g = 9 f = 16
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 9
count2 = 10
print boolean: 
bount = 10
0 1 1 1 1 1 1 1 0 1 
1 1 2 2 4 8 24 72 216 432 
expansions = 762
**********
p = 762
prePre = 1503.3
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.95 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.36 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 10
1 0 1 1 0 0 1 0 0 0 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1502.41
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.34 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1499.89
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1497.37
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.36 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 384
384

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
1 1 0 0 0 1 0 1 1 
1 1 2 4 12 24 48 96 192 384 
expansions = 764
**********
p = 764
prePre = 1495.98
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.84 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.84 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 1 0 0 0 1 0 0 
1 1 2 4 12 24 48 96 192 192 
expansions = 572
**********
p = 572
prePre = 1494.22
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 0 0 1 1 0 0 1 
1 1 2 4 8 8 16 32 96 192 
expansions = 360
**********
p = 360
prePre = 1492.07
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.81 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.01 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.59 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 10
0 1 1 0 0 1 0 1 0 0 
1 1 2 2 4 8 24 48 144 432 
expansions = 666
**********
p = 666
prePre = 1490.5
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1487.9
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 8
0 0 1 1 1 1 1 1 
1 1 2 2 4 4 8 16 48 144 
expansions = 230
**********
p = 230
prePre = 1485.53
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1482.88
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.56 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 0 1 1 1 0 1 0 0 0 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1482.05
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.45 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.31 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.3 prob = 0.142857
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.07 prob = 0.125
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.111111
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.1
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 720


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 720
w = 720
	Child: h = 8 g = 9 f = 17 w = 720
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 720
		New node added
		child_node.getWeight() = 720
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 720
	Child: h = 7 g = 9 f = 16 w = 720
	is duplicate: h = 7 g = 9 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1440
1440

PrintQueue
		 h = 7 g = 9 f = 16 w = 1440


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 1440
w = 1440
	Child: h = 6 g = 10 f = 16 w = 1440
		New node added
		child_node.getWeight() = 1440
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 1440
	Child: h = 8 g = 10 f = 18 w = 1440
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1440
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1440
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1440


End PrintQueue
12: Raiz: h = 6 g = 10 f = 16 w  = 1440
w = 1440
	Child: h = 5 g = 11 f = 16 w = 1440
		New node added
		child_node.getWeight() = 1440
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1440
	Child: h = 5 g = 11 f = 16 w = 1440
	is duplicate: h = 5 g = 11 f = 16
a = 0.82 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 11 f = 18 w = 1440
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 2880


End PrintQueue
13: Raiz: h = 5 g = 11 f = 16 w  = 2880
w = 2880
	Child: h = 6 g = 12 f = 18 w = 2880
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 4 g = 12 f = 16 w = 2880
		New node added
		child_node.getWeight() = 2880
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 2880
	Child: h = 6 g = 12 f = 18 w = 2880
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 2880


End PrintQueue
14: Raiz: h = 4 g = 12 f = 16 w  = 2880
w = 2880
	Child: h = 5 g = 13 f = 18 w = 2880
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 3 g = 13 f = 16 w = 2880
		New node added
		child_node.getWeight() = 2880
		Child: h = 3 g = 13 f = 16 threshold: 16 w = 2880

PrintQueue
		 h = 3 g = 13 f = 16 w = 2880


End PrintQueue
15: Raiz: h = 3 g = 13 f = 16 w  = 2880
w = 2880
	Child: h = 4 g = 14 f = 18 w = 2880
	Node was pruned!
	Child: h = 4 g = 14 f = 18 threshold: 16
	Child: h = 4 g = 14 f = 18 w = 2880
	Node was pruned!
	Child: h = 4 g = 14 f = 18 threshold: 16
count1 = 9
count2 = 15
print boolean: 
bount = 16
1 1 1 0 0 1 1 0 0 1 0 1 0 0 1 0 
1 1 2 4 12 24 72 144 72 720 1440 1440 2880 2880 2880 
expansions = 12572
**********
p = 12572
prePre = 1502.85
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.6 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 1 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1500.7
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.18 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.33 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 7 g = 9 f = 16 w = 216
	is duplicate: h = 7 g = 9 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 7 g = 9 f = 16 w = 216
	is duplicate: h = 7 g = 9 f = 16
a = 0.35 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 648


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 648
w = 648
	Child: h = 6 g = 10 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 648
	Child: h = 8 g = 10 f = 18 w = 648
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 648
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 648
w = 648
	Child: h = 7 g = 11 f = 18 w = 648
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 648

PrintQueue
		 h = 5 g = 11 f = 16 w = 648


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 648
w = 648
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 10
count2 = 12
print boolean: 
bount = 11
0 1 1 1 1 1 1 1 1 1 0 
1 1 2 2 4 8 24 72 216 648 648 648 
expansions = 2274
**********
p = 2274
prePre = 1502.15
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1499.46
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 1 0 0 0 
1 1 2 4 8 16 32 32 64 64 
expansions = 224
**********
p = 224
prePre = 1497.08
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 128


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 128
w = 128
	Child: h = 7 g = 9 f = 16 w = 128
		New node added
		child_node.getWeight() = 128
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 1 0 1 0 0 
1 1 2 4 8 16 32 64 128 128 
expansions = 384
**********
p = 384
prePre = 1495.01
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 8 g = 8 f = 16 w = 128


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 128
w = 128
	Child: h = 7 g = 9 f = 16 w = 128
		New node added
		child_node.getWeight() = 128
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 128
	Child: h = 7 g = 9 f = 16 w = 128
	is duplicate: h = 7 g = 9 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 256
256

PrintQueue
		 h = 7 g = 9 f = 16 w = 256


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 256
w = 256
	Child: h = 8 g = 10 f = 18 w = 256
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 256
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 256
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
1 0 1 0 1 0 1 1 
1 1 2 4 8 16 32 64 128 256 
expansions = 512
**********
p = 512
prePre = 1493.19
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.57 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 1 0 0 0 0 1 0 
1 1 2 4 12 24 48 48 96 192 
expansions = 428
**********
p = 428
prePre = 1491.22
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1488.82
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1486.26
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.01 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.89 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.89 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.56 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.97 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 6 g = 10 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 7 g = 11 f = 18 w = 864
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864

PrintQueue
		 h = 5 g = 11 f = 16 w = 864


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 864
w = 864
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 6
count2 = 12
print boolean: 
bount = 12
0 1 1 1 1 0 0 0 0 0 1 0 
1 1 2 2 4 8 24 72 288 864 864 864 
expansions = 2994
**********
p = 2994
prePre = 1489.04
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 0 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1486.79
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1484.17
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.21 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.87 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.51 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.43 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 576


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 576
w = 576
	Child: h = 8 g = 9 f = 17 w = 576
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 576
		New node added
		child_node.getWeight() = 576
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 576
	Child: h = 7 g = 9 f = 16 w = 576
	is duplicate: h = 7 g = 9 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1152
1152

PrintQueue
		 h = 7 g = 9 f = 16 w = 1152


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1152
w = 1152
	Child: h = 6 g = 10 f = 16 w = 1152
		New node added
		child_node.getWeight() = 1152
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 1152
	Child: h = 8 g = 10 f = 18 w = 1152
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1152
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1152


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 1152
w = 1152
	Child: h = 5 g = 11 f = 16 w = 1152
		New node added
		child_node.getWeight() = 1152
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1152
	Child: h = 7 g = 11 f = 18 w = 1152
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 1152


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 1152
w = 1152
	Child: h = 6 g = 12 f = 18 w = 1152
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1152
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1152
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 12
print boolean: 
bount = 12
1 0 1 1 1 1 0 0 1 0 0 1 
1 1 2 4 8 16 48 144 576 1152 1152 1152 
expansions = 4256
**********
p = 4256
prePre = 1489.25
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 1 0 1 0 1 1 
1 1 2 2 4 8 16 32 64 128 
expansions = 258
**********
p = 258
prePre = 1487
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.95 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.07 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.81 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 864


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 864
w = 864
	Child: h = 8 g = 9 f = 17 w = 864
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 864
	Child: h = 7 g = 9 f = 16 w = 864
	is duplicate: h = 7 g = 9 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1728
1728

PrintQueue
		 h = 7 g = 9 f = 16 w = 1728


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1728
w = 1728
	Child: h = 8 g = 10 f = 18 w = 1728
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 1728
	Child: h = 8 g = 10 f = 18 w = 1728
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1728


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 1728
w = 1728
	Child: h = 6 g = 11 f = 17 w = 1728
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 7 g = 11 f = 18 w = 1728
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
count1 = 9
count2 = 11
print boolean: 
bount = 13
1 1 0 0 1 1 1 0 0 1 1 0 1 
1 1 2 4 12 24 72 216 864 1728 1728 
expansions = 4652
**********
p = 4652
prePre = 1492.77
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1490.17
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.96 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.59 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.3 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.55 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 6 g = 10 f = 16 w = 1296
		New node added
		child_node.getWeight() = 1296
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1296


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 1296
w = 1296
	Child: h = 7 g = 11 f = 18 w = 1296
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1296
		New node added
		child_node.getWeight() = 1296
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1296

PrintQueue
		 h = 5 g = 11 f = 16 w = 1296


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 1296
w = 1296
	Child: h = 6 g = 12 f = 18 w = 1296
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1296
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 9
count2 = 12
print boolean: 
bount = 12
1 1 1 0 1 1 0 1 0 1 1 0 
1 1 2 4 12 24 72 144 432 1296 1296 1296 
expansions = 4580
**********
p = 4580
prePre = 1495.79
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1493.26
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1490.76
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 1 0 0 1 0 
1 1 2 4 8 16 32 32 64 128 
expansions = 288
**********
p = 288
prePre = 1488.58
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 1 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1486.53
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.95 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 8 g = 9 f = 17 w = 144
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 1 1 1 0 0 1 0 
1 1 2 2 4 8 24 48 144 144 
expansions = 378
**********
p = 378
prePre = 1484.54
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.98 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 6 g = 8 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 6 g = 8 f = 14 w = 216
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 5 g = 9 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 216

PrintQueue
		 h = 8 g = 8 f = 16 w = 432
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 216


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.78 prob = 0.666667
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.96 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.1 prob = 0.285714
b = 1
		Added even though is duplicate.
		w = 1512
1512

PrintQueue
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 1512


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 216
w = 216
	Child: h = 6 g = 10 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 216
	Child: h = 6 g = 10 f = 16 w = 216
	is duplicate: h = 6 g = 10 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 7 g = 9 f = 16 w = 1512
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1512
w = 1512
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 432
w = 432
	Child: h = 7 g = 11 f = 18 w = 432
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 5 g = 11 f = 16 w = 432


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 432
w = 432
	Child: h = 6 g = 12 f = 18 w = 432
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 432
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 9
count2 = 14
print boolean: 
bount = 14
1 1 0 0 1 0 1 1 0 1 0 0 1 1 
1 1 2 4 12 24 72 216 216 432 216 1512 432 432 
expansions = 3572
**********
p = 3572
prePre = 1488.29
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.96 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.76 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
0 1 0 1 1 0 1 0 0 
1 1 2 2 4 8 16 32 96 288 
expansions = 450
**********
p = 450
prePre = 1486.43
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.2 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.09 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
0 0 1 1 0 1 1 1 
1 1 2 2 4 4 8 16 48 144 
expansions = 230
**********
p = 230
prePre = 1484.18
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1481.63
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1479.2
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.29 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.94 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.12 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.16 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 180
180
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.65 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 252


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 252
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 252
w = 252
	Child: h = 6 g = 8 f = 14 w = 252
	is duplicate: h = 6 g = 8 f = 14
a = 0.45 prob = 0.777778
b = 1
		Added even though is duplicate.
		w = 324
324
	Child: h = 8 g = 8 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 252
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 504
504

PrintQueue
		 h = 6 g = 8 f = 14 w = 324
		 h = 8 g = 8 f = 16 w = 504


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 324
w = 324
	Child: h = 7 g = 9 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 324
	Child: h = 5 g = 9 f = 14 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 324

PrintQueue
		 h = 8 g = 8 f = 16 w = 504
		 h = 5 g = 9 f = 14 w = 324
		 h = 7 g = 9 f = 16 w = 324


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 504
w = 504
	Child: h = 7 g = 9 f = 16 w = 504
	is duplicate: h = 7 g = 9 f = 16
a = 0.64 prob = 0.608696
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 504
	is duplicate: h = 7 g = 9 f = 16
a = 0.2 prob = 0.378378
b = 1
		Added even though is duplicate.
		w = 1332
1332
	Child: h = 7 g = 9 f = 16 w = 504
	is duplicate: h = 7 g = 9 f = 16
a = 0.74 prob = 0.27451
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 324
		 h = 7 g = 9 f = 16 w = 1836


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 324
w = 324
	Child: h = 6 g = 10 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 324
	Child: h = 6 g = 10 f = 16 w = 324
	is duplicate: h = 6 g = 10 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 648
648

PrintQueue
		 h = 7 g = 9 f = 16 w = 1836
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1836
w = 1836
	Child: h = 6 g = 10 f = 16 w = 1836
	is duplicate: h = 6 g = 10 f = 16
a = 0 prob = 0.73913
b = 1
		Added even though is duplicate.
		w = 2484
2484
	Child: h = 8 g = 10 f = 18 w = 1836
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1836
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 2484


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 2484
w = 2484
	Child: h = 7 g = 11 f = 18 w = 2484
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 2484
		New node added
		child_node.getWeight() = 2484
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 2484

PrintQueue
		 h = 5 g = 11 f = 16 w = 2484


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 2484
w = 2484
	Child: h = 6 g = 12 f = 18 w = 2484
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 2484
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 14
count2 = 16
print boolean: 
bount = 18
1 1 0 1 1 0 1 1 1 0 1 1 1 0 1 0 1 1 
1 1 2 4 12 36 36 72 36 252 324 504 324 1836 2484 2484 
expansions = 8408
**********
p = 8408
prePre = 1491.55
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.08 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 9
1 0 0 1 1 0 1 1 1 
1 1 2 4 8 8 16 32 96 288 
expansions = 456
**********
p = 456
prePre = 1489.71
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1487.39
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1485.09
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1482.57
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 1 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1480.19
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.36 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 0 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1478.2
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 1 0 1 0 1 0 
1 1 2 2 4 8 16 32 64 128 
expansions = 258
**********
p = 258
prePre = 1476.06
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1473.57
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.36 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.93 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.46 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 0 0 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1471.9
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 1 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1469.58
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.2 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 288


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 288
w = 288
	Child: h = 7 g = 11 f = 18 w = 288
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 5 g = 11 f = 16 w = 288


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 288
w = 288
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 12
print boolean: 
bount = 9
1 0 0 1 1 1 1 1 0 
1 1 2 4 8 8 16 32 96 288 288 288 
expansions = 1032
**********
p = 1032
prePre = 1468.81
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 0 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1466.49
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 1 1 0 0 0 1 1 
1 1 2 2 4 8 24 48 96 192 
expansions = 378
**********
p = 378
prePre = 1464.59
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.39 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.59 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 1 0 1 0 0 1 0 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1464.75
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 0 0 0 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1462.82
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.64 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.47 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 1 0 0 0 0 1 1 
1 1 2 4 12 24 48 48 96 192 
expansions = 428
**********
p = 428
prePre = 1461.03
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.35 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.94 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 1 0 0 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1459.4
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 8 g = 9 f = 17 w = 144
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 288


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 288
w = 288
	Child: h = 5 g = 11 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 288
	Child: h = 5 g = 11 f = 16 w = 288
	is duplicate: h = 5 g = 11 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 11 f = 18 w = 288
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 576


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 576
w = 576
	Child: h = 6 g = 12 f = 18 w = 576
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 576
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 576
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 6
count2 = 12
print boolean: 
bount = 10
0 1 1 1 0 0 0 1 1 0 
1 1 2 2 4 8 24 48 144 288 288 576 
expansions = 1386
**********
p = 1386
prePre = 1459.27
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1456.87
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.17 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1296
1296

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 11
count2 = 10
print boolean: 
bount = 12
1 1 1 1 1 1 1 0 1 1 0 1 
1 1 2 4 12 36 108 216 648 1296 
expansions = 2324
**********
p = 2324
prePre = 1458.36
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1456.19
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 6 g = 8 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 216
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 5 g = 9 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 216

PrintQueue
		 h = 8 g = 8 f = 16 w = 432
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 216


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.03 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.05 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 1080
1080

PrintQueue
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 1080


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 216
w = 216
	Child: h = 6 g = 10 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 216
	Child: h = 6 g = 10 f = 16 w = 216
	is duplicate: h = 6 g = 10 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1080
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1080
w = 1080
	Child: h = 6 g = 10 f = 16 w = 1080
	is duplicate: h = 6 g = 10 f = 16
a = 0.15 prob = 0.714286
b = 1
		Added even though is duplicate.
		w = 1512
1512
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1512


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 1512
w = 1512
	Child: h = 7 g = 11 f = 18 w = 1512
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1512
		New node added
		child_node.getWeight() = 1512
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1512

PrintQueue
		 h = 5 g = 11 f = 16 w = 1512


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 1512
w = 1512
	Child: h = 6 g = 12 f = 18 w = 1512
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1512
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 10
count2 = 14
print boolean: 
bount = 14
1 1 0 0 1 1 1 1 0 0 1 1 0 1 
1 1 2 4 12 24 72 216 216 432 216 1080 1512 1512 
expansions = 5300
**********
p = 5300
prePre = 1462.78
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 0 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1460.73
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.93 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 1 0 0 0 0 1 0 
1 1 2 4 12 24 48 48 96 192 
expansions = 428
**********
p = 428
prePre = 1458.96
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.75 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.42 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 1 1 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1457.36
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 1 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1455.48
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.98 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 1 1 0 0 0 1 1 
1 1 2 2 4 8 24 48 96 192 
expansions = 378
**********
p = 378
prePre = 1453.65
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 6 g = 8 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.36 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 6 g = 8 f = 14 w = 144
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.142857
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.125
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.95 prob = 0.111111
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.1
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 144
		 h = 8 g = 8 f = 16 w = 720


End PrintQueue
10: Raiz: h = 6 g = 8 f = 14 w  = 144
w = 144
	Child: h = 5 g = 9 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 144
	Child: h = 5 g = 9 f = 14 w = 144
	is duplicate: h = 5 g = 9 f = 14
a = 0.85 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 8 g = 8 f = 16 w = 720
		 h = 5 g = 9 f = 14 w = 288
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
11: Raiz: h = 8 g = 8 f = 16 w  = 720
w = 720
	Child: h = 8 g = 9 f = 17 w = 720
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 720
	is duplicate: h = 7 g = 9 f = 16
a = 0.78 prob = 0.833333
b = 1
		Added even though is duplicate.
		w = 864
864
	Child: h = 7 g = 9 f = 16 w = 720
	is duplicate: h = 7 g = 9 f = 16
a = 0.81 prob = 0.454545
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 288
		 h = 7 g = 9 f = 16 w = 1584


End PrintQueue
12: Raiz: h = 5 g = 9 f = 14 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0.19 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 1584
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
13: Raiz: h = 7 g = 9 f = 16 w  = 1584
w = 1584
	Child: h = 8 g = 10 f = 18 w = 1584
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1584
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1584
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
14: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864
	Child: h = 5 g = 11 f = 16 w = 864
	is duplicate: h = 5 g = 11 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1728
1728
	Child: h = 7 g = 11 f = 18 w = 864
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 1728


End PrintQueue
15: Raiz: h = 5 g = 11 f = 16 w  = 1728
w = 1728
	Child: h = 4 g = 12 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 1728
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 1728


End PrintQueue
16: Raiz: h = 4 g = 12 f = 16 w  = 1728
w = 1728
	Child: h = 5 g = 13 f = 18 w = 1728
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 1728
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 10
count2 = 16
print boolean: 
bount = 20
1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 1 0 0 1 1 
1 1 2 4 12 24 72 144 72 144 720 288 1584 864 1728 1728 
expansions = 7388
**********
p = 7388
prePre = 1463.72
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1461.58
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 0 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1459.36
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.44 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1457.2
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 1 0 0 1 0 
1 1 2 4 8 16 32 32 64 128 
expansions = 288
**********
p = 288
prePre = 1455.23
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.36 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 288


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 288
w = 288
	Child: h = 7 g = 11 f = 18 w = 288
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 5 g = 11 f = 16 w = 288


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 288
w = 288
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 6
count2 = 12
print boolean: 
bount = 9
1 0 0 1 1 0 1 1 0 
1 1 2 4 8 8 16 32 96 288 288 288 
expansions = 1032
**********
p = 1032
prePre = 1454.52
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.3 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.5 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 6 g = 8 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 216
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 5 g = 9 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 216

PrintQueue
		 h = 8 g = 8 f = 16 w = 432
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 216


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.49 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 1080
1080

PrintQueue
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 1080


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 216
w = 216
	Child: h = 6 g = 10 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 216
	Child: h = 6 g = 10 f = 16 w = 216
	is duplicate: h = 6 g = 10 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 7 g = 9 f = 16 w = 1080
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1080
w = 1080
	Child: h = 6 g = 10 f = 16 w = 1080
	is duplicate: h = 6 g = 10 f = 16
a = 0.17 prob = 0.714286
b = 1
		Added even though is duplicate.
		w = 1512
1512
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1512


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 1512
w = 1512
	Child: h = 7 g = 11 f = 18 w = 1512
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1512
		New node added
		child_node.getWeight() = 1512
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1512

PrintQueue
		 h = 5 g = 11 f = 16 w = 1512


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 1512
w = 1512
	Child: h = 6 g = 12 f = 18 w = 1512
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1512
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 11
count2 = 14
print boolean: 
bount = 14
1 1 1 0 1 0 1 1 0 0 1 1 1 1 
1 1 2 4 12 24 72 216 216 432 216 1080 1512 1512 
expansions = 5300
**********
p = 5300
prePre = 1460.98
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1458.7
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.39 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.25 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.59 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 6 g = 8 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 6 g = 8 f = 14 w = 216
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 5 g = 9 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 216

PrintQueue
		 h = 8 g = 8 f = 16 w = 432
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 216


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.98 prob = 0.666667
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.88 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.86 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 1512


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 216
w = 216
	Child: h = 6 g = 10 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 216
	Child: h = 6 g = 10 f = 16 w = 216
	is duplicate: h = 6 g = 10 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 7 g = 9 f = 16 w = 1512
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1512
w = 1512
	Child: h = 6 g = 10 f = 16 w = 1512
	is duplicate: h = 6 g = 10 f = 16
a = 0.41 prob = 0.777778
b = 1
		Added even though is duplicate.
		w = 1944
1944
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1944


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 1944
w = 1944
	Child: h = 7 g = 11 f = 18 w = 1944
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1944
		New node added
		child_node.getWeight() = 1944
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1944

PrintQueue
		 h = 5 g = 11 f = 16 w = 1944


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 1944
w = 1944
	Child: h = 6 g = 12 f = 18 w = 1944
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1944
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 10
count2 = 14
print boolean: 
bount = 15
1 1 0 0 1 1 1 1 0 1 0 0 0 1 1 
1 1 2 4 12 24 72 216 216 432 216 1512 1944 1944 
expansions = 6596
**********
p = 6596
prePre = 1467.3
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.64 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.01 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 0 1 1 0 1 0 0 
1 1 2 2 4 4 8 16 48 144 
expansions = 230
**********
p = 230
prePre = 1465.23
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.82 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.75 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 1 0 1 1 0 0 0 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1465.39
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.64 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.28 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 6 g = 8 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 216
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 5 g = 9 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 216

PrintQueue
		 h = 8 g = 8 f = 16 w = 432
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 216


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.22 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.55 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 1080


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 216
w = 216
	Child: h = 6 g = 10 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 216
	Child: h = 6 g = 10 f = 16 w = 216
	is duplicate: h = 6 g = 10 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 7 g = 9 f = 16 w = 1080
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1080
w = 1080
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 432
w = 432
	Child: h = 7 g = 11 f = 18 w = 432
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 5 g = 11 f = 16 w = 432


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 432
w = 432
	Child: h = 6 g = 12 f = 18 w = 432
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 432
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 14
print boolean: 
bount = 13
1 1 0 0 1 0 1 1 0 0 1 0 1 
1 1 2 4 12 24 72 216 216 432 216 1080 432 432 
expansions = 3140
**********
p = 3140
prePre = 1468.18
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 128


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 128
w = 128
	Child: h = 7 g = 9 f = 16 w = 128
		New node added
		child_node.getWeight() = 128
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 1 0 1 0 0 
1 1 2 4 8 16 32 64 128 128 
expansions = 384
**********
p = 384
prePre = 1466.37
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 1 0 1 0 1 0 
1 1 2 2 4 8 16 32 64 128 
expansions = 258
**********
p = 258
prePre = 1464.37
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.96 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 1 0 0 0 0 1 1 
1 1 2 4 12 24 48 48 96 192 
expansions = 428
**********
p = 428
prePre = 1462.65
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.8 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 0 0 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1461.09
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 1 0 1 0 1 1 
1 1 2 2 4 8 16 32 64 128 
expansions = 258
**********
p = 258
prePre = 1459.1
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.69 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
1 0 0 1 1 1 0 1 
1 1 2 4 8 8 16 32 96 192 
expansions = 360
**********
p = 360
prePre = 1457.29
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.21 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.18 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 9
1 0 0 1 1 0 1 1 1 
1 1 2 4 8 8 16 32 96 288 
expansions = 456
**********
p = 456
prePre = 1455.64
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.3 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.7 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.79 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 0 1 1 1 1 0 0 
1 1 2 2 4 4 8 16 48 144 
expansions = 230
**********
p = 230
prePre = 1453.62
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1451.34
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1449.26
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.56 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.31 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 6 g = 8 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 144
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.65 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.59 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.71 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 504


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 504
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 504
w = 504
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 14
print boolean: 
bount = 12
0 1 1 0 1 1 0 1 1 0 0 0 
1 1 2 2 4 8 24 72 72 144 72 504 144 144 
expansions = 1194
**********
p = 1194
prePre = 1448.84
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.2 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.34 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 7 g = 9 f = 16 w = 216
	is duplicate: h = 7 g = 9 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 10
0 1 1 1 1 1 1 1 0 0 
1 1 2 2 4 8 24 72 216 432 
expansions = 762
**********
p = 762
prePre = 1447.72
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.62 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 288


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 288
w = 288
	Child: h = 7 g = 11 f = 18 w = 288
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 5 g = 11 f = 16 w = 288


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 288
w = 288
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 12
print boolean: 
bount = 9
0 1 0 1 1 1 1 1 0 
1 1 2 2 4 8 16 32 96 288 288 288 
expansions = 1026
**********
p = 1026
prePre = 1447.03
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1444.8
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 9
1 0 0 1 1 0 1 1 1 
1 1 2 4 8 8 16 32 96 288 
expansions = 456
**********
p = 456
prePre = 1443.19
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.77 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.6 prob = 0.25
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.55 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.166667
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 11
print boolean: 
bount = 12
1 1 1 0 0 1 0 1 0 0 0 0 
1 1 2 4 12 24 72 72 72 432 432 
expansions = 1124
**********
p = 1124
prePre = 1442.67
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.93 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 0 0 1 1 0 0 1 
1 1 2 4 8 8 16 32 96 192 
expansions = 360
**********
p = 360
prePre = 1440.92
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 128


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 128
w = 128
	Child: h = 7 g = 9 f = 16 w = 128
		New node added
		child_node.getWeight() = 128
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 1 0 1 0 0 
1 1 2 4 8 16 32 64 128 128 
expansions = 384
**********
p = 384
prePre = 1439.21
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1437.07
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
0 0 1 1 1 1 0 1 
1 1 2 2 4 4 8 16 48 144 
expansions = 230
**********
p = 230
prePre = 1435.12
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.29 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.69 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.37 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 576


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 576
w = 576
	Child: h = 8 g = 9 f = 17 w = 576
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 576
		New node added
		child_node.getWeight() = 576
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 576
	Child: h = 7 g = 9 f = 16 w = 576
	is duplicate: h = 7 g = 9 f = 16
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1152
1152

PrintQueue
		 h = 7 g = 9 f = 16 w = 1152


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1152
w = 1152
	Child: h = 6 g = 10 f = 16 w = 1152
		New node added
		child_node.getWeight() = 1152
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 1152
	Child: h = 8 g = 10 f = 18 w = 1152
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1152
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1152


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 1152
w = 1152
	Child: h = 5 g = 11 f = 16 w = 1152
		New node added
		child_node.getWeight() = 1152
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1152
	Child: h = 7 g = 11 f = 18 w = 1152
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 1152


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 1152
w = 1152
	Child: h = 6 g = 12 f = 18 w = 1152
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1152
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1152
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 12
print boolean: 
bount = 12
1 0 1 1 1 1 0 0 1 0 0 1 
1 1 2 4 8 16 48 144 576 1152 1152 1152 
expansions = 4256
**********
p = 4256
prePre = 1439.66
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.38 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.58 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 0 1 1 1 0 1 0 0 0 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1439.02
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1436.9
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 1 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1434.81
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 8 g = 8 f = 16 w = 128


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 128
w = 128
	Child: h = 7 g = 9 f = 16 w = 128
		New node added
		child_node.getWeight() = 128
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 128
	Child: h = 7 g = 9 f = 16 w = 128
	is duplicate: h = 7 g = 9 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 256


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 256
w = 256
	Child: h = 8 g = 10 f = 18 w = 256
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 256
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 0 1 0 1 0 1 0 
1 1 2 4 8 16 32 64 128 256 
expansions = 512
**********
p = 512
prePre = 1433.34
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 1 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1431.47
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.97 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1429.48
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.62 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.58 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 6 g = 10 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 7 g = 11 f = 18 w = 864
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864

PrintQueue
		 h = 5 g = 11 f = 16 w = 864


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 864
w = 864
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 12
print boolean: 
bount = 11
1 1 0 0 0 1 1 1 1 1 0 
1 1 2 4 12 24 48 96 288 864 864 864 
expansions = 3068
**********
p = 3068
prePre = 1432.09
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.04 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.94 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 324


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 324
w = 324
	Child: h = 8 g = 8 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 324
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 972
972
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 1296


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 9 f = 17 w = 1296
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 1296
		New node added
		child_node.getWeight() = 1296
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 1296
	Child: h = 7 g = 9 f = 16 w = 1296
	is duplicate: h = 7 g = 9 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2592
2592

PrintQueue
		 h = 7 g = 9 f = 16 w = 2592


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 2592
w = 2592
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 2592
		New node added
		child_node.getWeight() = 2592
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 2592
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 2592


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 2592
w = 2592
	Child: h = 6 g = 11 f = 17 w = 2592
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 7 g = 11 f = 18 w = 2592
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
count1 = 11
count2 = 11
print boolean: 
bount = 14
1 1 1 1 1 1 0 1 0 0 1 1 0 1 
1 1 2 4 12 36 108 324 1296 2592 2592 
expansions = 6968
**********
p = 6968
prePre = 1440.89
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.44 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 6 g = 10 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 6
count2 = 12
print boolean: 
bount = 8
0 0 1 1 1 1 1 0 
1 1 2 2 4 4 8 16 48 144 144 144 
expansions = 518
**********
p = 518
prePre = 1439.42
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.93 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.94 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 1 0 0 0 1 0 
1 1 2 2 4 8 24 48 96 192 
expansions = 378
**********
p = 378
prePre = 1437.74
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1435.56
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1433.54
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.45 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.78 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 9
count2 = 10
print boolean: 
bount = 12
1 1 1 0 1 1 0 1 1 1 0 0 
1 1 2 4 12 24 72 144 432 1296 
expansions = 1988
**********
p = 1988
prePre = 1434.41
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.04 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.42 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 6 g = 8 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 144
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.96 prob = 0.666667
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.79 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 360


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 360
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 360
w = 360
	Child: h = 6 g = 10 f = 16 w = 360
	is duplicate: h = 6 g = 10 f = 16
a = 0.62 prob = 0.714286
b = 1
		Added even though is duplicate.
		w = 504
504
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 504


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 504
w = 504
	Child: h = 7 g = 11 f = 18 w = 504
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 504
		New node added
		child_node.getWeight() = 504
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 504

PrintQueue
		 h = 5 g = 11 f = 16 w = 504


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 504
w = 504
	Child: h = 6 g = 12 f = 18 w = 504
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 504
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 14
print boolean: 
bount = 12
0 1 1 1 1 1 0 0 0 0 0 1 
1 1 2 2 4 8 24 72 72 144 72 360 504 504 
expansions = 1770
**********
p = 1770
prePre = 1434.94
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.62 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.14 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.07 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 11
1 0 1 1 0 0 1 0 1 1 1 
1 1 2 4 8 16 48 96 288 864 
expansions = 1328
**********
p = 1328
prePre = 1434.77
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1432.62
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.84 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.93 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 0 1 1 1 0 1 0 0 0 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1432
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 1 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1429.97
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 0 0 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1428.55
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1426.44
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 0 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1424.45
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.53 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.32 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.57 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.25 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 8 g = 9 f = 17 w = 648
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648

PrintQueue
		 h = 7 g = 9 f = 16 w = 648


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 648
w = 648
	Child: h = 8 g = 10 f = 18 w = 648
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 648
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 648
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 0 1 0 1 1 0 0 1 0 
1 1 2 4 12 36 108 216 648 648 
expansions = 1676
**********
p = 1676
prePre = 1424.84
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 8 g = 8 f = 16 w = 128


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 128
w = 128
	Child: h = 7 g = 9 f = 16 w = 128
		New node added
		child_node.getWeight() = 128
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 128
	Child: h = 7 g = 9 f = 16 w = 128
	is duplicate: h = 7 g = 9 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 256
256

PrintQueue
		 h = 7 g = 9 f = 16 w = 256


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 256
w = 256
	Child: h = 8 g = 10 f = 18 w = 256
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 256
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 256
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
1 0 1 0 1 0 1 1 
1 1 2 4 8 16 32 64 128 256 
expansions = 512
**********
p = 512
prePre = 1423.42
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.97 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.3 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 10
0 1 1 1 0 1 0 1 1 1 
1 1 2 2 4 8 24 48 144 432 
expansions = 666
**********
p = 666
prePre = 1422.25
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1420.28
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 1 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1418.63
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1416.68
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1414.73
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1412.71
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.92 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1296
1296

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 9
count2 = 10
print boolean: 
bount = 12
1 1 1 0 1 0 1 0 1 1 0 1 
1 1 2 4 12 24 72 216 648 1296 
expansions = 2276
**********
p = 2276
prePre = 1414.04
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.84 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.29 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.84 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.1 prob = 0.285714
b = 1
		Added even though is duplicate.
		w = 252
252

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 252


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 252
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 252
w = 252
	Child: h = 8 g = 8 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 252
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 504
504
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.97 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 756


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 756
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 756
w = 756
	Child: h = 7 g = 9 f = 16 w = 756
	is duplicate: h = 7 g = 9 f = 16
a = 0.39 prob = 0.913043
b = 1
		Added even though is duplicate.
		w = 828
828
	Child: h = 7 g = 9 f = 16 w = 756
	is duplicate: h = 7 g = 9 f = 16
a = 0.29 prob = 0.477273
b = 1
		Added even though is duplicate.
		w = 1584
1584

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 1584


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 1584
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1584
w = 1584
	Child: h = 8 g = 10 f = 18 w = 1584
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1584
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1584
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 14
count2 = 16
print boolean: 
bount = 16
1 1 1 1 1 0 1 1 0 1 1 1 0 1 1 1 
1 1 2 4 12 36 36 72 36 252 72 756 72 1584 144 144 
expansions = 3224
**********
p = 3224
prePre = 1416.81
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.77 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 1 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1415.44
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 1 0 0 0 
1 1 2 4 8 16 32 32 64 64 
expansions = 224
**********
p = 224
prePre = 1413.62
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.42 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.36 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.6 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.95 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 252


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 252
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 252
w = 252
	Child: h = 8 g = 8 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 252
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.62 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 756
756
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.32 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 1008


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 1008
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 1008
w = 1008
	Child: h = 8 g = 9 f = 17 w = 1008
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 1008
	is duplicate: h = 7 g = 9 f = 16
a = 0.68 prob = 0.933333
b = 1
		Added even though is duplicate.
		w = 1080
1080
	Child: h = 7 g = 9 f = 16 w = 1008
	is duplicate: h = 7 g = 9 f = 16
a = 0.6 prob = 0.482759
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 2088


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 2088
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 2088
w = 2088
	Child: h = 8 g = 10 f = 18 w = 2088
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2088
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2088
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2088
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 11
count2 = 16
print boolean: 
bount = 17
1 1 1 1 1 0 1 1 0 0 1 0 1 0 1 0 0 
1 1 2 4 12 36 36 72 36 252 72 1008 72 2088 144 144 
expansions = 3980
**********
p = 3980
prePre = 1417.54
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1415.53
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1413.5
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.55 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.19 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.46 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 8 g = 9 f = 17 w = 648
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648

PrintQueue
		 h = 7 g = 9 f = 16 w = 648


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 648
w = 648
	Child: h = 8 g = 10 f = 18 w = 648
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 648
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 648
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 11
1 1 0 1 1 1 1 0 0 1 0 
1 1 2 4 12 36 108 216 648 648 
expansions = 1676
**********
p = 1676
prePre = 1413.9
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1412.05
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 0 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1410.13
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1408.22
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.8 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 0 1 1 0 0 0 0 
1 1 2 4 8 16 48 96 192 192 
expansions = 560
**********
p = 560
prePre = 1406.94
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
1 1 0 0 0 1 0 1 0 
1 1 2 4 12 24 48 96 192 384 
expansions = 764
**********
p = 764
prePre = 1405.97
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1404.03
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1402.22
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.02 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.37 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 6 g = 10 f = 16 w = 1296
		New node added
		child_node.getWeight() = 1296
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1296


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 1296
w = 1296
	Child: h = 7 g = 11 f = 18 w = 1296
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1296
		New node added
		child_node.getWeight() = 1296
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1296

PrintQueue
		 h = 5 g = 11 f = 16 w = 1296


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 1296
w = 1296
	Child: h = 6 g = 12 f = 18 w = 1296
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1296
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 10
count2 = 12
print boolean: 
bount = 12
1 1 1 0 1 1 0 1 1 1 1 0 
1 1 2 4 12 24 72 144 432 1296 1296 1296 
expansions = 4580
**********
p = 4580
prePre = 1406.99
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1405.03
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 1 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1403.13
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.62 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 1 0 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1401.81
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1400.02
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.96 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 1 1 0 1 0 0 0 1 0 
1 1 2 4 12 24 72 144 288 576 
expansions = 1124
**********
p = 1124
prePre = 1399.61
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1397.82
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1395.9
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.79 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 0 0 1 1 0 0 0 
1 1 2 4 8 8 16 32 96 192 
expansions = 360
**********
p = 360
prePre = 1394.36
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.71 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.95 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.9 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.05 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.85 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.37 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 432
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 432
w = 432
	Child: h = 8 g = 8 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 432
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 8 g = 8 f = 16 w = 1728


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.22 prob = 0.0769231
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.8 prob = 0.0714286
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.34 prob = 0.0666667
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.0625
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.0588235
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 2448


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 2448
w = 2448
	Child: h = 8 g = 9 f = 17 w = 2448
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 2448
		New node added
		child_node.getWeight() = 2448
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 2448
	Child: h = 7 g = 9 f = 16 w = 2448
	is duplicate: h = 7 g = 9 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4896
4896

PrintQueue
		 h = 7 g = 9 f = 16 w = 4896


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 4896
w = 4896
	Child: h = 6 g = 10 f = 16 w = 4896
		New node added
		child_node.getWeight() = 4896
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 4896
	Child: h = 8 g = 10 f = 18 w = 4896
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 4896
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 4896


End PrintQueue
12: Raiz: h = 6 g = 10 f = 16 w  = 4896
w = 4896
	Child: h = 5 g = 11 f = 16 w = 4896
		New node added
		child_node.getWeight() = 4896
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 4896
	Child: h = 7 g = 11 f = 18 w = 4896
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 4896


End PrintQueue
13: Raiz: h = 5 g = 11 f = 16 w  = 4896
w = 4896
	Child: h = 6 g = 12 f = 18 w = 4896
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 4896
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 4896
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 13
print boolean: 
bount = 20
1 1 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 
1 1 2 4 12 36 144 432 144 2448 4896 4896 4896 
expansions = 17912
**********
p = 17912
prePre = 1418.83
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.06 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.75 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.37 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 7 g = 9 f = 16 w = 216
	is duplicate: h = 7 g = 9 f = 16
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 10
0 1 1 1 1 1 1 0 0 0 
1 1 2 2 4 8 24 72 216 432 
expansions = 762
**********
p = 762
prePre = 1417.86
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1415.88
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1414.01
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.02 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.46 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.59 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.33 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 648
648

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1296
1296
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.09 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 1944
1944

PrintQueue
		 h = 7 g = 9 f = 16 w = 1944


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1944
w = 1944
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 11
count2 = 10
print boolean: 
bount = 13
1 1 1 1 1 1 0 0 1 0 1 1 1 
1 1 2 4 12 36 108 216 648 1944 
expansions = 2972
**********
p = 2972
prePre = 1416.31
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.81 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 288


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 288
w = 288
	Child: h = 7 g = 11 f = 18 w = 288
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 5 g = 11 f = 16 w = 288


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 288
w = 288
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 12
print boolean: 
bount = 9
1 0 0 1 1 1 1 1 0 
1 1 2 4 8 8 16 32 96 288 288 288 
expansions = 1032
**********
p = 1032
prePre = 1415.74
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 0 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1413.88
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.69 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 0 1 1 1 0 1 0 0 0 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1413.33
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1411.35
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.74 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.65 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.16 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 9
count2 = 10
print boolean: 
bount = 11
1 1 0 0 0 1 1 1 1 1 1 
1 1 2 4 12 24 48 96 288 864 
expansions = 1340
**********
p = 1340
prePre = 1411.25
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1409.28
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1407.51
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.76 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.5 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 8 g = 9 f = 17 w = 144
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 288


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 288
w = 288
	Child: h = 5 g = 11 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 288
	Child: h = 5 g = 11 f = 16 w = 288
	is duplicate: h = 5 g = 11 f = 16
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 7 g = 11 f = 18 w = 288
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 576


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 576
w = 576
	Child: h = 4 g = 12 f = 16 w = 576
		New node added
		child_node.getWeight() = 576
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 576
	Child: h = 6 g = 12 f = 18 w = 576
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 576
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 576


End PrintQueue
13: Raiz: h = 4 g = 12 f = 16 w  = 576
w = 576
	Child: h = 5 g = 13 f = 18 w = 576
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 576
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 7
count2 = 13
print boolean: 
bount = 10
0 1 1 1 0 0 0 1 1 1 
1 1 2 2 4 8 24 48 144 288 288 576 576 
expansions = 1962
**********
p = 1962
prePre = 1408.31
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1406.36
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1404.43
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1402.56
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1400.81
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.48 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 1 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1399.3
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 1 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1397.49
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.37 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 0 0 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1396.23
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 1 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1394.73
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 1 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1393.23
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 0 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1391.44
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.55 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.93 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.83 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 252


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 252
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 252
w = 252
	Child: h = 8 g = 8 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 252
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 1008


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 1008
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 1008
w = 1008
	Child: h = 7 g = 9 f = 16 w = 1008
	is duplicate: h = 7 g = 9 f = 16
a = 0.06 prob = 0.933333
b = 1
		Added even though is duplicate.
		w = 1080
1080
	Child: h = 7 g = 9 f = 16 w = 1008
	is duplicate: h = 7 g = 9 f = 16
a = 0.86 prob = 0.482759
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 1008
	is duplicate: h = 7 g = 9 f = 16
a = 0.47 prob = 0.325581
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 3096


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 3096
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 3096
w = 3096
	Child: h = 8 g = 10 f = 18 w = 3096
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3096
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3096
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3096
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 11
count2 = 16
print boolean: 
bount = 18
1 1 1 1 1 0 1 1 0 0 1 0 0 0 1 0 0 1 
1 1 2 4 12 36 36 72 36 252 72 1008 72 3096 144 144 
expansions = 4988
**********
p = 4988
prePre = 1396.6
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.93 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
1 1 0 0 0 0 0 
1 1 2 4 12 24 48 48 96 96 
expansions = 332
**********
p = 332
prePre = 1395.07
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 1 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1393.46
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.61 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.01 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 7 g = 9 f = 16 w = 216
	is duplicate: h = 7 g = 9 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 10
0 1 1 1 1 0 1 1 0 0 
1 1 2 2 4 8 24 72 216 432 
expansions = 762
**********
p = 762
prePre = 1392.56
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 0 0 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1391.32
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.88 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.81 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 0 0 0 0 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1390.08
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 1 0 0 0 
1 1 2 4 8 16 32 32 64 64 
expansions = 224
**********
p = 224
prePre = 1388.42
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
1 0 1 1 0 0 0 1 0 
1 1 2 4 8 16 48 96 192 384 
expansions = 752
**********
p = 752
prePre = 1387.52
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1385.83
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1383.96
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 128


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 128
w = 128
	Child: h = 7 g = 9 f = 16 w = 128
		New node added
		child_node.getWeight() = 128
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 1 0 1 0 0 
1 1 2 4 8 16 32 64 128 128 
expansions = 384
**********
p = 384
prePre = 1382.55
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 1 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1380.78
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.38 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.84 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 10
1 1 1 0 0 0 0 0 1 0 
1 1 2 4 12 24 72 144 432 432 
expansions = 1124
**********
p = 1124
prePre = 1380.42
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.48 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 1 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1378.98
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.33 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.54 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 0 1 1 1 1 0 0 
1 1 2 2 4 4 8 16 48 144 
expansions = 230
**********
p = 230
prePre = 1377.37
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.96 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.35 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 1 0 0 0 1 1 1 0 0 
1 1 2 4 12 24 48 96 288 576 
expansions = 1052
**********
p = 1052
prePre = 1376.91
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1375.15
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.81 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.73 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 1 0 0 0 0 1 1 
1 1 2 4 12 24 48 48 96 192 
expansions = 428
**********
p = 428
prePre = 1373.82
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.81 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 384
384

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
1 0 1 0 1 1 0 0 1 
1 1 2 4 8 16 32 64 192 384 
expansions = 704
**********
p = 704
prePre = 1372.89
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.05 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.25 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 324
324

PrintQueue
		 h = 7 g = 7 f = 14 w = 324


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 324
w = 324
	Child: h = 8 g = 8 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 324
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.93 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 972


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 972
w = 972
	Child: h = 7 g = 9 f = 16 w = 972
		New node added
		child_node.getWeight() = 972
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 972
	Child: h = 7 g = 9 f = 16 w = 972
	is duplicate: h = 7 g = 9 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1944
1944

PrintQueue
		 h = 7 g = 9 f = 16 w = 1944


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1944
w = 1944
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 12
count2 = 10
print boolean: 
bount = 13
1 1 1 1 1 1 1 1 1 1 0 0 1 
1 1 2 4 12 36 108 324 972 1944 
expansions = 3404
**********
p = 3404
prePre = 1375.72
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1373.97
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.64 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.14 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 6 g = 8 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 6 g = 8 f = 14 w = 216
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 5 g = 9 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 216

PrintQueue
		 h = 8 g = 8 f = 16 w = 432
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 216


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.93 prob = 0.666667
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.49 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.98 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 1512


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 216
w = 216
	Child: h = 6 g = 10 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 216
	Child: h = 6 g = 10 f = 16 w = 216
	is duplicate: h = 6 g = 10 f = 16
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1512
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1512
w = 1512
	Child: h = 6 g = 10 f = 16 w = 1512
	is duplicate: h = 6 g = 10 f = 16
a = 0.51 prob = 0.777778
b = 1
		Added even though is duplicate.
		w = 1944
1944
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1944


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 1944
w = 1944
	Child: h = 7 g = 11 f = 18 w = 1944
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1944
		New node added
		child_node.getWeight() = 1944
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1944

PrintQueue
		 h = 5 g = 11 f = 16 w = 1944


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 1944
w = 1944
	Child: h = 6 g = 12 f = 18 w = 1944
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1944
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 9
count2 = 14
print boolean: 
bount = 15
1 1 1 0 1 0 1 1 0 1 0 0 0 0 1 
1 1 2 4 12 24 72 216 216 432 216 1512 1944 1944 
expansions = 6596
**********
p = 6596
prePre = 1381.24
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
1 0 0 1 1 1 0 1 
1 1 2 4 8 8 16 32 96 192 
expansions = 360
**********
p = 360
prePre = 1379.82
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1378.04
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.21 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 9
count2 = 10
print boolean: 
bount = 12
1 1 1 0 1 1 0 1 1 1 0 0 
1 1 2 4 12 24 72 144 432 1296 
expansions = 1988
**********
p = 1988
prePre = 1378.89
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.99 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.7 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.84 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.79 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.46 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 11
1 1 0 0 1 0 0 1 0 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1379.13
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 8 g = 8 f = 16 w = 128


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 128
w = 128
	Child: h = 7 g = 9 f = 16 w = 128
		New node added
		child_node.getWeight() = 128
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 128
	Child: h = 7 g = 9 f = 16 w = 128
	is duplicate: h = 7 g = 9 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 256


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 256
w = 256
	Child: h = 8 g = 10 f = 18 w = 256
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 256
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 0 1 0 1 0 1 0 
1 1 2 4 8 16 32 64 128 256 
expansions = 512
**********
p = 512
prePre = 1377.94
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.84 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.22 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.166667
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 11
print boolean: 
bount = 12
1 1 1 0 0 1 0 1 0 1 0 0 
1 1 2 4 12 24 72 72 72 432 432 
expansions = 1124
**********
p = 1124
prePre = 1377.59
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.91 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.76 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
1 1 0 0 0 0 0 
1 1 2 4 12 24 48 48 96 96 
expansions = 332
**********
p = 332
prePre = 1376.15
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 1 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1374.44
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1372.66
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.74 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.19 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 0 0 1 1 0 0 1 1 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1372.91
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 0 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1371.24
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.69 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.29 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.68 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 6 g = 8 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 216
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 5 g = 9 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 216

PrintQueue
		 h = 8 g = 8 f = 16 w = 432
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 216


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.54 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.94 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 1080


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 216
w = 216
	Child: h = 6 g = 10 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 216
	Child: h = 6 g = 10 f = 16 w = 216
	is duplicate: h = 6 g = 10 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1080
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1080
w = 1080
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 432
w = 432
	Child: h = 5 g = 11 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 5 g = 11 f = 16 w = 432


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 432
w = 432
	Child: h = 6 g = 12 f = 18 w = 432
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 432
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 14
print boolean: 
bount = 13
1 1 0 0 1 1 1 1 0 0 1 0 0 
1 1 2 4 12 24 72 216 216 432 216 1080 432 432 
expansions = 3140
**********
p = 3140
prePre = 1373.66
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 0 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1372.03
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.91 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.95 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 6 g = 10 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 7 g = 11 f = 18 w = 864
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864

PrintQueue
		 h = 5 g = 11 f = 16 w = 864


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 864
w = 864
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 12
print boolean: 
bount = 11
1 1 0 0 0 1 1 1 1 1 0 
1 1 2 4 12 24 48 96 288 864 864 864 
expansions = 3068
**********
p = 3068
prePre = 1374.34
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1372.55
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.96 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.69 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 0 0 1 1 0 0 1 
1 1 2 4 8 8 16 32 96 192 
expansions = 360
**********
p = 360
prePre = 1371.18
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.5 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.82 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 0 1 1 1 0 1 0 0 0 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1370.73
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1369
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.69 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1367.4
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 0 0 0 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1366.02
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.95 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.42 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 11
1 1 1 0 1 1 0 1 1 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1366.28
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.18 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.55 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.94 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 648
648

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1296
1296
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 1944
1944

PrintQueue
		 h = 7 g = 9 f = 16 w = 1944


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1944
w = 1944
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1944
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 9
count2 = 10
print boolean: 
bount = 13
1 1 0 1 0 1 0 0 1 0 1 1 1 
1 1 2 4 12 36 108 216 648 1944 
expansions = 2972
**********
p = 2972
prePre = 1368.45
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.62 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.94 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.32 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.39 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 10
0 1 1 0 0 1 0 1 0 0 
1 1 2 2 4 8 24 48 144 432 
expansions = 666
**********
p = 666
prePre = 1367.5
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 1 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1365.86
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.38 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
0 1 1 0 0 0 0 
1 1 2 2 4 8 24 48 96 96 
expansions = 282
**********
p = 282
prePre = 1364.4
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.18 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.39 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.8 prob = 0.666667
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.06 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 180
180

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 180


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 180
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 180
w = 180
	Child: h = 6 g = 8 f = 14 w = 180
	is duplicate: h = 6 g = 8 f = 14
a = 0.05 prob = 0.714286
b = 1
		Added even though is duplicate.
		w = 252
252
	Child: h = 8 g = 8 f = 16 w = 180
		New node added
		child_node.getWeight() = 180
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 180
	Child: h = 8 g = 8 f = 16 w = 180
	is duplicate: h = 8 g = 8 f = 16
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 360
360

PrintQueue
		 h = 6 g = 8 f = 14 w = 252
		 h = 8 g = 8 f = 16 w = 360


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 252
w = 252
	Child: h = 7 g = 9 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 252
	Child: h = 5 g = 9 f = 14 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 252

PrintQueue
		 h = 8 g = 8 f = 16 w = 360
		 h = 5 g = 9 f = 14 w = 252
		 h = 7 g = 9 f = 16 w = 252


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 360
w = 360
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.05 prob = 0.588235
b = 1
		Added even though is duplicate.
		w = 612
612
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.13 prob = 0.37037
b = 1
		Added even though is duplicate.
		w = 972
972
	Child: h = 7 g = 9 f = 16 w = 360
	is duplicate: h = 7 g = 9 f = 16
a = 0.66 prob = 0.27027
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 252
		 h = 7 g = 9 f = 16 w = 1332


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 252
w = 252
	Child: h = 6 g = 10 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 252
	Child: h = 6 g = 10 f = 16 w = 252
	is duplicate: h = 6 g = 10 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1332
		 h = 6 g = 10 f = 16 w = 504


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1332
w = 1332
	Child: h = 6 g = 10 f = 16 w = 1332
	is duplicate: h = 6 g = 10 f = 16
a = 0.48 prob = 0.72549
b = 1
		Added even though is duplicate.
		w = 1836
1836
	Child: h = 8 g = 10 f = 18 w = 1332
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1332
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1836


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 1836
w = 1836
	Child: h = 7 g = 11 f = 18 w = 1836
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1836
		New node added
		child_node.getWeight() = 1836
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1836

PrintQueue
		 h = 5 g = 11 f = 16 w = 1836


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 1836
w = 1836
	Child: h = 6 g = 12 f = 18 w = 1836
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1836
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 12
count2 = 16
print boolean: 
bount = 17
1 1 0 1 1 0 0 0 1 1 1 1 1 1 0 0 1 
1 1 2 4 12 36 36 72 36 180 252 360 252 1332 1836 1836 
expansions = 6248
**********
p = 6248
prePre = 1370.96
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1369.32
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.58 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1367.73
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 1 0 1 0 1 1 
1 1 2 2 4 8 16 32 64 128 
expansions = 258
**********
p = 258
prePre = 1366.25
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1364.53
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.16 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.68 prob = 0.666667
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.42 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.11 prob = 0.285714
b = 1
		Added even though is duplicate.
		w = 252
252

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 252


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 252
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 252
w = 252
	Child: h = 8 g = 8 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 252
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.88 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 756


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 756
		 h = 5 g = 9 f = 14 w = 72


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 756
w = 756
	Child: h = 7 g = 9 f = 16 w = 756
		New node added
		child_node.getWeight() = 756
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 756
	Child: h = 7 g = 9 f = 16 w = 756
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1512
1512

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 1512


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 1512
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1512
w = 1512
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 10
count2 = 16
print boolean: 
bount = 15
1 1 1 1 1 0 1 0 0 1 0 0 0 1 1 
1 1 2 4 12 36 36 72 36 252 72 756 72 1512 144 144 
expansions = 3152
**********
p = 3152
prePre = 1366.91
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1365.17
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.3 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.89 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.6 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.6 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 6 g = 10 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 7 g = 11 f = 18 w = 864
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864

PrintQueue
		 h = 5 g = 11 f = 16 w = 864


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 864
w = 864
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 6
count2 = 12
print boolean: 
bount = 12
0 1 1 1 1 0 0 0 0 0 1 0 
1 1 2 2 4 8 24 72 288 864 864 864 
expansions = 2994
**********
p = 2994
prePre = 1367.34
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.44 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 0 0 0 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1365.99
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1364.32
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1362.59
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1360.87
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 1 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1359.25
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 1 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1357.93
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.86 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.73 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.12 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.8 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 180


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 180
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 180
w = 180
	Child: h = 8 g = 8 f = 16 w = 180
		New node added
		child_node.getWeight() = 180
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 180
	Child: h = 8 g = 8 f = 16 w = 180
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 360
360
	Child: h = 8 g = 8 f = 16 w = 180
	is duplicate: h = 8 g = 8 f = 16
a = 0.33 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 540
540

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 540


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 540
		 h = 5 g = 9 f = 14 w = 72


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 540
w = 540
	Child: h = 8 g = 9 f = 17 w = 540
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 540
		New node added
		child_node.getWeight() = 540
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 540
	Child: h = 7 g = 9 f = 16 w = 540
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1080
1080

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 1080


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1080
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1080
w = 1080
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 1080
	is duplicate: h = 6 g = 10 f = 16
a = 0.88 prob = 0.882353
b = 1
		Added even though is duplicate.
		w = 1224
1224
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1224


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 1224
w = 1224
	Child: h = 6 g = 11 f = 17 w = 1224
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 7 g = 11 f = 18 w = 1224
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1224
		New node added
		child_node.getWeight() = 1224
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1224

PrintQueue
		 h = 5 g = 11 f = 16 w = 1224


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 1224
w = 1224
	Child: h = 4 g = 12 f = 16 w = 1224
		New node added
		child_node.getWeight() = 1224
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 1224
	Child: h = 6 g = 12 f = 18 w = 1224
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1224
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 1224


End PrintQueue
17: Raiz: h = 4 g = 12 f = 16 w  = 1224
w = 1224
	Child: h = 5 g = 13 f = 18 w = 1224
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 1224
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 10
count2 = 17
print boolean: 
bount = 15
1 1 0 1 1 0 0 1 0 0 1 1 1 0 1 
1 1 2 4 12 36 36 72 36 180 72 540 72 1080 1224 1224 1224 
expansions = 5816
**********
p = 5816
prePre = 1363.8
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.29 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.69 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 7 g = 9 f = 16 w = 216
	is duplicate: h = 7 g = 9 f = 16
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
0 1 1 1 1 0 1 0 0 0 
1 1 2 2 4 8 24 72 216 432 
expansions = 762
**********
p = 762
prePre = 1363.01
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 1 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1361.56
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.39 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1296
1296

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 10
count2 = 10
print boolean: 
bount = 12
1 1 1 1 1 1 1 0 1 0 0 1 
1 1 2 4 12 36 108 216 648 1296 
expansions = 2324
**********
p = 2324
prePre = 1362.83
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.76 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.94 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.79 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 1 0 1 1 0 1 0 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1363.08
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1361.45
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1359.8
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 128


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 128
w = 128
	Child: h = 7 g = 9 f = 16 w = 128
		New node added
		child_node.getWeight() = 128
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 1 0 1 0 0 
1 1 2 4 8 16 32 64 128 128 
expansions = 384
**********
p = 384
prePre = 1358.52
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 1 0 1 0 1 0 
1 1 2 2 4 8 16 32 64 128 
expansions = 258
**********
p = 258
prePre = 1357.09
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1355.48
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.48 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.93 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 6 g = 10 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 7 g = 11 f = 18 w = 864
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864

PrintQueue
		 h = 5 g = 11 f = 16 w = 864


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 864
w = 864
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 9
count2 = 12
print boolean: 
bount = 11
1 0 1 1 1 0 1 1 1 1 0 
1 1 2 4 8 16 48 96 288 864 864 864 
expansions = 3056
**********
p = 3056
prePre = 1357.69
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
1 0 1 0 0 1 1 
1 1 2 4 8 16 32 32 64 128 
expansions = 288
**********
p = 288
prePre = 1356.3
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.95 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 384
384

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 9
1 0 1 0 1 1 1 0 1 
1 1 2 4 8 16 32 64 192 384 
expansions = 704
**********
p = 704
prePre = 1355.46
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 6 g = 8 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 144
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.14 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 360
360
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.19 prob = 0.285714
b = 1
		Added even though is duplicate.
		w = 504
504

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 504


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 504
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 504
w = 504
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 11
count2 = 14
print boolean: 
bount = 12
0 1 1 1 1 1 0 1 1 1 1 1 
1 1 2 2 4 8 24 72 72 144 72 504 144 144 
expansions = 1194
**********
p = 1194
prePre = 1355.25
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.97 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 1 0 0 0 0 1 1 
1 1 2 4 12 24 48 48 96 192 
expansions = 428
**********
p = 428
prePre = 1354.05
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.56 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 384
384

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
1 1 0 0 0 1 0 1 1 
1 1 2 4 12 24 48 96 192 384 
expansions = 764
**********
p = 764
prePre = 1353.28
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.32 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.72 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.18 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.81 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 432
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 432
w = 432
	Child: h = 8 g = 8 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 432
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 1296
1296
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 1728
1728

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 8 g = 8 f = 16 w = 1728


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.58 prob = 0.0769231
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.75 prob = 0.0714286
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.04 prob = 0.0666667
b = 1
		Added even though is duplicate.
		w = 2160
2160
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.28 prob = 0.0625
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.0588235
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 2448


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 2448
w = 2448
	Child: h = 8 g = 9 f = 17 w = 2448
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 2448
		New node added
		child_node.getWeight() = 2448
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 2448
	Child: h = 7 g = 9 f = 16 w = 2448
	is duplicate: h = 7 g = 9 f = 16
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4896
4896
	Child: h = 7 g = 9 f = 16 w = 2448
	is duplicate: h = 7 g = 9 f = 16
a = 0.96 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 7344


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 7344
w = 7344
	Child: h = 8 g = 10 f = 18 w = 7344
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 7344
		New node added
		child_node.getWeight() = 7344
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 7344
	Child: h = 8 g = 10 f = 18 w = 7344
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 7344
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 7344


End PrintQueue
12: Raiz: h = 6 g = 10 f = 16 w  = 7344
w = 7344
	Child: h = 6 g = 11 f = 17 w = 7344
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 7 g = 11 f = 18 w = 7344
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 7344
		New node added
		child_node.getWeight() = 7344
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 7344

PrintQueue
		 h = 5 g = 11 f = 16 w = 7344


End PrintQueue
13: Raiz: h = 5 g = 11 f = 16 w  = 7344
w = 7344
	Child: h = 4 g = 12 f = 16 w = 7344
		New node added
		child_node.getWeight() = 7344
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 7344
	Child: h = 6 g = 12 f = 18 w = 7344
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 7344
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 7344


End PrintQueue
14: Raiz: h = 4 g = 12 f = 16 w  = 7344
w = 7344
	Child: h = 5 g = 13 f = 18 w = 7344
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 7344
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 10
count2 = 14
print boolean: 
bount = 21
1 1 0 1 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 1 0 
1 1 2 4 12 36 144 432 144 2448 7344 7344 7344 7344 
expansions = 32600
**********
p = 32600
prePre = 1393.6
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1391.91
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.64 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.74 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 0 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1390.79
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 1 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1389.34
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1387.66
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1386.13
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1384.44
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1382.81
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.94 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 1 0 0 0 0 1 1 
1 1 2 4 12 24 48 48 96 192 
expansions = 428
**********
p = 428
prePre = 1381.59
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1379.93
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.83 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.4 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
0 1 1 0 0 0 0 
1 1 2 2 4 8 24 48 96 96 
expansions = 282
**********
p = 282
prePre = 1378.53
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1376.88
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 0 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1375.58
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 0 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1374.03
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1372.53
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1371.04
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.53 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 0 1 1 0 0 0 0 
1 1 2 4 8 16 48 96 192 192 
expansions = 560
**********
p = 560
prePre = 1370.01
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1368.38
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 0 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1366.89
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.46 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 1 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1365.61
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 1 0 0 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1364.55
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.62 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.97 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 1 0 0 0 1 0 0 
1 1 2 4 12 24 48 96 192 192 
expansions = 572
**********
p = 572
prePre = 1363.55
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.53 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.7 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.44 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 8 g = 9 f = 17 w = 288
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 576
		New node added
		child_node.getWeight() = 576
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 576


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 576
w = 576
	Child: h = 6 g = 11 f = 17 w = 576
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 7 g = 11 f = 18 w = 576
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
count1 = 7
count2 = 11
print boolean: 
bount = 11
0 1 1 1 1 0 0 0 1 0 1 
1 1 2 2 4 8 24 72 288 576 576 
expansions = 1554
**********
p = 1554
prePre = 1363.79
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
0 1 1 0 0 0 0 
1 1 2 2 4 8 24 48 96 96 
expansions = 282
**********
p = 282
prePre = 1362.44
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 0 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1360.92
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1359.45
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1357.85
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.81 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.94 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.166667
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 11
print boolean: 
bount = 13
1 1 1 0 0 1 0 1 0 1 0 1 0 
1 1 2 4 12 24 72 72 72 432 864 
expansions = 1556
**********
p = 1556
prePre = 1358.09
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.74 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.5 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.45 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 7 f = 14 w = 288
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 288
w = 288
	Child: h = 6 g = 8 f = 14 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 288
	Child: h = 8 g = 8 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 6 g = 8 f = 14 w = 288
		 h = 8 g = 8 f = 16 w = 576


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.22 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.166667
b = 1
		Added even though is duplicate.
		w = 864
864
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.142857
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.125
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 288
		 h = 8 g = 8 f = 16 w = 1152


End PrintQueue
10: Raiz: h = 6 g = 8 f = 14 w  = 288
w = 288
	Child: h = 5 g = 9 f = 14 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 8 g = 8 f = 16 w = 1152
		 h = 5 g = 9 f = 14 w = 288
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
11: Raiz: h = 8 g = 8 f = 16 w  = 1152
w = 1152
	Child: h = 8 g = 9 f = 17 w = 1152
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 1152
	is duplicate: h = 7 g = 9 f = 16
a = 0.09 prob = 0.8
b = 1
		Added even though is duplicate.
		w = 1440
1440
	Child: h = 7 g = 9 f = 16 w = 1152
	is duplicate: h = 7 g = 9 f = 16
a = 0.38 prob = 0.444444
b = 1
		Added even though is duplicate.
		w = 2592
2592

PrintQueue
		 h = 5 g = 9 f = 14 w = 288
		 h = 7 g = 9 f = 16 w = 2592


End PrintQueue
12: Raiz: h = 5 g = 9 f = 14 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0.28 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 2592
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
13: Raiz: h = 7 g = 9 f = 16 w  = 2592
w = 2592
	Child: h = 6 g = 10 f = 16 w = 2592
	is duplicate: h = 6 g = 10 f = 16
a = 0.17 prob = 0.75
b = 1
		Added even though is duplicate.
		w = 3456
3456
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 3456


End PrintQueue
14: Raiz: h = 6 g = 10 f = 16 w  = 3456
w = 3456
	Child: h = 5 g = 11 f = 16 w = 3456
		New node added
		child_node.getWeight() = 3456
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 3456
	Child: h = 7 g = 11 f = 18 w = 3456
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 3456


End PrintQueue
15: Raiz: h = 5 g = 11 f = 16 w  = 3456
w = 3456
	Child: h = 4 g = 12 f = 16 w = 3456
		New node added
		child_node.getWeight() = 3456
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 3456
	Child: h = 6 g = 12 f = 18 w = 3456
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 3456


End PrintQueue
16: Raiz: h = 4 g = 12 f = 16 w  = 3456
w = 3456
	Child: h = 5 g = 13 f = 18 w = 3456
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 13
count2 = 16
print boolean: 
bount = 20
1 1 0 1 0 0 1 0 0 1 1 0 1 0 0 1 1 1 1 1 
1 1 2 4 12 36 144 288 144 288 1152 288 2592 3456 3456 3456 
expansions = 15320
**********
p = 15320
prePre = 1375.48
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1373.91
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.61 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.62 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 1 0 0 0 1 0 
1 1 2 2 4 8 24 48 96 192 
expansions = 378
**********
p = 378
prePre = 1372.68
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1371.05
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
0 1 0 1 1 1 1 0 0 
1 1 2 2 4 8 16 32 96 288 
expansions = 450
**********
p = 450
prePre = 1369.91
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.73 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.54 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 11
1 1 1 0 0 0 0 1 0 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1370.14
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.01 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.18 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.52 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.71 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 648


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 648
w = 648
	Child: h = 7 g = 9 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 648
	Child: h = 7 g = 9 f = 16 w = 648
	is duplicate: h = 7 g = 9 f = 16
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 12
1 1 0 1 1 1 1 0 1 0 0 0 
1 1 2 4 12 36 108 216 648 1296 
expansions = 2324
**********
p = 2324
prePre = 1371.32
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.93 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.79 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 9
count2 = 10
print boolean: 
bount = 11
1 1 1 0 1 1 0 1 1 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1371.55
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
1 0 1 0 0 1 1 
1 1 2 4 8 16 32 32 64 128 
expansions = 288
**********
p = 288
prePre = 1370.21
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1368.62
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 8 g = 8 f = 16 w = 128


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 128
w = 128
	Child: h = 7 g = 9 f = 16 w = 128
		New node added
		child_node.getWeight() = 128
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 128
	Child: h = 7 g = 9 f = 16 w = 128
	is duplicate: h = 7 g = 9 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 256


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 256
w = 256
	Child: h = 8 g = 10 f = 18 w = 256
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 256
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
1 0 1 0 1 0 1 0 
1 1 2 4 8 16 32 64 128 256 
expansions = 512
**********
p = 512
prePre = 1367.56
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.3 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.72 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.4 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.71 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.71 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 7 f = 14 w = 288
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 288
w = 288
	Child: h = 6 g = 8 f = 14 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 288
	Child: h = 8 g = 8 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 6 g = 8 f = 14 w = 288
		 h = 8 g = 8 f = 16 w = 576


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.46 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.62 prob = 0.166667
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.07 prob = 0.142857
b = 1
		Added even though is duplicate.
		w = 1008
1008
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.33 prob = 0.125
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 288
		 h = 8 g = 8 f = 16 w = 1152


End PrintQueue
10: Raiz: h = 6 g = 8 f = 14 w  = 288
w = 288
	Child: h = 5 g = 9 f = 14 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 8 g = 8 f = 16 w = 1152
		 h = 5 g = 9 f = 14 w = 288
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
11: Raiz: h = 8 g = 8 f = 16 w  = 1152
w = 1152
	Child: h = 8 g = 9 f = 17 w = 1152
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 1152
	is duplicate: h = 7 g = 9 f = 16
a = 0.76 prob = 0.8
b = 1
		Added even though is duplicate.
		w = 1440
1440
	Child: h = 7 g = 9 f = 16 w = 1152
	is duplicate: h = 7 g = 9 f = 16
a = 0.87 prob = 0.444444
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 288
		 h = 7 g = 9 f = 16 w = 2592


End PrintQueue
12: Raiz: h = 5 g = 9 f = 14 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0.84 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 2592
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
13: Raiz: h = 7 g = 9 f = 16 w  = 2592
w = 2592
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
14: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864
	Child: h = 5 g = 11 f = 16 w = 864
	is duplicate: h = 5 g = 11 f = 16
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 5 g = 11 f = 16 w = 1728


End PrintQueue
15: Raiz: h = 5 g = 11 f = 16 w  = 1728
w = 1728
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 10
count2 = 15
print boolean: 
bount = 20
1 1 0 1 0 0 1 0 0 1 1 0 0 1 0 1 0 1 0 0 
1 1 2 4 12 36 144 288 144 288 1152 288 2592 864 1728 
expansions = 7544
**********
p = 7544
prePre = 1375.15
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 0 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1373.63
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1372.04
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1370.44
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.55 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.51 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.53 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 1 0 0 1 1 0 0 1 0 
1 1 2 4 12 24 72 144 432 432 
expansions = 1124
**********
p = 1124
prePre = 1370.14
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.38 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.11 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.166667
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
12: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 6 g = 11 f = 17 w = 864
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 7 g = 11 f = 18 w = 864
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864

PrintQueue
		 h = 5 g = 11 f = 16 w = 864


End PrintQueue
13: Raiz: h = 5 g = 11 f = 16 w  = 864
w = 864
	Child: h = 4 g = 12 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 864
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 864


End PrintQueue
14: Raiz: h = 4 g = 12 f = 16 w  = 864
w = 864
	Child: h = 5 g = 13 f = 18 w = 864
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 3 g = 13 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 3 g = 13 f = 16 threshold: 16 w = 864
	Child: h = 5 g = 13 f = 18 w = 864
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16

PrintQueue
		 h = 3 g = 13 f = 16 w = 864


End PrintQueue
15: Raiz: h = 3 g = 13 f = 16 w  = 864
w = 864
	Child: h = 2 g = 14 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 2 g = 14 f = 16 threshold: 16 w = 864
	Child: h = 4 g = 14 f = 18 w = 864
	Node was pruned!
	Child: h = 4 g = 14 f = 18 threshold: 16
	Child: h = 4 g = 14 f = 18 w = 864
	Node was pruned!
	Child: h = 4 g = 14 f = 18 threshold: 16

PrintQueue
		 h = 2 g = 14 f = 16 w = 864


End PrintQueue
16: Raiz: h = 2 g = 14 f = 16 w  = 864
w = 864
	Child: h = 3 g = 15 f = 18 w = 864
	Node was pruned!
	Child: h = 3 g = 15 f = 18 threshold: 16
	Child: h = 3 g = 15 f = 18 w = 864
	Node was pruned!
	Child: h = 3 g = 15 f = 18 threshold: 16
count1 = 10
count2 = 16
print boolean: 
bount = 13
1 1 1 0 0 1 0 1 1 1 0 1 1 
1 1 2 4 12 24 72 72 72 432 864 864 864 864 864 864 
expansions = 5876
**********
p = 5876
prePre = 1375.64
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1374.09
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1372.51
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.64 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.96 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 1 0 1 1 0 1 0 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1372.73
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1371.3
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 0 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1369.82
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
0 1 1 0 0 0 0 
1 1 2 2 4 8 24 48 96 96 
expansions = 282
**********
p = 282
prePre = 1368.5
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 1 1 0 1 0 0 0 1 0 
1 1 2 4 12 24 72 144 288 576 
expansions = 1124
**********
p = 1124
prePre = 1368.2
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.1 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.46 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.46 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.47 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.73 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 252


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 252
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 252
w = 252
	Child: h = 8 g = 8 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 252
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 1008


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 1008
		 h = 5 g = 9 f = 14 w = 72


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 1008
w = 1008
	Child: h = 7 g = 9 f = 16 w = 1008
		New node added
		child_node.getWeight() = 1008
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 1008
	Child: h = 7 g = 9 f = 16 w = 1008
	is duplicate: h = 7 g = 9 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2016
2016
	Child: h = 7 g = 9 f = 16 w = 1008
	is duplicate: h = 7 g = 9 f = 16
a = 0.56 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 3024


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 3024
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 3024
w = 3024
	Child: h = 6 g = 10 f = 16 w = 3024
	is duplicate: h = 6 g = 10 f = 16
a = 0.26 prob = 0.954545
b = 1
		Added even though is duplicate.
		w = 3168
3168
	Child: h = 8 g = 10 f = 18 w = 3024
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3024
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 3168


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 3168
w = 3168
	Child: h = 7 g = 11 f = 18 w = 3168
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 3168
		New node added
		child_node.getWeight() = 3168
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 3168

PrintQueue
		 h = 5 g = 11 f = 16 w = 3168


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 3168
w = 3168
	Child: h = 6 g = 12 f = 18 w = 3168
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 3168
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 9
count2 = 16
print boolean: 
bount = 18
1 1 0 1 1 0 1 1 0 0 0 0 0 0 1 0 0 1 
1 1 2 4 12 36 36 72 36 252 72 1008 72 3024 3168 3168 
expansions = 10964
**********
p = 10964
prePre = 1379.81
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 0 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1378.36
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.08 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.57 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.46 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.51 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 180


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 180
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 180
w = 180
	Child: h = 8 g = 8 f = 16 w = 180
		New node added
		child_node.getWeight() = 180
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 180
	Child: h = 8 g = 8 f = 16 w = 180
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 360
360
	Child: h = 8 g = 8 f = 16 w = 180
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 540


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 540
		 h = 5 g = 9 f = 14 w = 72


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 540
w = 540
	Child: h = 8 g = 9 f = 17 w = 540
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 540
		New node added
		child_node.getWeight() = 540
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 540

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 540


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 540
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 540
w = 540
	Child: h = 8 g = 10 f = 18 w = 540
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 540
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 540
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 9
count2 = 16
print boolean: 
bount = 13
1 1 1 1 1 0 0 1 0 0 1 0 1 
1 1 2 4 12 36 36 72 36 180 72 540 72 540 144 144 
expansions = 1892
**********
p = 1892
prePre = 1378.98
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1377.54
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 128


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 128
w = 128
	Child: h = 7 g = 9 f = 16 w = 128
		New node added
		child_node.getWeight() = 128
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 1 0 1 0 0 
1 1 2 4 8 16 32 64 128 128 
expansions = 384
**********
p = 384
prePre = 1376.34
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1374.76
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.58 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.35 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.44 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 288
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 288
w = 288
	Child: h = 8 g = 8 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 8 g = 8 f = 16 w = 1152


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.94 prob = 0.111111
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.1
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.0909091
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.33 prob = 0.0833333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 1728


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 1728
w = 1728
	Child: h = 7 g = 9 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 1728
	Child: h = 7 g = 9 f = 16 w = 1728
	is duplicate: h = 7 g = 9 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 3456
3456
	Child: h = 7 g = 9 f = 16 w = 1728
	is duplicate: h = 7 g = 9 f = 16
a = 0.71 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 5184


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 5184
w = 5184
	Child: h = 6 g = 10 f = 16 w = 5184
		New node added
		child_node.getWeight() = 5184
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 5184
	Child: h = 8 g = 10 f = 18 w = 5184
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 5184
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 5184


End PrintQueue
12: Raiz: h = 6 g = 10 f = 16 w  = 5184
w = 5184
	Child: h = 7 g = 11 f = 18 w = 5184
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 5184
		New node added
		child_node.getWeight() = 5184
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 5184

PrintQueue
		 h = 5 g = 11 f = 16 w = 5184


End PrintQueue
13: Raiz: h = 5 g = 11 f = 16 w  = 5184
w = 5184
	Child: h = 6 g = 12 f = 18 w = 5184
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 5184
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 13
print boolean: 
bount = 19
1 1 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 
1 1 2 4 12 36 144 288 144 1728 5184 5184 5184 
expansions = 17912
**********
p = 17912
prePre = 1394.61
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1393.09
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.02 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 6 g = 8 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 144
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.47 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.4 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.36 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 504


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 504
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 504
w = 504
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 9
count2 = 14
print boolean: 
bount = 12
0 1 1 1 1 1 0 1 1 0 0 1 
1 1 2 2 4 8 24 72 72 144 72 504 144 144 
expansions = 1194
**********
p = 1194
prePre = 1392.85
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.81 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.42 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 1 0 1 1 0 0 0 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1393.04
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.51 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 8 g = 9 f = 17 w = 144
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 1 1 1 0 0 1 0 
1 1 2 2 4 8 24 48 144 144 
expansions = 378
**********
p = 378
prePre = 1391.83
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.57 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.33 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.142857
b = 1
		Added even though is duplicate.
		w = 504
504
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.125
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.111111
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.1
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 720


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 720
w = 720
	Child: h = 8 g = 9 f = 17 w = 720
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 720
		New node added
		child_node.getWeight() = 720
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 720
	Child: h = 7 g = 9 f = 16 w = 720
	is duplicate: h = 7 g = 9 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1440
1440

PrintQueue
		 h = 7 g = 9 f = 16 w = 1440


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 1440
w = 1440
	Child: h = 6 g = 10 f = 16 w = 1440
		New node added
		child_node.getWeight() = 1440
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 1440
	Child: h = 8 g = 10 f = 18 w = 1440
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1440
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1440
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1440


End PrintQueue
12: Raiz: h = 6 g = 10 f = 16 w  = 1440
w = 1440
	Child: h = 5 g = 11 f = 16 w = 1440
		New node added
		child_node.getWeight() = 1440
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1440
	Child: h = 5 g = 11 f = 16 w = 1440
	is duplicate: h = 5 g = 11 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2880
2880
	Child: h = 7 g = 11 f = 18 w = 1440
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 2880


End PrintQueue
13: Raiz: h = 5 g = 11 f = 16 w  = 2880
w = 2880
	Child: h = 4 g = 12 f = 16 w = 2880
		New node added
		child_node.getWeight() = 2880
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 2880
	Child: h = 6 g = 12 f = 18 w = 2880
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 2880
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 2880


End PrintQueue
14: Raiz: h = 4 g = 12 f = 16 w  = 2880
w = 2880
	Child: h = 5 g = 13 f = 18 w = 2880
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 2880
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 10
count2 = 14
print boolean: 
bount = 16
1 1 1 0 0 1 1 0 0 1 1 0 0 0 1 1 
1 1 2 4 12 24 72 144 72 720 1440 1440 2880 2880 
expansions = 9692
**********
p = 9692
prePre = 1401.74
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.93 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.01 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.29 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 10
count2 = 10
print boolean: 
bount = 11
1 0 1 1 1 0 1 1 1 1 1 
1 1 2 4 8 16 48 96 288 864 
expansions = 1328
**********
p = 1328
prePre = 1401.65
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1400.07
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.75 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1398.62
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1397.1
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1395.56
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.94 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.51 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
1 0 1 1 0 0 0 1 0 
1 1 2 4 8 16 48 96 192 384 
expansions = 752
**********
p = 752
prePre = 1394.8
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.97 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.25
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.2
b = 1
		Added even though is duplicate.
		w = 360
360
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.82 prob = 0.166667
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 11
print boolean: 
bount = 12
1 1 1 0 0 1 0 1 0 0 1 0 
1 1 2 4 12 24 72 72 72 432 432 
expansions = 1124
**********
p = 1124
prePre = 1394.48
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1392.95
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1391.43
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1389.88
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.67 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.42 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 9
1 1 0 0 1 0 0 0 0 
1 1 2 4 12 24 72 144 288 288 
expansions = 836
**********
p = 836
prePre = 1389.22
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.37 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 1 0 0 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1388.01
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1386.55
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.42 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.82 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.58 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 6 g = 10 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864
	Child: h = 5 g = 11 f = 16 w = 864
	is duplicate: h = 5 g = 11 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1728
1728
	Child: h = 7 g = 11 f = 18 w = 864
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 1728


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 1728
w = 1728
	Child: h = 4 g = 12 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 1728
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 1728


End PrintQueue
13: Raiz: h = 4 g = 12 f = 16 w  = 1728
w = 1728
	Child: h = 5 g = 13 f = 18 w = 1728
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 1728
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 9
count2 = 13
print boolean: 
bount = 12
1 1 1 0 1 1 0 0 0 1 1 1 
1 1 2 4 12 24 72 144 432 864 864 1728 1728 
expansions = 5876
**********
p = 5876
prePre = 1391.82
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.55 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.36 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 10
1 1 1 0 1 0 0 0 1 1 
1 1 2 4 12 24 72 144 288 576 
expansions = 1124
**********
p = 1124
prePre = 1391.51
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.58 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.95 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 10
1 0 1 1 0 0 1 1 0 1 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1391.1
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.91 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 10
1 0 1 1 1 0 1 1 0 1 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1390.69
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1389.15
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1387.61
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.97 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.72 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.08 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 6 g = 8 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 216
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 216
w = 216
	Child: h = 7 g = 9 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 216
	Child: h = 5 g = 9 f = 14 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 216

PrintQueue
		 h = 8 g = 8 f = 16 w = 432
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 216


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.51 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.89 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 216
		 h = 7 g = 9 f = 16 w = 1080


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 216
w = 216
	Child: h = 6 g = 10 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 216
	Child: h = 6 g = 10 f = 16 w = 216
	is duplicate: h = 6 g = 10 f = 16
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 7 g = 9 f = 16 w = 1080
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 1080
w = 1080
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1080
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 432


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 432
w = 432
	Child: h = 7 g = 11 f = 18 w = 432
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 5 g = 11 f = 16 w = 432


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 432
w = 432
	Child: h = 6 g = 12 f = 18 w = 432
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 432
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 14
print boolean: 
bount = 13
1 1 0 0 1 0 1 1 0 0 1 0 1 
1 1 2 4 12 24 72 216 216 432 216 1080 432 432 
expansions = 3140
**********
p = 3140
prePre = 1389.65
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 384
384
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 10
1 0 1 0 1 1 0 1 1 1 
1 1 2 4 8 16 32 64 192 576 
expansions = 896
**********
p = 896
prePre = 1389.07
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1387.63
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 1 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1386.18
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.82 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.08 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.99 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.73 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.77 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.94 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.84 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 432
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 432
w = 432
	Child: h = 8 g = 8 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 432
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.75 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 8 g = 8 f = 16 w = 1728


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.0769231
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.48 prob = 0.0714286
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.0666667
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.0625
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.0588235
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 2448


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 2448
w = 2448
	Child: h = 8 g = 9 f = 17 w = 2448
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 2448
		New node added
		child_node.getWeight() = 2448
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 2448
	Child: h = 7 g = 9 f = 16 w = 2448
	is duplicate: h = 7 g = 9 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4896
4896

PrintQueue
		 h = 7 g = 9 f = 16 w = 4896


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 4896
w = 4896
	Child: h = 6 g = 10 f = 16 w = 4896
		New node added
		child_node.getWeight() = 4896
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 4896
	Child: h = 8 g = 10 f = 18 w = 4896
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 4896
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 4896


End PrintQueue
12: Raiz: h = 6 g = 10 f = 16 w  = 4896
w = 4896
	Child: h = 5 g = 11 f = 16 w = 4896
		New node added
		child_node.getWeight() = 4896
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 4896
	Child: h = 7 g = 11 f = 18 w = 4896
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 4896


End PrintQueue
13: Raiz: h = 5 g = 11 f = 16 w  = 4896
w = 4896
	Child: h = 6 g = 12 f = 18 w = 4896
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 4896
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 4896
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 13
print boolean: 
bount = 20
1 1 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 
1 1 2 4 12 36 144 432 144 2448 4896 4896 4896 
expansions = 17912
**********
p = 17912
prePre = 1405.35
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 0 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1403.9
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.54 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.34 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.57 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 11
1 1 0 0 1 1 0 1 1 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1404.07
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.14 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.28 prob = 0.142857
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.15 prob = 0.125
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.13 prob = 0.111111
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.1
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 720


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 720
w = 720
	Child: h = 8 g = 9 f = 17 w = 720
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 720
		New node added
		child_node.getWeight() = 720
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 720

PrintQueue
		 h = 7 g = 9 f = 16 w = 720


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 720
w = 720
	Child: h = 8 g = 10 f = 18 w = 720
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 720
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 720
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 11
print boolean: 
bount = 14
1 1 1 0 0 1 1 0 1 0 0 0 0 0 
1 1 2 4 12 24 72 144 72 720 720 
expansions = 1772
**********
p = 1772
prePre = 1404.5
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 0 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1403.05
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.44 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
1 1 0 0 0 0 0 
1 1 2 4 12 24 48 48 96 96 
expansions = 332
**********
p = 332
prePre = 1401.82
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1400.29
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.53 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.47 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 0 0 1 1 0 0 1 1 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1400.47
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.55 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 1 0 0 0 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1399.46
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 1 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1398.16
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 1 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1396.73
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.01 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.59 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 11
1 0 1 1 0 1 0 1 0 0 0 
1 1 2 4 8 16 48 144 432 864 
expansions = 1520
**********
p = 1520
prePre = 1396.87
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1395.34
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.82 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.31 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.59 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.38 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 252


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 252
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 252
w = 252
	Child: h = 8 g = 8 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 252
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 504
504
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 756
756
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.22 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 1008
1008

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 1008


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 1008
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 1008
w = 1008
	Child: h = 8 g = 9 f = 17 w = 1008
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 1008
	is duplicate: h = 7 g = 9 f = 16
a = 0.8 prob = 0.933333
b = 1
		Added even though is duplicate.
		w = 1080
1080
	Child: h = 7 g = 9 f = 16 w = 1008
	is duplicate: h = 7 g = 9 f = 16
a = 0.64 prob = 0.482759
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 1008
	is duplicate: h = 7 g = 9 f = 16
a = 0.51 prob = 0.325581
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 3096


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 3096
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 3096
w = 3096
	Child: h = 8 g = 10 f = 18 w = 3096
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3096
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3096
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3096
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 12
count2 = 16
print boolean: 
bount = 18
1 1 0 1 1 0 1 1 0 0 1 1 1 1 1 0 0 0 
1 1 2 4 12 36 36 72 36 252 72 1008 72 3096 144 144 
expansions = 4988
**********
p = 4988
prePre = 1399.45
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.95 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.67 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 0 0 0 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1398.45
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.94 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
1 0 1 0 1 1 0 0 0 
1 1 2 4 8 16 32 64 192 384 
expansions = 704
**********
p = 704
prePre = 1397.66
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.72 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.94 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.19 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 8 g = 8 f = 16 w = 576


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 576
w = 576
	Child: h = 8 g = 9 f = 17 w = 576
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 576
		New node added
		child_node.getWeight() = 576
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 576
	Child: h = 7 g = 9 f = 16 w = 576
	is duplicate: h = 7 g = 9 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1152
1152
	Child: h = 7 g = 9 f = 16 w = 576
	is duplicate: h = 7 g = 9 f = 16
a = 0.74 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1728


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1728
w = 1728
	Child: h = 8 g = 10 f = 18 w = 1728
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 1728
	Child: h = 8 g = 10 f = 18 w = 1728
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1728
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 1728


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 1728
w = 1728
	Child: h = 6 g = 11 f = 17 w = 1728
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 7 g = 11 f = 18 w = 1728
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 1728

PrintQueue
		 h = 5 g = 11 f = 16 w = 1728


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 1728
w = 1728
	Child: h = 4 g = 12 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 1728
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 1728


End PrintQueue
13: Raiz: h = 4 g = 12 f = 16 w  = 1728
w = 1728
	Child: h = 5 g = 13 f = 18 w = 1728
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 1728
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 8
count2 = 13
print boolean: 
bount = 13
1 0 1 1 1 1 0 0 0 0 1 1 0 
1 1 2 4 8 16 48 144 576 1728 1728 1728 1728 
expansions = 7712
**********
p = 7712
prePre = 1404.85
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.79 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.46 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
0 1 0 1 1 0 1 0 0 
1 1 2 2 4 8 16 32 96 288 
expansions = 450
**********
p = 450
prePre = 1403.76
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.42 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.84 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 6 g = 10 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864
	Child: h = 5 g = 11 f = 16 w = 864
	is duplicate: h = 5 g = 11 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1728
1728
	Child: h = 7 g = 11 f = 18 w = 864
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 1728


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 1728
w = 1728
	Child: h = 4 g = 12 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 1728
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 1728


End PrintQueue
13: Raiz: h = 4 g = 12 f = 16 w  = 1728
w = 1728
	Child: h = 5 g = 13 f = 18 w = 1728
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 1728
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 8
count2 = 13
print boolean: 
bount = 12
1 1 1 0 0 0 0 0 1 1 1 1 
1 1 2 4 12 24 72 144 432 864 864 1728 1728 
expansions = 5876
**********
p = 5876
prePre = 1408.84
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.55 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
0 1 1 0 0 0 1 0 
1 1 2 2 4 8 24 48 96 192 
expansions = 378
**********
p = 378
prePre = 1407.67
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1406.19
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.74 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.03 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.25
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.5 prob = 0.166667
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 6 g = 10 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
12: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864
	Child: h = 5 g = 11 f = 16 w = 864
	is duplicate: h = 5 g = 11 f = 16
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1728
1728
	Child: h = 7 g = 11 f = 18 w = 864
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 1728


End PrintQueue
13: Raiz: h = 5 g = 11 f = 16 w  = 1728
w = 1728
	Child: h = 4 g = 12 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 1728
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 1728


End PrintQueue
14: Raiz: h = 4 g = 12 f = 16 w  = 1728
w = 1728
	Child: h = 5 g = 13 f = 18 w = 1728
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 1728
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 8
count2 = 14
print boolean: 
bount = 14
1 1 1 0 0 1 0 0 1 0 0 0 1 1 
1 1 2 4 12 24 72 72 72 432 864 864 1728 1728 
expansions = 5876
**********
p = 5876
prePre = 1411.25
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1409.88
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.81 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.7 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 0 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1408.88
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.88 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 6 g = 8 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 144
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.47 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.74 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 360


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 360
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 360
w = 360
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 6
count2 = 14
print boolean: 
bount = 11
0 1 1 0 1 1 0 0 1 0 0 
1 1 2 2 4 8 24 72 72 144 72 360 144 144 
expansions = 1050
**********
p = 1050
prePre = 1408.48
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.46 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.21 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.93 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.91 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 11
1 1 0 0 0 1 1 0 1 0 0 
1 1 2 4 12 24 48 96 288 864 
expansions = 1340
**********
p = 1340
prePre = 1408.4
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.97 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.84 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
1 1 0 0 0 0 0 
1 1 2 4 12 24 48 48 96 96 
expansions = 332
**********
p = 332
prePre = 1407.19
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.142857
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.125
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.111111
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.07 prob = 0.1
b = 1
		Added even though is duplicate.
		w = 720
720

PrintQueue
		 h = 8 g = 8 f = 16 w = 720


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 720
w = 720
	Child: h = 8 g = 9 f = 17 w = 720
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 720
		New node added
		child_node.getWeight() = 720
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 720
	Child: h = 7 g = 9 f = 16 w = 720
	is duplicate: h = 7 g = 9 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 720
	is duplicate: h = 7 g = 9 f = 16
a = 0.6 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 2160


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 2160
w = 2160
	Child: h = 8 g = 10 f = 18 w = 2160
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2160
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 6 g = 10 f = 16 w = 2160
		New node added
		child_node.getWeight() = 2160
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 2160
	Child: h = 8 g = 10 f = 18 w = 2160
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 2160


End PrintQueue
12: Raiz: h = 6 g = 10 f = 16 w  = 2160
w = 2160
	Child: h = 6 g = 11 f = 17 w = 2160
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 7 g = 11 f = 18 w = 2160
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 2160
		New node added
		child_node.getWeight() = 2160
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 2160

PrintQueue
		 h = 5 g = 11 f = 16 w = 2160


End PrintQueue
13: Raiz: h = 5 g = 11 f = 16 w  = 2160
w = 2160
	Child: h = 6 g = 12 f = 18 w = 2160
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 4 g = 12 f = 16 w = 2160
		New node added
		child_node.getWeight() = 2160
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 2160
	Child: h = 6 g = 12 f = 18 w = 2160
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 2160


End PrintQueue
14: Raiz: h = 4 g = 12 f = 16 w  = 2160
w = 2160
	Child: h = 4 g = 13 f = 17 w = 2160
	Node was pruned!
	Child: h = 4 g = 13 f = 17 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 2160
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 7
count2 = 14
print boolean: 
bount = 16
1 1 1 0 0 1 1 0 0 0 0 0 0 1 0 0 
1 1 2 4 12 24 72 144 72 720 2160 2160 2160 2160 
expansions = 9692
**********
p = 9692
prePre = 1416.51
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 0 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1415.21
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.4 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.56 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.67 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 11
1 1 1 0 1 1 0 0 0 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1415.37
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1413.92
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 1 0 1 0 1 0 
1 1 2 2 4 8 16 32 64 128 
expansions = 258
**********
p = 258
prePre = 1412.62
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.95 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.86 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.7 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 1 0 1 1 0 1 0 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1412.78
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1411.29
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1409.79
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 0 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1408.51
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.59 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.98 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
0 1 1 1 0 0 0 0 1 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1407.52
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 1 0 0 1 0 
1 1 2 4 8 16 32 32 64 128 
expansions = 288
**********
p = 288
prePre = 1406.28
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.28 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.58 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 8 g = 9 f = 17 w = 288
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 11
0 1 1 1 1 0 0 0 1 0 0 
1 1 2 2 4 8 24 72 288 576 
expansions = 978
**********
p = 978
prePre = 1405.8
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1404.37
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1403.01
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.85 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.38 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.94 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 11
1 1 1 0 0 0 0 1 0 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1403.18
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.75 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 1 0 0 1 1 0 0 1 0 
1 1 2 4 12 24 72 144 432 432 
expansions = 1124
**********
p = 1124
prePre = 1402.87
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.91 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.7 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.14 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.64 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.81 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1296


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 1296
w = 1296
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1296
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 12
1 1 0 0 1 1 0 1 0 1 0 0 
1 1 2 4 12 24 72 144 432 1296 
expansions = 1988
**********
p = 1988
prePre = 1403.52
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1402.06
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1400.64
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.62 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.35 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 1 0 0 0 1 1 1 0 0 
1 1 2 4 12 24 48 96 288 576 
expansions = 1052
**********
p = 1052
prePre = 1400.25
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.89 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
1 0 0 1 1 1 0 1 
1 1 2 4 8 8 16 32 96 192 
expansions = 360
**********
p = 360
prePre = 1399.11
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.96 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 10
1 0 1 1 1 0 1 1 0 1 
1 1 2 4 8 16 48 96 288 576 
expansions = 1040
**********
p = 1040
prePre = 1398.71
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1397.31
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.57 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 10
1 1 1 0 1 0 0 0 1 1 
1 1 2 4 12 24 72 144 288 576 
expansions = 1124
**********
p = 1124
prePre = 1397.01
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1395.69
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.71 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.12 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.94 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.86 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 10
1 1 0 1 0 1 0 0 0 0 
1 1 2 4 12 36 108 216 432 432 
expansions = 1244
**********
p = 1244
prePre = 1395.53
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.91 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.97 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 9
0 1 1 0 0 1 0 0 0 
1 1 2 2 4 8 24 48 144 288 
expansions = 522
**********
p = 522
prePre = 1394.57
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1393.16
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 0 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1391.79
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.62 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
0 0 1 1 0 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1390.47
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 0 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1389.24
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1387.86
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.53 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.77 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.42 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 11
1 1 1 0 0 0 0 1 1 0 0 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1388.05
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.98 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 0 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1386.74
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.97 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.75 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.73 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 11
1 1 0 0 1 1 0 0 0 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1386.92
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.91 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.69 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
1 1 0 0 0 0 0 
1 1 2 4 12 24 48 48 96 96 
expansions = 332
**********
p = 332
prePre = 1385.78
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
0 0 1 1 0 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1384.48
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 1 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1383.27
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1381.91
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 1 0 0 
1 1 2 4 8 8 16 32 64 64 
expansions = 200
**********
p = 200
prePre = 1380.63
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.53 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.31 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 8 g = 9 f = 17 w = 288
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.67 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.59 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 12
0 1 1 0 1 0 0 1 0 1 0 0 
1 1 2 2 4 8 24 72 288 864 
expansions = 1266
**********
p = 1266
prePre = 1380.51
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.69 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.53 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.2 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 1 1 0 1 0 0 0 1 0 
1 1 2 4 12 24 72 144 288 576 
expansions = 1124
**********
p = 1124
prePre = 1380.23
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 1 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1378.91
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1377.51
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1376.1
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.34 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.77 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.44 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.21 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.2
b = 1
		Added even though is duplicate.
		w = 360
360
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.19 prob = 0.166667
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 11
print boolean: 
bount = 12
1 1 1 0 0 1 0 1 0 1 1 0 
1 1 2 4 12 24 72 72 72 432 432 
expansions = 1124
**********
p = 1124
prePre = 1375.83
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.56 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.98 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.36 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.64 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 10
1 1 1 0 0 0 0 0 1 0 
1 1 2 4 12 24 72 144 432 432 
expansions = 1124
**********
p = 1124
prePre = 1375.56
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.17 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.93 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 6 g = 8 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 144
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.05 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.01 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 360
360
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.92 prob = 0.285714
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 504


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 504
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 504
w = 504
	Child: h = 6 g = 10 f = 16 w = 504
	is duplicate: h = 6 g = 10 f = 16
a = 0.08 prob = 0.777778
b = 1
		Added even though is duplicate.
		w = 648
648
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 504
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 648


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 648
w = 648
	Child: h = 7 g = 11 f = 18 w = 648
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 648
		New node added
		child_node.getWeight() = 648
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 648

PrintQueue
		 h = 5 g = 11 f = 16 w = 648


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 648
w = 648
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 648
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 9
count2 = 14
print boolean: 
bount = 13
0 1 1 0 1 1 0 1 1 1 0 0 1 
1 1 2 2 4 8 24 72 72 144 72 504 648 648 
expansions = 2202
**********
p = 2202
prePre = 1376.44
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.97 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 10
1 1 0 0 0 1 1 1 0 0 
1 1 2 4 12 24 48 96 288 576 
expansions = 1052
**********
p = 1052
prePre = 1376.1
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1374.71
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.57 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1373.36
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.46 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.59 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.57 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 11
1 1 1 0 0 0 0 1 1 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1373.55
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 0 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1372.37
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.34 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.86 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.63 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 8 g = 9 f = 17 w = 288
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
1 0 1 1 1 0 0 1 0 
1 1 2 4 8 16 48 96 288 288 
expansions = 752
**********
p = 752
prePre = 1371.72
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.53 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.98 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 0 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1370.64
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1369.31
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.1 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.53 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.62 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.53 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.42 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.17 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.79 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 432
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 432
w = 432
	Child: h = 8 g = 8 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 432
	Child: h = 6 g = 8 f = 14 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 432
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.37 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 6 g = 8 f = 14 w = 432
		 h = 8 g = 8 f = 16 w = 1296


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.2 prob = 0.1
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.91 prob = 0.0909091
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.89 prob = 0.0833333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.53 prob = 0.0769231
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.33 prob = 0.0714286
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 432
		 h = 8 g = 8 f = 16 w = 2016


End PrintQueue
10: Raiz: h = 6 g = 8 f = 14 w  = 432
w = 432
	Child: h = 6 g = 9 f = 15 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 6 g = 9 f = 15 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 5 g = 9 f = 14 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 432

PrintQueue
		 h = 8 g = 8 f = 16 w = 2016
		 h = 5 g = 9 f = 14 w = 432
		 h = 6 g = 9 f = 15 w = 432
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
11: Raiz: h = 8 g = 8 f = 16 w  = 2016
w = 2016
	Child: h = 7 g = 9 f = 16 w = 2016
	is duplicate: h = 7 g = 9 f = 16
a = 0.01 prob = 0.823529
b = 1
		Added even though is duplicate.
		w = 2448
2448
	Child: h = 7 g = 9 f = 16 w = 2016
	is duplicate: h = 7 g = 9 f = 16
a = 0.92 prob = 0.451613
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 2016
	is duplicate: h = 7 g = 9 f = 16
a = 0.39 prob = 0.311111
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 432
		 h = 6 g = 9 f = 15 w = 432
		 h = 7 g = 9 f = 16 w = 6480


End PrintQueue
12: Raiz: h = 5 g = 9 f = 14 w  = 432
w = 432
	Child: h = 4 g = 10 f = 14 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 4 g = 10 f = 14 threshold: 16 w = 432
	Child: h = 6 g = 10 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 432
	Child: h = 6 g = 10 f = 16 w = 432
	is duplicate: h = 6 g = 10 f = 16
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 9 f = 15 w = 432
		 h = 7 g = 9 f = 16 w = 6480
		 h = 4 g = 10 f = 14 w = 432
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
13: Raiz: h = 6 g = 9 f = 15 w  = 432
w = 432
	Child: h = 6 g = 10 f = 16 w = 432
	is duplicate: h = 6 g = 10 f = 16
a = 0.91 prob = 0.333333
b = 0
		Not added.
	Child: h = 6 g = 10 f = 16 w = 432
	is duplicate: h = 6 g = 10 f = 16
a = 0.17 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 1728
1728
	Child: h = 6 g = 10 f = 16 w = 432
	is duplicate: h = 6 g = 10 f = 16
a = 0.53 prob = 0.2
b = 0
		Not added.
	Child: h = 6 g = 10 f = 16 w = 432
	is duplicate: h = 6 g = 10 f = 16
a = 0.79 prob = 0.166667
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 6480
		 h = 4 g = 10 f = 14 w = 432
		 h = 6 g = 10 f = 16 w = 2592


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 6480
w = 6480
	Child: h = 8 g = 10 f = 18 w = 6480
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 6480
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 6480
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 10 f = 14 w = 432
		 h = 6 g = 10 f = 16 w = 2592


End PrintQueue
15: Raiz: h = 4 g = 10 f = 14 w  = 432
w = 432
	Child: h = 5 g = 11 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 432
	Child: h = 5 g = 11 f = 16 w = 432
	is duplicate: h = 5 g = 11 f = 16
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 6 g = 10 f = 16 w = 2592
		 h = 5 g = 11 f = 16 w = 864


End PrintQueue
16: Raiz: h = 6 g = 10 f = 16 w  = 2592
w = 2592
	Child: h = 6 g = 11 f = 17 w = 2592
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 2592
	is duplicate: h = 5 g = 11 f = 16
a = 0.09 prob = 0.75
b = 1
		Added even though is duplicate.
		w = 3456
3456
	Child: h = 5 g = 11 f = 16 w = 2592
	is duplicate: h = 5 g = 11 f = 16
a = 0.34 prob = 0.428571
b = 1
		Added even though is duplicate.
		w = 6048
6048

PrintQueue
		 h = 5 g = 11 f = 16 w = 6048


End PrintQueue
17: Raiz: h = 5 g = 11 f = 16 w  = 6048
w = 6048
	Child: h = 4 g = 12 f = 16 w = 6048
		New node added
		child_node.getWeight() = 6048
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 6048
	Child: h = 6 g = 12 f = 18 w = 6048
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 6048
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 6048


End PrintQueue
18: Raiz: h = 4 g = 12 f = 16 w  = 6048
w = 6048
	Child: h = 3 g = 13 f = 16 w = 6048
		New node added
		child_node.getWeight() = 6048
		Child: h = 3 g = 13 f = 16 threshold: 16 w = 6048
	Child: h = 5 g = 13 f = 18 w = 6048
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16

PrintQueue
		 h = 3 g = 13 f = 16 w = 6048


End PrintQueue
19: Raiz: h = 3 g = 13 f = 16 w  = 6048
w = 6048
	Child: h = 2 g = 14 f = 16 w = 6048
		New node added
		child_node.getWeight() = 6048
		Child: h = 2 g = 14 f = 16 threshold: 16 w = 6048
	Child: h = 4 g = 14 f = 18 w = 6048
	Node was pruned!
	Child: h = 4 g = 14 f = 18 threshold: 16

PrintQueue
		 h = 2 g = 14 f = 16 w = 6048


End PrintQueue
20: Raiz: h = 2 g = 14 f = 16 w  = 6048
w = 6048
	Child: h = 3 g = 15 f = 18 w = 6048
	Node was pruned!
	Child: h = 3 g = 15 f = 18 threshold: 16
count1 = 11
count2 = 20
print boolean: 
bount = 29
1 1 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 1 1 
1 1 2 4 12 36 144 432 144 432 2016 432 432 6480 432 2592 6048 6048 6048 6048 
expansions = 37784
**********
p = 37784
prePre = 1407.85
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 1 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1406.64
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1405.23
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.78 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
0 1 1 0 0 0 0 
1 1 2 2 4 8 24 48 96 96 
expansions = 282
**********
p = 282
prePre = 1404.05
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.96 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.7 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 384
384

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
1 1 0 0 0 1 0 1 1 
1 1 2 4 12 24 48 96 192 384 
expansions = 764
**********
p = 764
prePre = 1403.37
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 1 0 0 0 
1 1 2 2 4 8 16 16 32 32 
expansions = 114
**********
p = 114
prePre = 1402.02
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.99 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.35 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
1 0 1 0 0 1 1 
1 1 2 4 8 16 32 32 64 128 
expansions = 288
**********
p = 288
prePre = 1400.85
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1399.44
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.75 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.66 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.81 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 216
216

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.07 prob = 0.2
b = 1
		Added even though is duplicate.
		w = 360
360
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.39 prob = 0.166667
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 11
print boolean: 
bount = 12
1 1 1 0 0 1 0 0 1 1 1 0 
1 1 2 4 12 24 72 72 72 432 432 
expansions = 1124
**********
p = 1124
prePre = 1399.15
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 9 f = 16 w = 16


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 16
w = 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 16
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 1
count2 = 10
print boolean: 
bount = 4
0 0 0 0 
1 1 2 2 4 4 8 8 16 16 
expansions = 62
**********
p = 62
prePre = 1397.75
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
1 0 1 0 0 1 1 
1 1 2 4 8 16 32 32 64 128 
expansions = 288
**********
p = 288
prePre = 1396.59
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.22 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.04 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 10
1 0 1 0 1 1 1 1 0 1 
1 1 2 4 8 16 32 64 192 576 
expansions = 896
**********
p = 896
prePre = 1396.06
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.9 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1394.71
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.14 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.48 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.88 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.79 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.98 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 432


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 432
w = 432
	Child: h = 6 g = 8 f = 14 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 432
	Child: h = 8 g = 8 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 432
	Child: h = 8 g = 8 f = 16 w = 432
	is duplicate: h = 8 g = 8 f = 16
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 432
		 h = 8 g = 8 f = 16 w = 864


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 5 g = 9 f = 14 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 432

PrintQueue
		 h = 8 g = 8 f = 16 w = 864
		 h = 5 g = 9 f = 14 w = 432
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 864
w = 864
	Child: h = 7 g = 9 f = 16 w = 864
	is duplicate: h = 7 g = 9 f = 16
a = 0.05 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 1296
1296
	Child: h = 7 g = 9 f = 16 w = 864
	is duplicate: h = 7 g = 9 f = 16
a = 0.4 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 432
		 h = 7 g = 9 f = 16 w = 2160


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 432
w = 432
	Child: h = 6 g = 10 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 432
	Child: h = 6 g = 10 f = 16 w = 432
	is duplicate: h = 6 g = 10 f = 16
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 2160
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 2160
w = 2160
	Child: h = 8 g = 10 f = 18 w = 2160
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2160
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2160
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864

PrintQueue
		 h = 5 g = 11 f = 16 w = 864


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 864
w = 864
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 864
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 14
print boolean: 
bount = 15
1 1 1 1 0 0 0 0 0 1 0 0 1 0 0 
1 1 2 4 12 36 144 432 432 864 432 2160 864 864 
expansions = 6248
**********
p = 6248
prePre = 1399.78
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.06 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.81 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 288


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 288
w = 288
	Child: h = 7 g = 11 f = 18 w = 288
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 5 g = 11 f = 16 w = 288


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 288
w = 288
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 288
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 7
count2 = 12
print boolean: 
bount = 9
0 1 0 1 1 1 1 1 0 
1 1 2 2 4 8 16 32 96 288 288 288 
expansions = 1026
**********
p = 1026
prePre = 1399.39
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.01 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
1 0 0 1 0 1 1 
1 1 2 4 8 8 16 32 64 128 
expansions = 264
**********
p = 264
prePre = 1398.2
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.7 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 1 0 0 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1397.12
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.09 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.39 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.89 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.22 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.13 prob = 0.4
b = 1
		Added even though is duplicate.
		w = 180
180
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.04 prob = 0.285714
b = 1
		Added even though is duplicate.
		w = 252
252

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 252


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 7 g = 7 f = 14 w = 252
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 252
w = 252
	Child: h = 8 g = 8 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 252
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.59 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.54 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 756


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 756
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 756
w = 756
	Child: h = 7 g = 9 f = 16 w = 756
	is duplicate: h = 7 g = 9 f = 16
a = 0.89 prob = 0.913043
b = 1
		Added even though is duplicate.
		w = 828
828
	Child: h = 7 g = 9 f = 16 w = 756
	is duplicate: h = 7 g = 9 f = 16
a = 0.9 prob = 0.477273
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 1584


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1584
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1584
w = 1584
	Child: h = 8 g = 10 f = 18 w = 1584
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1584
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 12
count2 = 16
print boolean: 
bount = 16
1 1 1 1 1 0 1 1 1 1 1 0 0 1 0 0 
1 1 2 4 12 36 36 72 36 252 72 756 72 1584 144 144 
expansions = 3224
**********
p = 3224
prePre = 1399.02
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.25 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.25 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 36
36

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.83 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.14 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108

PrintQueue
		 h = 8 g = 6 f = 14 w = 108


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 108
w = 108
	Child: h = 7 g = 7 f = 14 w = 108
		New node added
		child_node.getWeight() = 108
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 108
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 108
	is duplicate: h = 7 g = 7 f = 14
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 324


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 324
w = 324
	Child: h = 8 g = 8 f = 16 w = 324
		New node added
		child_node.getWeight() = 324
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 324
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.5 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 324
	is duplicate: h = 8 g = 8 f = 16
a = 0.31 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 1296


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 1296
w = 1296
	Child: h = 7 g = 9 f = 16 w = 1296
		New node added
		child_node.getWeight() = 1296
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 1296
	Child: h = 7 g = 9 f = 16 w = 1296
	is duplicate: h = 7 g = 9 f = 16
a = 0.78 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 1296
	is duplicate: h = 7 g = 9 f = 16
a = 0.38 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 3888


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 3888
w = 3888
	Child: h = 8 g = 10 f = 18 w = 3888
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3888
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3888
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 3888
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 15
1 1 0 1 1 1 0 1 0 0 0 0 0 0 0 
1 1 2 4 12 36 108 324 1296 3888 
expansions = 5672
**********
p = 5672
prePre = 1403.45
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.83 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.19 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 48
48

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.93 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 144
w = 144
	Child: h = 6 g = 10 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 144
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 5
count2 = 12
print boolean: 
bount = 8
0 0 1 1 0 1 1 0 
1 1 2 2 4 4 8 16 48 144 144 144 
expansions = 518
**********
p = 518
prePre = 1402.54
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.81 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.9 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.39 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 9
1 0 1 0 1 1 0 0 0 
1 1 2 4 8 16 32 64 192 384 
expansions = 704
**********
p = 704
prePre = 1401.81
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.73 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.86 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 384
384

PrintQueue
		 h = 7 g = 9 f = 16 w = 384


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 384
w = 384
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 384
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 9
1 0 1 1 0 0 0 1 1 
1 1 2 4 8 16 48 96 192 384 
expansions = 752
**********
p = 752
prePre = 1401.14
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.53 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1399.89
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 1 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1398.6
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 0 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1397.52
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.63 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.66 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 1 0 0 
1 1 2 2 4 4 8 16 32 32 
expansions = 102
**********
p = 102
prePre = 1396.18
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.61 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.18 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
1 0 1 0 0 1 1 
1 1 2 4 8 16 32 32 64 128 
expansions = 288
**********
p = 288
prePre = 1395.04
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.47 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.25 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.9 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.83 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 7 g = 7 f = 14 w = 72
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.48 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.45 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 8 g = 8 f = 16 w = 216


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.24 prob = 0.25
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.71 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.166667
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432

PrintQueue
		 h = 7 g = 9 f = 16 w = 432


End PrintQueue
11: Raiz: h = 7 g = 9 f = 16 w  = 432
w = 432
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 432
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 11
print boolean: 
bount = 12
1 1 1 0 0 1 0 1 0 1 0 0 
1 1 2 4 12 24 72 72 72 432 432 
expansions = 1124
**********
p = 1124
prePre = 1394.76
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.99 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1393.51
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.94 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.12 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 8 g = 7 f = 15 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 7 f = 14 w = 144
		 h = 8 g = 7 f = 15 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 6 g = 8 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.67 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.71 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 72
		 h = 6 g = 8 f = 14 w = 144
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.37 prob = 0.142857
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.53 prob = 0.125
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.27 prob = 0.111111
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.1
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 144
		 h = 8 g = 8 f = 16 w = 720


End PrintQueue
10: Raiz: h = 6 g = 8 f = 14 w  = 144
w = 144
	Child: h = 5 g = 9 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 144
	Child: h = 5 g = 9 f = 14 w = 144
	is duplicate: h = 5 g = 9 f = 14
a = 0 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288
	Child: h = 7 g = 9 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 8 g = 8 f = 16 w = 720
		 h = 5 g = 9 f = 14 w = 288
		 h = 7 g = 9 f = 16 w = 144


End PrintQueue
11: Raiz: h = 8 g = 8 f = 16 w  = 720
w = 720
	Child: h = 8 g = 9 f = 17 w = 720
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 720
	is duplicate: h = 7 g = 9 f = 16
a = 0.21 prob = 0.833333
b = 1
		Added even though is duplicate.
		w = 864
864
	Child: h = 7 g = 9 f = 16 w = 720
	is duplicate: h = 7 g = 9 f = 16
a = 0.97 prob = 0.454545
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 288
		 h = 7 g = 9 f = 16 w = 1584


End PrintQueue
12: Raiz: h = 5 g = 9 f = 14 w  = 288
w = 288
	Child: h = 4 g = 10 f = 14 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 4 g = 10 f = 14 threshold: 16 w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 1584
		 h = 4 g = 10 f = 14 w = 288
		 h = 6 g = 10 f = 16 w = 576


End PrintQueue
13: Raiz: h = 7 g = 9 f = 16 w  = 1584
w = 1584
	Child: h = 8 g = 10 f = 18 w = 1584
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1584
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1584
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 10 f = 14 w = 288
		 h = 6 g = 10 f = 16 w = 576


End PrintQueue
14: Raiz: h = 4 g = 10 f = 14 w  = 288
w = 288
	Child: h = 5 g = 11 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 288
	Child: h = 5 g = 11 f = 16 w = 288
	is duplicate: h = 5 g = 11 f = 16
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 10 f = 16 w = 576
		 h = 5 g = 11 f = 16 w = 576


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 576
w = 576
	Child: h = 5 g = 11 f = 16 w = 576
	is duplicate: h = 5 g = 11 f = 16
a = 0.74 prob = 0.5
b = 0
		Not added.
	Child: h = 5 g = 11 f = 16 w = 576
	is duplicate: h = 5 g = 11 f = 16
a = 0.73 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 5 g = 11 f = 16 w = 1728


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 1728
w = 1728
	Child: h = 4 g = 12 f = 16 w = 1728
		New node added
		child_node.getWeight() = 1728
		Child: h = 4 g = 12 f = 16 threshold: 16 w = 1728
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16

PrintQueue
		 h = 4 g = 12 f = 16 w = 1728


End PrintQueue
17: Raiz: h = 4 g = 12 f = 16 w  = 1728
w = 1728
	Child: h = 5 g = 13 f = 18 w = 1728
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
	Child: h = 5 g = 13 f = 18 w = 1728
	Node was pruned!
	Child: h = 5 g = 13 f = 18 threshold: 16
count1 = 9
count2 = 17
print boolean: 
bount = 21
1 1 1 0 0 1 1 1 0 0 0 0 0 0 1 1 0 0 0 0 0 
1 1 2 4 12 24 72 144 72 144 720 288 1584 288 576 1728 1728 
expansions = 7388
**********
p = 7388
prePre = 1399.67
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.78 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.29 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.42 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 216


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 216
w = 216
	Child: h = 8 g = 8 f = 16 w = 216
		New node added
		child_node.getWeight() = 216
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 216
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.87 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.64 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 216
	is duplicate: h = 8 g = 8 f = 16
a = 0.64 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 864


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 864
w = 864
	Child: h = 7 g = 9 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 864
	Child: h = 7 g = 9 f = 16 w = 864
	is duplicate: h = 7 g = 9 f = 16
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1728
1728
	Child: h = 7 g = 9 f = 16 w = 864
	is duplicate: h = 7 g = 9 f = 16
a = 0.86 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 2592


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 2592
w = 2592
	Child: h = 6 g = 10 f = 16 w = 2592
		New node added
		child_node.getWeight() = 2592
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 2592
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 2592


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 2592
w = 2592
	Child: h = 7 g = 11 f = 18 w = 2592
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 2592
		New node added
		child_node.getWeight() = 2592
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 2592

PrintQueue
		 h = 5 g = 11 f = 16 w = 2592


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 2592
w = 2592
	Child: h = 6 g = 12 f = 18 w = 2592
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 2592
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 12
print boolean: 
bount = 14
1 1 1 0 1 1 1 0 0 0 0 0 1 0 
1 1 2 4 12 24 72 216 864 2592 2592 2592 
expansions = 8972
**********
p = 8972
prePre = 1407.44
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.07 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.23 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.88 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 6 g = 6 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 6 f = 12 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 72
72

PrintQueue
		 h = 6 g = 6 f = 12 w = 36
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 6 g = 6 f = 12 w  = 36
w = 36
	Child: h = 7 g = 7 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 36
	Child: h = 5 g = 7 f = 12 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 5 g = 7 f = 12 threshold: 16 w = 36

PrintQueue
		 h = 8 g = 6 f = 14 w = 72
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 36


End PrintQueue
8: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.37 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.65 prob = 0.4
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.21 prob = 0.285714
b = 1
		Added even though is duplicate.
		w = 252
252

PrintQueue
		 h = 5 g = 7 f = 12 w = 36
		 h = 7 g = 7 f = 14 w = 252


End PrintQueue
9: Raiz: h = 5 g = 7 f = 12 w  = 36
w = 36
	Child: h = 6 g = 8 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 36
	Child: h = 6 g = 8 f = 14 w = 36
	is duplicate: h = 6 g = 8 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 252
		 h = 6 g = 8 f = 14 w = 72


End PrintQueue
10: Raiz: h = 7 g = 7 f = 14 w  = 252
w = 252
	Child: h = 8 g = 8 f = 16 w = 252
		New node added
		child_node.getWeight() = 252
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 252
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.68 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 252
	is duplicate: h = 8 g = 8 f = 16
a = 0.64 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 756


End PrintQueue
11: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 756
		 h = 5 g = 9 f = 14 w = 72


End PrintQueue
12: Raiz: h = 8 g = 8 f = 16 w  = 756
w = 756
	Child: h = 7 g = 9 f = 16 w = 756
		New node added
		child_node.getWeight() = 756
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 756
	Child: h = 7 g = 9 f = 16 w = 756
	is duplicate: h = 7 g = 9 f = 16
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 1512
1512

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 1512


End PrintQueue
13: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 144
144

PrintQueue
		 h = 7 g = 9 f = 16 w = 1512
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
14: Raiz: h = 7 g = 9 f = 16 w  = 1512
w = 1512
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 1512
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
15: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 7 g = 11 f = 18 w = 144
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
16: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 11
count2 = 16
print boolean: 
bount = 15
1 1 1 1 1 0 1 1 0 1 0 0 0 1 1 
1 1 2 4 12 36 36 72 36 252 72 756 72 1512 144 144 
expansions = 3152
**********
p = 3152
prePre = 1409.22
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.22 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.64 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 128


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 128
w = 128
	Child: h = 7 g = 9 f = 16 w = 128
		New node added
		child_node.getWeight() = 128
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 1 0 1 0 0 
1 1 2 4 8 16 32 64 128 128 
expansions = 384
**********
p = 384
prePre = 1408.17
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.71 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.95 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.72 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.91 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.93 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.49 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 11
1 1 1 0 0 0 0 0 0 0 1 
1 1 2 4 12 24 72 144 432 864 
expansions = 1556
**********
p = 1556
prePre = 1408.33
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1407.01
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.32 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.21 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.63 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.72 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.5 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.84 prob = 0.333333
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.37 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 288


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 288
w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 288
	is duplicate: h = 7 g = 9 f = 16
a = 0.99 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 12
0 1 1 1 1 0 0 0 0 0 0 0 
1 1 2 2 4 8 24 72 288 864 
expansions = 1266
**********
p = 1266
prePre = 1406.87
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.8 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.31 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.86 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.36 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 8
0 1 0 1 1 0 0 1 
1 1 2 2 4 8 16 32 96 192 
expansions = 354
**********
p = 354
prePre = 1405.79
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.49 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.52 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.28 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.38 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.97 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 6
count2 = 10
print boolean: 
bount = 8
1 0 0 1 1 1 0 1 
1 1 2 4 8 8 16 32 96 192 
expansions = 360
**********
p = 360
prePre = 1404.73
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.96 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.67 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.44 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.85 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.77 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.92 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 0 0 1 1 0 0 0 
1 1 2 4 8 8 16 32 96 192 
expansions = 360
**********
p = 360
prePre = 1403.66
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.58 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.29 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.98 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
0 0 0 1 0 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1402.32
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.82 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.36 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.13 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.35 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 72


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 72
w = 72
	Child: h = 6 g = 8 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 72
	Child: h = 8 g = 8 f = 16 w = 72
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 72
		 h = 8 g = 8 f = 16 w = 144


End PrintQueue
9: Raiz: h = 6 g = 8 f = 14 w  = 72
w = 72
	Child: h = 7 g = 9 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 72
	Child: h = 5 g = 9 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 5 g = 9 f = 14 threshold: 16 w = 72

PrintQueue
		 h = 8 g = 8 f = 16 w = 144
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 72


End PrintQueue
10: Raiz: h = 8 g = 8 f = 16 w  = 144
w = 144
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.15 prob = 0.666667
b = 1
		Added even though is duplicate.
		w = 216
216
	Child: h = 7 g = 9 f = 16 w = 144
	is duplicate: h = 7 g = 9 f = 16
a = 0.83 prob = 0.4
b = 0
		Not added.

PrintQueue
		 h = 5 g = 9 f = 14 w = 72
		 h = 7 g = 9 f = 16 w = 360


End PrintQueue
11: Raiz: h = 5 g = 9 f = 14 w  = 72
w = 72
	Child: h = 6 g = 10 f = 16 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 72
	Child: h = 6 g = 10 f = 16 w = 72
	is duplicate: h = 6 g = 10 f = 16
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 360
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
12: Raiz: h = 7 g = 9 f = 16 w  = 360
w = 360
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 360
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 144


End PrintQueue
13: Raiz: h = 6 g = 10 f = 16 w  = 144
w = 144
	Child: h = 5 g = 11 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 144

PrintQueue
		 h = 5 g = 11 f = 16 w = 144


End PrintQueue
14: Raiz: h = 5 g = 11 f = 16 w  = 144
w = 144
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 144
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 6
count2 = 14
print boolean: 
bount = 11
0 1 1 0 1 1 0 0 1 0 0 
1 1 2 2 4 8 24 72 72 144 72 360 144 144 
expansions = 1050
**********
p = 1050
prePre = 1401.96
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.15 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.61 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 48


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 48
w = 48
	Child: h = 7 g = 9 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 48
	Child: h = 7 g = 9 f = 16 w = 48
	is duplicate: h = 7 g = 9 f = 16
a = 0.05 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 0 1 1 1 0 1 
1 1 2 2 4 4 8 16 48 96 
expansions = 182
**********
p = 182
prePre = 1400.72
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.83 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 2
count2 = 10
print boolean: 
bount = 5
1 0 0 0 0 
1 1 2 4 8 8 16 16 32 32 
expansions = 120
**********
p = 120
prePre = 1399.42
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.97 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 7 f = 14 w = 8


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 8
w = 8
	Child: h = 8 g = 8 f = 16 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 8
	Child: h = 8 g = 8 f = 16 w = 8
	is duplicate: h = 8 g = 8 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 8 f = 16 w = 16


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 16
w = 16
	Child: h = 7 g = 9 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 16
	Child: h = 7 g = 9 f = 16 w = 16
	is duplicate: h = 7 g = 9 f = 16
a = 0.43 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 9 f = 16 w = 32


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 32
w = 32
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 32
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 5
0 0 0 1 1 
1 1 2 2 4 4 8 8 16 32 
expansions = 78
**********
p = 78
prePre = 1398.09
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.84 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.55 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.82 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 24


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 24
w = 24
	Child: h = 7 g = 7 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 24
	Child: h = 7 g = 7 f = 14 w = 24
	is duplicate: h = 7 g = 7 f = 14
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 48


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 48
w = 48
	Child: h = 8 g = 8 f = 16 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 48
	Child: h = 8 g = 8 f = 16 w = 48
	is duplicate: h = 8 g = 8 f = 16
a = 0.56 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96

PrintQueue
		 h = 7 g = 9 f = 16 w = 96


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 96
w = 96
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 96
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 7
0 1 1 0 0 0 0 
1 1 2 2 4 8 24 48 96 96 
expansions = 282
**********
p = 282
prePre = 1396.96
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.12 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.59 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.87 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.4 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.51 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.01 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 96
96

PrintQueue
		 h = 8 g = 8 f = 16 w = 96


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 96
w = 96
	Child: h = 7 g = 9 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 96
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 192
192
	Child: h = 7 g = 9 f = 16 w = 96
	is duplicate: h = 7 g = 9 f = 16
a = 0.08 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 288
w = 288
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 288
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 7
count2 = 10
print boolean: 
bount = 9
1 0 0 1 1 0 1 1 1 
1 1 2 4 8 8 16 32 96 288 
expansions = 456
**********
p = 456
prePre = 1396.01
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.03 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.85 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.42 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 24
24

PrintQueue
		 h = 7 g = 5 f = 12 w = 24


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 24
w = 24
	Child: h = 8 g = 6 f = 14 w = 24
		New node added
		child_node.getWeight() = 24
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 24
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 48
48
	Child: h = 8 g = 6 f = 14 w = 24
	is duplicate: h = 8 g = 6 f = 14
a = 0.87 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 72


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 72
w = 72
	Child: h = 7 g = 7 f = 14 w = 72
		New node added
		child_node.getWeight() = 72
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 72
	Child: h = 7 g = 7 f = 14 w = 72
	is duplicate: h = 7 g = 7 f = 14
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.72 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.29 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 432
432

PrintQueue
		 h = 8 g = 8 f = 16 w = 432


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 432
w = 432
	Child: h = 8 g = 9 f = 17 w = 432
	Node was pruned!
	Child: h = 8 g = 9 f = 17 threshold: 16
	Child: h = 7 g = 9 f = 16 w = 432
		New node added
		child_node.getWeight() = 432
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 432
	Child: h = 7 g = 9 f = 16 w = 432
	is duplicate: h = 7 g = 9 f = 16
a = 0.11 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 864
864

PrintQueue
		 h = 7 g = 9 f = 16 w = 864


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 864
w = 864
	Child: h = 6 g = 10 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 864
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 864
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
11: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 5 g = 11 f = 16 w = 864
		New node added
		child_node.getWeight() = 864
		Child: h = 5 g = 11 f = 16 threshold: 16 w = 864
	Child: h = 5 g = 11 f = 16 w = 864
	is duplicate: h = 5 g = 11 f = 16
a = 0.8 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 11 f = 18 w = 864
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16

PrintQueue
		 h = 5 g = 11 f = 16 w = 1728


End PrintQueue
12: Raiz: h = 5 g = 11 f = 16 w  = 1728
w = 1728
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
	Child: h = 6 g = 12 f = 18 w = 1728
	Node was pruned!
	Child: h = 6 g = 12 f = 18 threshold: 16
count1 = 8
count2 = 12
print boolean: 
bount = 12
1 1 1 0 1 1 0 0 0 1 1 0 
1 1 2 4 12 24 72 144 432 864 864 1728 
expansions = 4148
**********
p = 4148
prePre = 1398.79
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.46 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.74 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.21 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 12
12

PrintQueue
		 h = 8 g = 4 f = 12 w = 12


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 12
w = 12
	Child: h = 7 g = 5 f = 12 w = 12
		New node added
		child_node.getWeight() = 12
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 12
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.59 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 5 f = 12 w = 12
	is duplicate: h = 7 g = 5 f = 12
a = 0.72 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 36


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 36
w = 36
	Child: h = 8 g = 6 f = 14 w = 36
		New node added
		child_node.getWeight() = 36
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 36
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.71 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 108
108
	Child: h = 8 g = 6 f = 14 w = 36
	is duplicate: h = 8 g = 6 f = 14
a = 0.92 prob = 0.25
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 144


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 144
w = 144
	Child: h = 8 g = 7 f = 15 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 8 g = 7 f = 15 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
		New node added
		child_node.getWeight() = 144
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 144
	Child: h = 7 g = 7 f = 14 w = 144
	is duplicate: h = 7 g = 7 f = 14
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 288
288

PrintQueue
		 h = 7 g = 7 f = 14 w = 288
		 h = 8 g = 7 f = 15 w = 144


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 288
w = 288
	Child: h = 8 g = 8 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 288
	Child: h = 6 g = 8 f = 14 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 8 f = 14 threshold: 16 w = 288
	Child: h = 8 g = 8 f = 16 w = 288
	is duplicate: h = 8 g = 8 f = 16
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 7 f = 15 w = 144
		 h = 6 g = 8 f = 14 w = 288
		 h = 8 g = 8 f = 16 w = 576


End PrintQueue
9: Raiz: h = 8 g = 7 f = 15 w  = 144
w = 144
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.53 prob = 0.2
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.57 prob = 0.166667
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.67 prob = 0.142857
b = 0
		Not added.
	Child: h = 8 g = 8 f = 16 w = 144
	is duplicate: h = 8 g = 8 f = 16
a = 0.28 prob = 0.125
b = 0
		Not added.

PrintQueue
		 h = 6 g = 8 f = 14 w = 288
		 h = 8 g = 8 f = 16 w = 1152


End PrintQueue
10: Raiz: h = 6 g = 8 f = 14 w  = 288
w = 288
	Child: h = 6 g = 9 f = 15 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 9 f = 15 threshold: 16 w = 288
	Child: h = 7 g = 9 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 288

PrintQueue
		 h = 8 g = 8 f = 16 w = 1152
		 h = 6 g = 9 f = 15 w = 288
		 h = 7 g = 9 f = 16 w = 288


End PrintQueue
11: Raiz: h = 8 g = 8 f = 16 w  = 1152
w = 1152
	Child: h = 7 g = 9 f = 16 w = 1152
	is duplicate: h = 7 g = 9 f = 16
a = 0.75 prob = 0.8
b = 1
		Added even though is duplicate.
		w = 1440
1440
	Child: h = 7 g = 9 f = 16 w = 1152
	is duplicate: h = 7 g = 9 f = 16
a = 0.54 prob = 0.444444
b = 0
		Not added.

PrintQueue
		 h = 6 g = 9 f = 15 w = 288
		 h = 7 g = 9 f = 16 w = 2592


End PrintQueue
12: Raiz: h = 6 g = 9 f = 15 w  = 288
w = 288
	Child: h = 6 g = 10 f = 16 w = 288
		New node added
		child_node.getWeight() = 288
		Child: h = 6 g = 10 f = 16 threshold: 16 w = 288
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0.76 prob = 0.5
b = 0
		Not added.
	Child: h = 6 g = 10 f = 16 w = 288
	is duplicate: h = 6 g = 10 f = 16
a = 0.48 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 2592
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
13: Raiz: h = 7 g = 9 f = 16 w  = 2592
w = 2592
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 2592
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16

PrintQueue
		 h = 6 g = 10 f = 16 w = 864


End PrintQueue
14: Raiz: h = 6 g = 10 f = 16 w  = 864
w = 864
	Child: h = 6 g = 11 f = 17 w = 864
	Node was pruned!
	Child: h = 6 g = 11 f = 17 threshold: 16
	Child: h = 7 g = 11 f = 18 w = 864
	Node was pruned!
	Child: h = 7 g = 11 f = 18 threshold: 16
count1 = 7
count2 = 14
print boolean: 
bount = 19
1 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 
1 1 2 4 12 36 144 288 144 288 1152 288 2592 864 
expansions = 5816
**********
p = 5816
prePre = 1403.24
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.37 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.69 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.19 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.92 prob = 0.5
b = 0
		Not added.
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.93 prob = 0.333333
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 48


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 48
w = 48
	Child: h = 7 g = 7 f = 14 w = 48
		New node added
		child_node.getWeight() = 48
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 48
	Child: h = 7 g = 7 f = 14 w = 48
	is duplicate: h = 7 g = 7 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 96


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 96
w = 96
	Child: h = 8 g = 8 f = 16 w = 96
		New node added
		child_node.getWeight() = 96
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 96
	Child: h = 8 g = 8 f = 16 w = 96
	is duplicate: h = 8 g = 8 f = 16
a = 0.62 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192

PrintQueue
		 h = 7 g = 9 f = 16 w = 192


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 192
w = 192
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 192
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 8
1 0 1 1 0 0 0 0 
1 1 2 4 8 16 48 96 192 192 
expansions = 560
**********
p = 560
prePre = 1402.39
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.45 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.77 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.73 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.75 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.17 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.55 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 7
1 0 1 0 0 1 0 
1 1 2 4 8 16 32 32 64 128 
expansions = 288
**********
p = 288
prePre = 1401.27
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.02 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8
	Child: h = 7 g = 5 f = 12 w = 8
	is duplicate: h = 7 g = 5 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 16


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 16
w = 16
	Child: h = 8 g = 6 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 16
	Child: h = 8 g = 6 f = 14 w = 16
	is duplicate: h = 8 g = 6 f = 14
a = 0.24 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 6 f = 14 w = 32


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 32
w = 32
	Child: h = 7 g = 7 f = 14 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 32
	Child: h = 7 g = 7 f = 14 w = 32
	is duplicate: h = 7 g = 7 f = 14
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 7 f = 14 w = 64


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 64
w = 64
	Child: h = 8 g = 8 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 64
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.41 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128
	Child: h = 8 g = 8 f = 16 w = 64
	is duplicate: h = 8 g = 8 f = 16
a = 0.26 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 192
192

PrintQueue
		 h = 8 g = 8 f = 16 w = 192


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 192
w = 192
	Child: h = 7 g = 9 f = 16 w = 192
		New node added
		child_node.getWeight() = 192
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 192
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.97 prob = 0.5
b = 0
		Not added.
	Child: h = 7 g = 9 f = 16 w = 192
	is duplicate: h = 7 g = 9 f = 16
a = 0.27 prob = 0.333333
b = 1
		Added even though is duplicate.
		w = 576
576

PrintQueue
		 h = 7 g = 9 f = 16 w = 576


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 576
w = 576
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 576
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 8
count2 = 10
print boolean: 
bount = 10
1 0 1 0 1 1 1 1 0 1 
1 1 2 4 8 16 32 64 192 576 
expansions = 896
**********
p = 896
prePre = 1400.76
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.65 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.95 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4

PrintQueue
		 h = 7 g = 5 f = 12 w = 4


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 4
w = 4
	Child: h = 8 g = 6 f = 14 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 4
	Child: h = 8 g = 6 f = 14 w = 4
	is duplicate: h = 8 g = 6 f = 14
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 8
8

PrintQueue
		 h = 8 g = 6 f = 14 w = 8


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 8
w = 8
	Child: h = 7 g = 7 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 8
	Child: h = 7 g = 7 f = 14 w = 8
	is duplicate: h = 7 g = 7 f = 14
a = 0.94 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.23 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.13 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 0 1 0 1 1 
1 1 2 2 4 4 8 16 32 64 
expansions = 134
**********
p = 134
prePre = 1399.49
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 2
2

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2
	Child: h = 7 g = 3 f = 10 w = 2
	is duplicate: h = 7 g = 3 f = 10
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 3 f = 10 w = 4


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 4
w = 4
	Child: h = 8 g = 4 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 4
	Child: h = 8 g = 4 f = 12 w = 4
	is duplicate: h = 8 g = 4 f = 12
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 4 f = 12 w = 8


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 8
w = 8
	Child: h = 7 g = 5 f = 12 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 8

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.6 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.14 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.54 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
1 0 0 0 1 0 
1 1 2 4 8 8 16 16 32 64 
expansions = 152
**********
p = 152
prePre = 1398.24
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.74 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.04 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.88 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.76 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16

PrintQueue
		 h = 7 g = 7 f = 14 w = 16


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 16
w = 16
	Child: h = 8 g = 8 f = 16 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 16
	Child: h = 8 g = 8 f = 16 w = 16
	is duplicate: h = 8 g = 8 f = 16
a = 0.08 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 32
32

PrintQueue
		 h = 8 g = 8 f = 16 w = 32


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 32
w = 32
	Child: h = 7 g = 9 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 32
	Child: h = 7 g = 9 f = 16 w = 32
	is duplicate: h = 7 g = 9 f = 16
a = 0.1 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 4
count2 = 10
print boolean: 
bount = 6
0 1 0 0 1 1 
1 1 2 2 4 8 16 16 32 64 
expansions = 146
**********
p = 146
prePre = 1396.98
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.79 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.3 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.5 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.26 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.93 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.78 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64

PrintQueue
		 h = 7 g = 9 f = 16 w = 64


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 64
w = 64
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 64
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 3
count2 = 10
print boolean: 
bount = 6
0 1 0 1 0 0 
1 1 2 2 4 8 16 32 64 64 
expansions = 194
**********
p = 194
prePre = 1395.78
**********

PrintQueue
		 h = 8 g = 0 f = 8 w = 1


End PrintQueue
1: Raiz: h = 8 g = 0 f = 8 w  = 1
w = 1
	Child: h = 7 g = 1 f = 8 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 7 g = 1 f = 8 threshold: 16 w = 1

PrintQueue
		 h = 7 g = 1 f = 8 w = 1


End PrintQueue
2: Raiz: h = 7 g = 1 f = 8 w  = 1
w = 1
	Child: h = 8 g = 2 f = 10 w = 1
		New node added
		child_node.getWeight() = 1
		Child: h = 8 g = 2 f = 10 threshold: 16 w = 1
	Child: h = 8 g = 2 f = 10 w = 1
	is duplicate: h = 8 g = 2 f = 10
a = 0.85 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 8 g = 2 f = 10 w = 2


End PrintQueue
3: Raiz: h = 8 g = 2 f = 10 w  = 2
w = 2
	Child: h = 7 g = 3 f = 10 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 7 g = 3 f = 10 threshold: 16 w = 2

PrintQueue
		 h = 7 g = 3 f = 10 w = 2


End PrintQueue
4: Raiz: h = 7 g = 3 f = 10 w  = 2
w = 2
	Child: h = 8 g = 4 f = 12 w = 2
		New node added
		child_node.getWeight() = 2
		Child: h = 8 g = 4 f = 12 threshold: 16 w = 2
	Child: h = 8 g = 4 f = 12 w = 2
	is duplicate: h = 8 g = 4 f = 12
a = 0.33 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 4
4

PrintQueue
		 h = 8 g = 4 f = 12 w = 4


End PrintQueue
5: Raiz: h = 8 g = 4 f = 12 w  = 4
w = 4
	Child: h = 7 g = 5 f = 12 w = 4
		New node added
		child_node.getWeight() = 4
		Child: h = 7 g = 5 f = 12 threshold: 16 w = 4
	Child: h = 7 g = 5 f = 12 w = 4
	is duplicate: h = 7 g = 5 f = 12
a = 0.51 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 5 f = 12 w = 8


End PrintQueue
6: Raiz: h = 7 g = 5 f = 12 w  = 8
w = 8
	Child: h = 8 g = 6 f = 14 w = 8
		New node added
		child_node.getWeight() = 8
		Child: h = 8 g = 6 f = 14 threshold: 16 w = 8
	Child: h = 8 g = 6 f = 14 w = 8
	is duplicate: h = 8 g = 6 f = 14
a = 0.16 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 16
16

PrintQueue
		 h = 8 g = 6 f = 14 w = 16


End PrintQueue
7: Raiz: h = 8 g = 6 f = 14 w  = 16
w = 16
	Child: h = 7 g = 7 f = 14 w = 16
		New node added
		child_node.getWeight() = 16
		Child: h = 7 g = 7 f = 14 threshold: 16 w = 16
	Child: h = 7 g = 7 f = 14 w = 16
	is duplicate: h = 7 g = 7 f = 14
a = 0.68 prob = 0.5
b = 0
		Not added.

PrintQueue
		 h = 7 g = 7 f = 14 w = 32


End PrintQueue
8: Raiz: h = 7 g = 7 f = 14 w  = 32
w = 32
	Child: h = 8 g = 8 f = 16 w = 32
		New node added
		child_node.getWeight() = 32
		Child: h = 8 g = 8 f = 16 threshold: 16 w = 32
	Child: h = 8 g = 8 f = 16 w = 32
	is duplicate: h = 8 g = 8 f = 16
a = 0.09 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 64
64

PrintQueue
		 h = 8 g = 8 f = 16 w = 64


End PrintQueue
9: Raiz: h = 8 g = 8 f = 16 w  = 64
w = 64
	Child: h = 7 g = 9 f = 16 w = 64
		New node added
		child_node.getWeight() = 64
		Child: h = 7 g = 9 f = 16 threshold: 16 w = 64
	Child: h = 7 g = 9 f = 16 w = 64
	is duplicate: h = 7 g = 9 f = 16
a = 0.06 prob = 0.5
b = 1
		Added even though is duplicate.
		w = 128
128

PrintQueue
		 h = 7 g = 9 f = 16 w = 128


End PrintQueue
10: Raiz: h = 7 g = 9 f = 16 w  = 128
w = 128
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
	Child: h = 8 g = 10 f = 18 w = 128
	Node was pruned!
	Child: h = 8 g = 10 f = 18 threshold: 16
count1 = 5
count2 = 10
print boolean: 
bount = 7
0 1 0 1 0 1 1 
1 1 2 2 4 8 16 32 64 128 
expansions = 258
**********
p = 258
prePre = 1394.64
**********
totalPrediction = 1394.64
 ____________________________________
|   total numero of call step() = 0   |
 ____________________________________
Actual search time: 1.46s [t=1.47s]
Search time: 1.46s
Total time: 1.47s
Peak memory: 7376 KB
VmRSS memory: 1048 KB
VmHWM memory: 1048 KB
destructor of HST eliminates all the hashed state descriptions
destructor of HST eliminates all the hashed state descriptions
destructor of HST eliminates all the hashed state descriptions
destructor of HST eliminates all the hashed state descriptions
destructor of HST eliminates all the hashed state descriptions
