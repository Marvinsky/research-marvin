#include <iostream>
#include <fstream>
#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <string>
#include <cstdio>
#include <cstdlib>


#include <dirent.h>
#include <vector>


using namespace std;


void create_report2(string astarText, string fileName, string pasta, string heuristic) {
        cout<<astarText<<"\n\n";

	string fnivel = "fnivel:"; //nivel 
	string nodosNivel = "nodesGeneratedByLevel:"; //number of nodes generated by level
	string time = "time0:"; //timer
	string amount;
	ifstream astar;
	
	//string path = "/home/marvin/marvin/testss/";	
	//path += astarText;
	astar.open(astarText.c_str());
       
        //create output file
	//stringstream Resultado;
	string output;

 	/*output += "Astar";
        output += pasta;
	Resultado<<nroProb + 1;
	output += Resultado.str();
	output += string(".txt");*/
        output = fileName;    
        output =  pasta+"/"+output;
	output = "testss/"+heuristic+"/report/"+output;
	output = "marvin/" + output;
	output = "marvin/" + output;
	output = "/home/" + output;	
        cout<<output.c_str()<<endl;

	ofstream outputFile;
	outputFile.open(output.c_str(), ios::out);
	
	outputFile<<"\t"<<astarText.c_str()<<endl;
 	outputFile<<"\tf\t\t# Nodes\t\tRuntime(s)\n";	
	while (astar>>amount) {	
		if (amount == fnivel) {
			astar>>amount;
			outputFile<<"\t"<<amount<<"\t";
		} else if (amount == nodosNivel) {
			astar>>amount;
			outputFile<<"\t"<<amount<<"\t";
		} else if  (amount == time) {
			astar>>amount;
			outputFile<<"\t"<<amount<<"\n";
		}
	}
	outputFile.close();

}


void create_report1(string heuristic, int countProblems) {

	int countRead = 0;
	do {

		ifstream readFile("h/report/d/entradalmcut-blocks.txt");
        	string pasta;
        	string domain;
		std::vector<string> fileNames;

		readFile>>pasta;

		string  pastaReporte = "mkdir /home/marvin/marvin/testss/"+heuristic+"/report/"+pasta;
		system(pastaReporte.c_str());     
 
        	string output;
        	output = "resultado/";
        	output =  pasta+"/"+output;
		output = "testss/"+heuristic+"/problemas/"+output;
		output = "marvin/" + output;
		output = "marvin/" + output;
		output = "/home/" + output;	
		//cout<<output.c_str()<<endl; 

		char input[] = "/home/marvin/marvin/testss/lmcut/problemas/blocks/resultado/";

        	DIR *dir;
        	struct dirent *ent;
        
       	 	dir = opendir(output.c_str());
        	if (dir != NULL) {
	    		while ((ent = readdir(dir)) != NULL) {
				string fileName = ent->d_name;
				int sizeName = fileName.size();
                		if ((sizeName == 1)  || (sizeName == 2)) {
					//TODO
				} else {
		    			fileNames.push_back(fileName);
				}
            		}
            		closedir(dir);
		} else {
	    		cout<<"Error trying to open the directory."<<endl;
		}


        	for (std::vector<string>::size_type i = 0; i != fileNames.size(); i++) {
			string output2 = output+fileNames.at(i);
	        	cout<<output2.c_str()<<" - "<<fileNames.at(i)<<endl;
			create_report2(output2.c_str(), fileNames.at(i), pasta, heuristic);
		}

	    	countRead = countRead + 1;
		} while (countRead < countProblems);
}


void create_report() {
	ifstream readFile("h/report/oneHeuristicReport.txt");
	int quantidade_total_opt;
	int total_heuristics;	 
	readFile>>quantidade_total_opt;
	readFile>>total_heuristics;
	
	int counter = 0;
	string heuristic;
	do {
		readFile>>heuristic;
		create_report1(heuristic, quantidade_total_opt);
		counter++;
	} while (counter < total_heuristics);
}




int main() {

	create_report();

	return 0;
}
