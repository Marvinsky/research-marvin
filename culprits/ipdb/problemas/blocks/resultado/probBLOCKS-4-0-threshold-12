reading input... [t=0.00s]
Simplifying transitions... done!
done reading input! [t=0.00s]
building causal graph...done! [t=0.00s]
packing state variables...done! [t=0.00s]
Variables: 9
Facts: 30
Bytes per state: 4
done initalizing global data [t=0.00s]
calling ScalarEvaluator Min parser
calling ScalarEvaluator Min parser
Average operator cost: 1.00
PDB collection construction time: 0.00s
done calculating initial pattern collection and candidate patterns for the search
current collection size is 15
current initial h value: 6
pattern: [1, 6] - improvement: 5
pattern: [2, 6] - improvement: 13
pattern: [3, 7] - improvement: 15
pattern: [4, 8] - improvement: 1
pattern: [5, 6] - improvement: 5
found a better pattern with improvement 15
pattern: [3, 7]
Hill climbing time so far: 0.01s
current collection size is 25
current initial h value: 6
pattern: [1, 6] - improvement: 7
pattern: [2, 6] - improvement: 17
pattern: [4, 8] - improvement: 3
pattern: [5, 6] - improvement: 7
pattern: [2, 3, 7] - improvement: 30
pattern: [3, 5, 7] - improvement: 69
pattern: [3, 6, 7] - improvement: 99
pattern: [3, 7, 8] - improvement: 16
found a better pattern with improvement 99
pattern: [3, 6, 7]
Hill climbing time so far: 0.02s
current collection size is 75
current initial h value: 6
pattern: [1, 6] - improvement: 4
pattern: [2, 6] - improvement: 17
pattern: [4, 8] - improvement: 2
pattern: [5, 6] - improvement: 4
pattern: [3, 5, 7] - improvement: 36
pattern: [3, 7, 8] - improvement: 12
pattern: [1, 3, 6, 7] - improvement: 23
pattern: [2, 3, 6, 7] - improvement: 28
pattern: [3, 5, 6, 7] - improvement: 124
pattern: [3, 6, 7, 8] - improvement: 127
found a better pattern with improvement 127
pattern: [3, 6, 7, 8]
Hill climbing time so far: 0.04s
current collection size is 325
current initial h value: 6
pattern: [1, 6] - improvement: 6
pattern: [2, 6] - improvement: 13
pattern: [4, 8] - improvement: 4
pattern: [5, 6] - improvement: 6
pattern: [3, 5, 7] - improvement: 37
pattern: [1, 3, 6, 7] - improvement: 18
pattern: [2, 3, 6, 7] - improvement: 28
pattern: [3, 5, 6, 7] - improvement: 112
pattern: [0, 3, 6, 7, 8] - improvement: 90
pattern: [1, 3, 6, 7, 8] - improvement: 291
pattern: [2, 3, 6, 7, 8] - improvement: 221
pattern: [3, 4, 6, 7, 8] - improvement: 107
pattern: [3, 5, 6, 7, 8] - improvement: 386
found a better pattern with improvement 386
pattern: [3, 5, 6, 7, 8]
Hill climbing time so far: 0.06s
current collection size is 825
current initial h value: 6
pattern: [2, 6] - improvement: 7
pattern: [2, 3, 6, 7] - improvement: 7
pattern: [2, 3, 6, 7, 8] - improvement: 125
pattern: [3, 4, 6, 7, 8] - improvement: 113
pattern: [0, 3, 5, 6, 7, 8] - improvement: 218
pattern: [1, 3, 5, 6, 7, 8] - improvement: 153
pattern: [2, 3, 5, 6, 7, 8] - improvement: 400
pattern: [3, 4, 5, 6, 7, 8] - improvement: 113
found a better pattern with improvement 400
pattern: [2, 3, 5, 6, 7, 8]
Hill climbing time so far: 0.08s
current collection size is 1825
current initial h value: 6
pattern: [3, 4, 6, 7, 8] - improvement: 64
pattern: [0, 3, 5, 6, 7, 8] - improvement: 194
pattern: [1, 3, 5, 6, 7, 8] - improvement: 144
pattern: [3, 4, 5, 6, 7, 8] - improvement: 82
pattern: [0, 2, 3, 5, 6, 7, 8] - improvement: 497
pattern: [1, 2, 3, 5, 6, 7, 8] - improvement: 222
pattern: [2, 3, 4, 5, 6, 7, 8] - improvement: 102
found a better pattern with improvement 497
pattern: [0, 2, 3, 5, 6, 7, 8]
Hill climbing time so far: 0.11s
current collection size is 6825
current initial h value: 6
pattern: [4, 8] - improvement: 3
pattern: [3, 4, 6, 7, 8] - improvement: 61
pattern: [1, 3, 5, 6, 7, 8] - improvement: 107
pattern: [3, 4, 5, 6, 7, 8] - improvement: 61
pattern: [1, 2, 3, 5, 6, 7, 8] - improvement: 186
pattern: [2, 3, 4, 5, 6, 7, 8] - improvement: 75
pattern: [0, 1, 2, 3, 5, 6, 7, 8] - improvement: 288
pattern: [0, 2, 3, 4, 5, 6, 7, 8] - improvement: 132
found a better pattern with improvement 288
pattern: [0, 1, 2, 3, 5, 6, 7, 8]
Hill climbing time so far: 0.15s
current collection size is 16825
current initial h value: 6
pattern: [4, 8] - improvement: 2
pattern: [3, 4, 6, 7, 8] - improvement: 50
pattern: [3, 4, 5, 6, 7, 8] - improvement: 50
pattern: [2, 3, 4, 5, 6, 7, 8] - improvement: 61
pattern: [0, 2, 3, 4, 5, 6, 7, 8] - improvement: 123
pattern: [0, 1, 2, 3, 4, 5, 6, 7, 8] - improvement: 163
found a better pattern with improvement 163
pattern: [0, 1, 2, 3, 4, 5, 6, 7, 8]
Hill climbing time so far: 0.18s
current collection size is 36825
current initial h value: 6
Improvement below threshold. Stop hill climbing.
Pruned 8 of 9 cliques
Pruned 10 of 11 PDBs
Dominance pruning took 0.00s
iPDB: iterations = 9
iPDB: num_patterns = 1
iPDB: size = 20000
iPDB: generated = 43
iPDB: rejected = 0
iPDB: max_pdb_size = 20000
iPDB: hill climbing time: 0.22s
Pattern generation (Haslum et al.) time: 0.22s
returning MinEvaluator
Conducting best first search with reopening closed nodes, (real) bound = 2147483647
77: heuristics.size() = 3
Initializing landmark cut heuristic...
0 = 6
1 = 6
Initializing merge-and-shrink heuristic...
Merge strategy: linear
Linear merge strategy: Variable order type: CG/GOAL, tie breaking on level (main)
Shrink strategy: f-preserving
Transition system size limit: 50000
Transition system size limit right before merge: 50000
Prefer shrinking high or low f states: high
Prefer shrinking high or low h states: low
Label reduction: all transition systems with fixpoint computation
System order: random
Expensive statistics: disabled
Building transition system...
Building atomic transition systems... 
Atomic transition system #0: computing distances using unit-cost algorithm
Atomic transition system #1: computing distances using unit-cost algorithm
Atomic transition system #2: computing distances using unit-cost algorithm
Atomic transition system #3: computing distances using unit-cost algorithm
Atomic transition system #4: computing distances using unit-cost algorithm
Atomic transition system #5: computing distances using unit-cost algorithm
Atomic transition system #6: computing distances using unit-cost algorithm
Atomic transition system #7: computing distances using unit-cost algorithm
Atomic transition system #8: computing distances using unit-cost algorithm
Merging transition systems...
First variable: 8
Next variable: 5
Atomic transition system #8: 5 states, ???/13 arcs, 2268 bytes
Atomic transition system #8: init h=2, max f=4, max g=2, max h=2 [t=0.22s]
Atomic transition system #5: 2 states, ???/3 arcs, 2020 bytes
Atomic transition system #5: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Atomic transition system #5: 2 states, ???/3 arcs, 2020 bytes
Atomic transition system #5: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Atomic transition system #8: 5 states, ???/13 arcs, 2268 bytes
Atomic transition system #8: init h=2, max f=4, max g=2, max h=2 [t=0.22s]
Merging atomic transition system #8 and atomic transition system #5
Transition system (2/9 vars): computing distances using unit-cost algorithm
Transition system (2/9 vars): 10 states, ???/27 arcs, 2532 bytes
Transition system (2/9 vars): init h=2, max f=6, max g=3, max h=3 [t=0.22s]
Next variable: 7
Transition system (2/9 vars): 10 states, ???/27 arcs, 2532 bytes
Transition system (2/9 vars): init h=2, max f=6, max g=3, max h=3 [t=0.22s]
Atomic transition system #7: 5 states, ???/13 arcs, 2268 bytes
Atomic transition system #7: init h=2, max f=4, max g=2, max h=2 [t=0.22s]
Atomic transition system #7: 5 states, ???/13 arcs, 2268 bytes
Atomic transition system #7: init h=2, max f=4, max g=2, max h=2 [t=0.22s]
Transition system (2/9 vars): 10 states, ???/27 arcs, 2532 bytes
Transition system (2/9 vars): init h=2, max f=6, max g=3, max h=3 [t=0.22s]
Merging transition system (2/9 vars) and atomic transition system #7
Transition system (3/9 vars): computing distances using unit-cost algorithm
Transition system (3/9 vars): 50 states, ???/195 arcs, 5184 bytes
Transition system (3/9 vars): init h=4, max f=10, max g=5, max h=5 [t=0.22s]
Next variable: 6
Transition system (3/9 vars): 50 states, ???/195 arcs, 5184 bytes
Transition system (3/9 vars): init h=4, max f=10, max g=5, max h=5 [t=0.22s]
Atomic transition system #6: 5 states, ???/13 arcs, 2268 bytes
Atomic transition system #6: init h=2, max f=4, max g=2, max h=2 [t=0.22s]
Label reduction: 32 labels, 30 after reduction
Atomic transition system #6: 5 states, ???/13 arcs, 2252 bytes
Atomic transition system #6: init h=2, max f=4, max g=2, max h=2 [t=0.22s]
Transition system (3/9 vars): 50 states, ???/195 arcs, 5152 bytes
Transition system (3/9 vars): init h=4, max f=10, max g=5, max h=5 [t=0.22s]
Merging transition system (3/9 vars) and atomic transition system #6
Transition system (4/9 vars): computing distances using unit-cost algorithm
Transition system (4/9 vars): 250 states, ???/1275 arcs, 21248 bytes
Transition system (4/9 vars): init h=6, max f=14, max g=7, max h=7 [t=0.22s]
Next variable: 4
Transition system (4/9 vars): 250 states, ???/1275 arcs, 21248 bytes
Transition system (4/9 vars): init h=6, max f=14, max g=7, max h=7 [t=0.22s]
Atomic transition system #4: 2 states, ???/5 arcs, 2036 bytes
Atomic transition system #4: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Label reduction: 30 labels, 26 after reduction
Atomic transition system #4: 2 states, ???/5 arcs, 2004 bytes
Atomic transition system #4: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Transition system (4/9 vars): 250 states, ???/1275 arcs, 21184 bytes
Transition system (4/9 vars): init h=6, max f=14, max g=7, max h=7 [t=0.22s]
Merging transition system (4/9 vars) and atomic transition system #4
Transition system (5/9 vars): computing distances using unit-cost algorithm
Transition system (5/9 vars): 500 states, ???/2850 arcs, 45756 bytes
Transition system (5/9 vars): init h=6, max f=17, max g=12, max h=9 [t=0.22s]
Next variable: 3
Transition system (5/9 vars): 500 states, ???/2850 arcs, 45756 bytes
Transition system (5/9 vars): init h=6, max f=17, max g=12, max h=9 [t=0.22s]
Atomic transition system #3: 2 states, ???/5 arcs, 2004 bytes
Atomic transition system #3: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Label reduction: 26 labels, 21 after reduction
Atomic transition system #3: 2 states, ???/5 arcs, 1964 bytes
Atomic transition system #3: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Transition system (5/9 vars): 500 states, ???/2850 arcs, 45676 bytes
Transition system (5/9 vars): init h=6, max f=17, max g=12, max h=9 [t=0.22s]
Merging transition system (5/9 vars) and atomic transition system #3
Transition system (6/9 vars): computing distances using unit-cost algorithm
Transition system (6/9 vars): 1000 states, ???/6300 arcs, 96604 bytes
Transition system (6/9 vars): init h=6, max f=19, max g=12, max h=11 [t=0.22s]
Next variable: 2
Transition system (6/9 vars): 1000 states, ???/6300 arcs, 96604 bytes
Transition system (6/9 vars): init h=6, max f=19, max g=12, max h=11 [t=0.22s]
Atomic transition system #2: 2 states, ???/5 arcs, 1964 bytes
Atomic transition system #2: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Label reduction: 21 labels, 15 after reduction
Atomic transition system #2: 2 states, ???/5 arcs, 1916 bytes
Atomic transition system #2: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Transition system (6/9 vars): 1000 states, ???/6300 arcs, 96508 bytes
Transition system (6/9 vars): init h=6, max f=19, max g=12, max h=11 [t=0.22s]
Merging transition system (6/9 vars) and atomic transition system #2
Transition system (7/9 vars): computing distances using unit-cost algorithm
Transition system (7/9 vars): 2000 states, ???/13800 arcs, 205516 bytes
Transition system (7/9 vars): init h=6, max f=21, max g=12, max h=13 [t=0.22s]
Next variable: 1
Transition system (7/9 vars): 2000 states, ???/13800 arcs, 205516 bytes
Transition system (7/9 vars): init h=6, max f=21, max g=12, max h=13 [t=0.22s]
Atomic transition system #1: 2 states, ???/5 arcs, 1916 bytes
Atomic transition system #1: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Label reduction: 15 labels, 11 after reduction
Atomic transition system #1: 2 states, ???/5 arcs, 1884 bytes
Atomic transition system #1: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Transition system (7/9 vars): 2000 states, ???/13800 arcs, 205452 bytes
Transition system (7/9 vars): init h=6, max f=21, max g=12, max h=13 [t=0.22s]
Merging transition system (7/9 vars) and atomic transition system #1
Transition system (8/9 vars): computing distances using unit-cost algorithm
Transition system (8/9 vars): unreachable: 1016 states, irrelevant: 0 states
Transition system (8/9 vars): applying abstraction (4000 to 2984 states)
Transition system (8/9 vars): applying abstraction to lookup table
Transition system (8/9 vars): 2984 states, ???/18576 arcs, 363628 bytes
Transition system (8/9 vars): init h=6, max f=23, max g=12, max h=13 [t=0.22s]
Next variable: 0
Transition system (8/9 vars): 2984 states, ???/18576 arcs, 363628 bytes
Transition system (8/9 vars): init h=6, max f=23, max g=12, max h=13 [t=0.22s]
Atomic transition system #0: 5 states, ???/13 arcs, 2100 bytes
Atomic transition system #0: init h=0, max f=2, max g=2, max h=0 [t=0.22s]
Label reduction: 11 labels, 9 after reduction
Atomic transition system #0: 5 states, ???/13 arcs, 2084 bytes
Atomic transition system #0: init h=0, max f=2, max g=2, max h=0 [t=0.22s]
Transition system (8/9 vars): 2984 states, ???/18576 arcs, 325712 bytes
Transition system (8/9 vars): init h=6, max f=23, max g=12, max h=13 [t=0.22s]
Merging transition system (8/9 vars) and atomic transition system #0
Transition system (9/9 vars): computing distances using unit-cost algorithm
Transition system (9/9 vars): unreachable: 14795 states, irrelevant: 0 states
Transition system (9/9 vars): applying abstraction (14920 to 125 states)
Transition system (9/9 vars): applying abstraction to lookup table
Transition system (9/9 vars): 125 states, ???/272 arcs, 102452 bytes
Transition system (9/9 vars): init h=6, max f=18, max g=6, max h=12 [t=0.23s]
Transition system (9/9 vars): 125 states, ???/272 arcs, 102452 bytes
Transition system (9/9 vars): init h=6, max f=18, max g=6, max h=12 [t=0.23s]
Order of merged transition systems: 8 5, 9 7, 10 6, 11 4, 12 3, 13 2, 14 1, 15 0, 
Done initializing merge-and-shrink heuristic [0.01s]
initial h value: 6
Estimated peak memory for transition system: 102452 bytes
2 = 6
	Mining_h[0]:6
	Mining_h[1]:6
	Mining_h[2]:6
f = 0 [1 evaluated, 0 expanded, t=0.23s, 4620 KB]
Best heuristic value: 6/6/6 [g=0, 1 evaluated, 0 expanded, t=0.23s, 4620 KB]
probes = 100

print h_initial_v
6/6/6
print b_initial_v
1/1/1
initial_state_id = #0

printNode:
6/6/6, g = 0, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 0
w = 1.00
bc new is added
	bc : 1/1/1, cc : 1.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:

printQueue End:
	new node added.

printNode:
7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
6/6/6
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 1, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
6/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 1, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 1, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
6/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 1, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 1, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 71
a = 0.71
	Not added.

*********************************************


printNode:
5/5/5, g = 1, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 1
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
6/6/6
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 2, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 2, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 2, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 2, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 2, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 80
a = 0.80
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 2, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 2, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 87
a = 0.87
	Not added.

*********************************************


printNode:
4/4/4, g = 2, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 2
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 3.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
6/6/6
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 3, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
6/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 3, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 3, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 4.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
6/6/6
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 4, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 4, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 4, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 41
a = 0.41
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 4, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 5.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
6/6/6
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 5, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 5, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 6.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
6/6/6
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 6, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 6, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 6, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 7.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 8.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 9.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9.00, newcc : 10.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10.00, newcc : 11.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 11.00, newcc : 12.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 13.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 13.00, newcc : 14.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 14.00, newcc : 15.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 95
a = 0.95
	Not added.

*********************************************


printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 15.00, newcc : 16.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 16.00, newcc : 17.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 35
a = 0.35
	Added even though is duplicate.

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 17.00, newcc : 18.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 18.00, newcc : 19.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 19.00, newcc : 20.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 20.00, newcc : 22.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 22.00, newcc : 24.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 38
a = 0.38
	Added even though is duplicate.

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 24.00, newcc : 26.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 26.00, newcc : 28.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 28.00, newcc : 30.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 30.00, newcc : 34.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 34.00, newcc : 38.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 38.00, newcc : 42.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 43.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 47
a = 0.47
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 43.00, newcc : 44.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 28
a = 0.28
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 44.00, newcc : 45.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 45.00, newcc : 46.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 46.00, newcc : 47.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 47.00, newcc : 48.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 48.00, newcc : 49.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 49.00, newcc : 50.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 50.00, newcc : 51.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 6
a = 0.06
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 51.00, newcc : 52.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 63
a = 0.63
	Not added.

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 52.00, newcc : 53.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 53.00, newcc : 54.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 54.00, newcc : 55.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 55.00, newcc : 57.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 57.00, newcc : 59.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 59.00, newcc : 61.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 61.00, newcc : 63.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 77
a = 0.77
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 63.00, newcc : 65.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.40
rand_100 = 98
a = 0.98
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 65.00, newcc : 67.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 67.00, newcc : 69.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 69.00, newcc : 71.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 71.00, newcc : 73.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 73.00, newcc : 75.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 75.00, newcc : 77.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 77.00, newcc : 79.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 79.00, newcc : 84.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 84.00, newcc : 89.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 89.00, newcc : 94.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 94.00, newcc : 99.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 99.00, newcc : 100.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
7/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 4, f = 7/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 4, f = 7/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 22
a = 0.22
	Added even though is duplicate.

*********************************************


printNode:
3/6/6, g = 4, f = 7/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 100.00, newcc : 101.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 101.00, newcc : 102.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 92
a = 0.92
	Not added.

*********************************************


printNode:
3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 102.00, newcc : 103.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 103.00, newcc : 104.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 56
a = 0.56
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 104.00, newcc : 105.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 105.00, newcc : 106.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 106.00, newcc : 109.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 5, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 5, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 5, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 109.00, newcc : 112.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 6, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 81
a = 0.81
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 6.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 17
a = 0.17
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 6, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 112.00, newcc : 115.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 7, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 7, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 115.00, newcc : 118.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 8, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 8, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 8, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 118.00, newcc : 121.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 121.00, newcc : 124.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 124.00, newcc : 127.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 127.00, newcc : 130.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 130.00, newcc : 133.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 133.00, newcc : 136.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 136.00, newcc : 139.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 57
a = 0.57
	Not added.

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 139.00, newcc : 142.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 142.00, newcc : 145.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 145.00, newcc : 148.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 148.00, newcc : 154.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 154.00, newcc : 160.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 160.00, newcc : 166.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 166.00, newcc : 169.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
prob = 0.38
rand_100 = 72
a = 0.72
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.27
rand_100 = 38
a = 0.38
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 169.00, newcc : 172.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 72
a = 0.72
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 172.00, newcc : 175.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 175.00, newcc : 178.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 178.00, newcc : 181.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 181.00, newcc : 184.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 184.00, newcc : 187.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 187.00, newcc : 190.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 190.00, newcc : 193.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 193.00, newcc : 199.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 199.00, newcc : 205.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 205.00, newcc : 211.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 211.00, newcc : 217.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 217.00, newcc : 220.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.75
rand_100 = 2
a = 0.02
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 6, f = 9/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 44
a = 0.44
	Not added.

*********************************************


printNode:
3/6/6, g = 6, f = 9/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 220.00, newcc : 223.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.75
rand_100 = 42
a = 0.42
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 223.00, newcc : 226.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.75
rand_100 = 56
a = 0.56
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
printNode End:
prob = 0.21
rand_100 = 38
a = 0.38
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 226.00, newcc : 229.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 229.00, newcc : 232.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 232.00, newcc : 244.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 244.00, newcc : 256.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
prob = 0.46
rand_100 = 62
a = 0.62
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 26.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 26.00, b_node_v = 1/1/1
printNode End:
prob = 0.32
rand_100 = 34
a = 0.34
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 256.00, newcc : 268.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 268.00, newcc : 280.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 280.00, newcc : 292.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 292.00, newcc : 304.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 304.00, newcc : 316.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 316.00, newcc : 328.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 328.00, newcc : 340.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 340.00, newcc : 352.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 352.00, newcc : 364.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 364.00, newcc : 376.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 376.00, newcc : 388.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 388.00, newcc : 400.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 400.00, newcc : 412.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.75
rand_100 = 48
a = 0.48
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
printNode End:
prob = 0.24
rand_100 = 7
a = 0.07
	Added even though is duplicate.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 412.00, newcc : 424.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 50.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 424.00, newcc : 436.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 50.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 50.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 436.00, newcc : 486.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 50.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 50.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 50.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 50.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 486.00, newcc : 536.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 50.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 50.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 50.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 536.00, newcc : 586.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 50.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 50.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 50.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 586.00, newcc : 636.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 50.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 50.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 50.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 636.00, newcc : 686.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 50.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 686.00, newcc : 736.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 736.00, newcc : 737.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 3
a = 0.03
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 737.00, newcc : 738.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 50
a = 0.50
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 738.00, newcc : 739.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 65
a = 0.65
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 739.00, newcc : 740.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:
prob = 0.06
rand_100 = 59
a = 0.59
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 740.00, newcc : 741.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 741.00, newcc : 742.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 742.00, newcc : 743.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
prob = 0.08
rand_100 = 22
a = 0.22
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 743.00, newcc : 744.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 95
a = 0.95
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 57
a = 0.57
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 744.00, newcc : 745.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 745.00, newcc : 746.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 746.00, newcc : 747.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 747.00, newcc : 748.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 748.00, newcc : 749.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 749.00, newcc : 750.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 750.00, newcc : 751.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 751.00, newcc : 752.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 752.00, newcc : 753.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 753.00, newcc : 754.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 754.00, newcc : 755.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 755.00, newcc : 756.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 756.00, newcc : 757.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 17.00, b_node_v = 1/1/1
printNode End:
prob = 0.06
rand_100 = 60
a = 0.60
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 18.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 18.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 20
a = 0.20
	Added even though is duplicate.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 757.00, newcc : 758.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 18.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 758.00, newcc : 759.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 759.00, newcc : 763.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 18.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 18.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 763.00, newcc : 767.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 18.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 767.00, newcc : 771.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 18.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 771.00, newcc : 775.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 18.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 775.00, newcc : 779.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 779.00, newcc : 783.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 783.00, newcc : 788.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 18.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 99
a = 0.99
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 18.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 788.00, newcc : 793.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 18.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 18.00, b_node_v = 1/1/1
printNode End:
prob = 0.22
rand_100 = 85
a = 0.85
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 23.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 23.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 793.00, newcc : 798.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 23.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 798.00, newcc : 803.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 803.00, newcc : 808.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 23.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 23.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 808.00, newcc : 813.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 23.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 813.00, newcc : 818.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 23.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 818.00, newcc : 823.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 23.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 823.00, newcc : 828.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 828.00, newcc : 833.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 23.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 23.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 833.00, newcc : 856.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 23.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 23.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 23.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 856.00, newcc : 879.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 879.00, newcc : 881.00
*******************Child #0********************

print h_child_v
4/8/8
print b_child_v
1/1/1
print f_child_v
10/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/8/8, g = 6, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 4/8/8, g = 6, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 6, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/6/6, g = 6, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 881.00, newcc : 883.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 4/8/8, g = 6, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
printNode End:
prob = 0.17
rand_100 = 93
a = 0.93
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/8/8, g = 6, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 883.00, newcc : 885.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/8/8, g = 6, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/8/8, g = 6, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/8/8, g = 6, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 885.00, newcc : 887.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/8/8, g = 6, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 887.00, newcc : 889.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 889.00, newcc : 891.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/8/8, g = 6, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/8/8, g = 6, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 891.00, newcc : 893.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/8/8, g = 6, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 893.00, newcc : 895.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/8/8, g = 6, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 895.00, newcc : 897.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/8/8, g = 6, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 897.00, newcc : 899.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 899.00, newcc : 901.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 901.00, newcc : 903.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/8/8, g = 6, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 903.00, newcc : 905.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 905.00, newcc : 917.00
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/8/8, g = 6, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 917.00, newcc : 929.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/8/8, g = 6, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 929.00, newcc : 941.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/8/8, g = 6, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 941.00, newcc : 943.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 943.00, newcc : 945.00
*******************Child #0********************

print h_child_v
4/8/8
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/8/8, g = 8, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/8/8, g = 8, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 945.00, newcc : 947.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/8/8, g = 8, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 947.00, newcc : 949.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/8/8, g = 8, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 949.00, newcc : 951.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 951.00, newcc : 952.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 73
a = 0.73
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 12
a = 0.12
	Added even though is duplicate.

*********************************************


printNode:
4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 952.00, newcc : 953.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 48
a = 0.48
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 953.00, newcc : 954.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 84
a = 0.84
	Not added.

*********************************************


printNode:
2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 954.00, newcc : 955.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 955.00, newcc : 956.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 956.00, newcc : 957.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 957.00, newcc : 958.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 958.00, newcc : 959.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 959.00, newcc : 960.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 960.00, newcc : 961.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 961.00, newcc : 962.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 962.00, newcc : 963.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 58
a = 0.58
	Not added.

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 963.00, newcc : 964.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 964.00, newcc : 965.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 965.00, newcc : 966.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 966.00, newcc : 968.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 968.00, newcc : 970.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 970.00, newcc : 972.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 972.00, newcc : 973.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 54
a = 0.54
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 973.00, newcc : 974.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 31
a = 0.31
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 974.00, newcc : 975.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 975.00, newcc : 976.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 976.00, newcc : 977.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 977.00, newcc : 978.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 978.00, newcc : 979.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 979.00, newcc : 980.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 980.00, newcc : 981.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 981.00, newcc : 983.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 983.00, newcc : 985.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 985.00, newcc : 987.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 987.00, newcc : 989.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 989.00, newcc : 990.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 40
a = 0.40
	Not added.

*********************************************


printNode:
3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 990.00, newcc : 991.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 991.00, newcc : 992.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 36
a = 0.36
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 992.00, newcc : 993.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 993.00, newcc : 994.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 994.00, newcc : 997.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
printNode End:
prob = 0.19
rand_100 = 24
a = 0.24
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 997.00, newcc : 1000.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 50
a = 0.50
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 20
a = 0.20
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1000.00, newcc : 1003.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1003.00, newcc : 1006.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1006.00, newcc : 1009.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1009.00, newcc : 1012.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1012.00, newcc : 1015.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1015.00, newcc : 1018.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1018.00, newcc : 1021.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1021.00, newcc : 1024.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1024.00, newcc : 1027.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1027.00, newcc : 1030.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1030.00, newcc : 1033.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1033.00, newcc : 1036.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 9.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1036.00, newcc : 1045.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 9.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1045.00, newcc : 1054.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 9.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1054.00, newcc : 1063.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 9.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1063.00, newcc : 1072.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 9.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1072.00, newcc : 1081.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 9.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1081.00, newcc : 1090.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1090.00, newcc : 1091.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 54
a = 0.54
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1091.00, newcc : 1092.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 40
a = 0.40
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1092.00, newcc : 1093.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1093.00, newcc : 1094.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1094.00, newcc : 1095.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1095.00, newcc : 1096.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1096.00, newcc : 1097.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1097.00, newcc : 1098.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1098.00, newcc : 1099.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1099.00, newcc : 1100.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1100.00, newcc : 1102.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1102.00, newcc : 1104.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1104.00, newcc : 1106.00
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1106.00, newcc : 1108.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1108.00, newcc : 1110.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1110.00, newcc : 1114.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 51
a = 0.51
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 35
a = 0.35
	Not added.

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1114.00, newcc : 1118.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 95
a = 0.95
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1118.00, newcc : 1122.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 34
a = 0.34
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1122.00, newcc : 1126.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1126.00, newcc : 1130.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1130.00, newcc : 1134.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1134.00, newcc : 1138.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1138.00, newcc : 1142.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1142.00, newcc : 1146.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1146.00, newcc : 1150.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1150.00, newcc : 1154.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1154.00, newcc : 1158.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1158.00, newcc : 1162.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1162.00, newcc : 1166.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1166.00, newcc : 1170.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1170.00, newcc : 1174.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 89
a = 0.89
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1174.00, newcc : 1178.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1178.00, newcc : 1182.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1182.00, newcc : 1194.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1194.00, newcc : 1206.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1206.00, newcc : 1218.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1218.00, newcc : 1230.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1230.00, newcc : 1242.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1242.00, newcc : 1254.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1254.00, newcc : 1258.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1258.00, newcc : 1262.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1262.00, newcc : 1282.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1282.00, newcc : 1302.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1302.00, newcc : 1322.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1322.00, newcc : 1342.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1342.00, newcc : 1362.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1362.00, newcc : 1382.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1382.00, newcc : 1402.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 1
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1402.00, newcc : 1404.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
7/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 2, f = 7/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 2, f = 7/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.40
rand_100 = 97
a = 0.97
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 2, f = 7/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 2, f = 8/8/8, cc = 5.00, b_node_v = 1/1/1
printNode End:
prob = 0.29
rand_100 = 77
a = 0.77
	Not added.

*********************************************


printNode:
5/8/8, g = 2, f = 7/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 2
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1404.00, newcc : 1406.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
7/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 3, f = 7/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 3, f = 7/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1406.00, newcc : 1408.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
9/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
8/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 4, f = 8/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/10/10, g = 4, f = 8/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/10/10, g = 4, f = 8/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1408.00, newcc : 1410.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
10/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
9/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 5, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 5, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1410.00, newcc : 1412.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
10/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1412.00, newcc : 1414.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1414.00, newcc : 1416.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1416.00, newcc : 1418.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1418.00, newcc : 1420.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 69
a = 0.69
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 4, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.40
rand_100 = 36
a = 0.36
	Added even though is duplicate.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 4, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:
prob = 0.29
rand_100 = 90
a = 0.90
	Not added.

*********************************************


printNode:
5/8/8, g = 4, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1420.00, newcc : 1424.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
9/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 5, f = 9/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 5, f = 9/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1424.00, newcc : 1428.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.67
rand_100 = 74
a = 0.74
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
10/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 6, f = 10/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/10/10, g = 6, f = 10/16/16, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.67
rand_100 = 42
a = 0.42
	Added even though is duplicate.

*********************************************


printNode:
4/10/10, g = 6, f = 10/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1428.00, newcc : 1432.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.67
rand_100 = 30
a = 0.30
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1432.00, newcc : 1436.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1436.00, newcc : 1440.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1440.00, newcc : 1444.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.40
rand_100 = 90
a = 0.90
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 51
a = 0.51
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 63
a = 0.63
	Not added.

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1444.00, newcc : 1454.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 10.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 10.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1454.00, newcc : 1464.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 10.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1464.00, newcc : 1474.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1474.00, newcc : 1484.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1484.00, newcc : 1486.00
*******************Child #0********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
10/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
9/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 5, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 5, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1486.00, newcc : 1488.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 0
a = 0.00
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
10/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1488.00, newcc : 1490.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 45
a = 0.45
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1490.00, newcc : 1492.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1492.00, newcc : 1494.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1494.00, newcc : 1496.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1496.00, newcc : 1498.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1498.00, newcc : 1500.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1500.00, newcc : 1502.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1502.00, newcc : 1504.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 54
a = 0.54
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 10.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 10.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 57
a = 0.57
	Not added.

*********************************************


printNode:
5/10/10, g = 6, f = 11/16/16, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1504.00, newcc : 1514.00
*******************Child #0********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 7, f = 12/16/16, cc = 10.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 7, f = 12/16/16, cc = 10.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 10.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1514.00, newcc : 1524.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 7, f = 12/16/16, cc = 10.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 10.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1524.00, newcc : 1534.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 7, f = 12/16/16, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1534.00, newcc : 1544.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1544.00, newcc : 1546.00
*******************Child #0********************

print h_child_v
5/12/12
print b_child_v
1/1/1
print f_child_v
11/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
10/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1546.00, newcc : 1548.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 7
a = 0.07
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 10.00, b_node_v = 1/1/1
h = 5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1548.00, newcc : 1550.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 10.00, b_node_v = 1/1/1
h = 5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1550.00, newcc : 1552.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/11/11, g = 7, f = 12/18/18, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1552.00, newcc : 1562.00
*******************Child #0********************

print h_child_v
5/12/12
print b_child_v
1/1/1
print f_child_v
13/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 10.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1562.00, newcc : 1572.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1572.00, newcc : 1574.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1574.00, newcc : 1576.00
*******************Child #0********************

print h_child_v
5/12/12
print b_child_v
1/1/1
print f_child_v
13/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1576.00, newcc : 1578.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 2
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1578.00, newcc : 1585.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 3, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/7/7
print b_child_v
1/1/1
print f_child_v
9/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 3, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/5/5, g = 3, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1585.00, newcc : 1592.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 4, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 76
a = 0.76
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 69
a = 0.69
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 66
a = 0.66
	Not added.

*********************************************


printNode:
4/4/4, g = 4, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1592.00, newcc : 1599.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 5, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 5, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 5, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1599.00, newcc : 1606.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 6, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 18
a = 0.18
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 6, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1606.00, newcc : 1613.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 7, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 7, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1613.00, newcc : 1620.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 8, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 8, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 8, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1620.00, newcc : 1627.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1627.00, newcc : 1634.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1634.00, newcc : 1641.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1641.00, newcc : 1648.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1648.00, newcc : 1655.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1655.00, newcc : 1662.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1662.00, newcc : 1669.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 83
a = 0.83
	Not added.

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1669.00, newcc : 1676.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1676.00, newcc : 1683.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1683.00, newcc : 1690.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1690.00, newcc : 1704.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1704.00, newcc : 1718.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1718.00, newcc : 1732.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1732.00, newcc : 1739.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 79
a = 0.79
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1739.00, newcc : 1746.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 49
a = 0.49
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1746.00, newcc : 1753.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1753.00, newcc : 1760.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1760.00, newcc : 1767.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1767.00, newcc : 1774.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1774.00, newcc : 1781.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1781.00, newcc : 1788.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1788.00, newcc : 1795.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1795.00, newcc : 1809.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1809.00, newcc : 1823.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1823.00, newcc : 1837.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1837.00, newcc : 1851.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1851.00, newcc : 1858.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 6, f = 9/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 83
a = 0.83
	Not added.

*********************************************


printNode:
3/6/6, g = 6, f = 9/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1858.00, newcc : 1865.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1865.00, newcc : 1872.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 62
a = 0.62
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1872.00, newcc : 1879.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1879.00, newcc : 1886.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1886.00, newcc : 1907.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1907.00, newcc : 1928.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 94
a = 0.94
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 90
a = 0.90
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1928.00, newcc : 1949.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1949.00, newcc : 1970.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1970.00, newcc : 1991.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1991.00, newcc : 2012.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2012.00, newcc : 2033.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2033.00, newcc : 2054.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2054.00, newcc : 2075.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2075.00, newcc : 2096.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2096.00, newcc : 2117.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2117.00, newcc : 2138.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2138.00, newcc : 2159.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2159.00, newcc : 2180.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2180.00, newcc : 2201.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.75
rand_100 = 33
a = 0.33
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 20
a = 0.20
	Added even though is duplicate.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2201.00, newcc : 2222.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2222.00, newcc : 2243.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 84.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2243.00, newcc : 2327.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 84.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 84.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2327.00, newcc : 2411.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 84.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 84.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2411.00, newcc : 2495.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 84.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 84.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2495.00, newcc : 2579.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 84.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 84.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2579.00, newcc : 2663.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 84.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 84.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2663.00, newcc : 2747.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2747.00, newcc : 2754.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 63
a = 0.63
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2754.00, newcc : 2761.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 42
a = 0.42
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2761.00, newcc : 2768.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2768.00, newcc : 2775.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2775.00, newcc : 2782.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2782.00, newcc : 2789.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2789.00, newcc : 2796.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2796.00, newcc : 2803.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2803.00, newcc : 2810.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2810.00, newcc : 2817.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 35.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2817.00, newcc : 2852.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 35.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2852.00, newcc : 2887.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2887.00, newcc : 2901.00
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2901.00, newcc : 2915.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2915.00, newcc : 2929.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2929.00, newcc : 2936.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
prob = 0.26
rand_100 = 94
a = 0.94
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 27.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 27.00, b_node_v = 1/1/1
printNode End:
prob = 0.21
rand_100 = 13
a = 0.13
	Added even though is duplicate.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:
prob = 0.17
rand_100 = 37
a = 0.37
	Not added.

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2936.00, newcc : 2943.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 63
a = 0.63
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2943.00, newcc : 2950.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 65
a = 0.65
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2950.00, newcc : 2957.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2957.00, newcc : 2964.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2964.00, newcc : 2971.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2971.00, newcc : 2978.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2978.00, newcc : 2985.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2985.00, newcc : 2992.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2992.00, newcc : 2999.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2999.00, newcc : 3006.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3006.00, newcc : 3013.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3013.00, newcc : 3020.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3020.00, newcc : 3027.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3027.00, newcc : 3034.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3034.00, newcc : 3041.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 45
a = 0.45
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3041.00, newcc : 3048.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3048.00, newcc : 3055.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3055.00, newcc : 3076.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3076.00, newcc : 3097.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3097.00, newcc : 3118.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3118.00, newcc : 3139.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3139.00, newcc : 3160.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3160.00, newcc : 3167.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3167.00, newcc : 3174.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3174.00, newcc : 3202.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3202.00, newcc : 3230.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3230.00, newcc : 3258.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3258.00, newcc : 3286.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3286.00, newcc : 3314.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3314.00, newcc : 3342.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3342.00, newcc : 3370.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3370.00, newcc : 3398.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/5/5, g = 5, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3398.00, newcc : 3426.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
printNode End:
prob = 0.41
rand_100 = 42
a = 0.42
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 69.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 69.00, b_node_v = 1/1/1
printNode End:
prob = 0.29
rand_100 = 36
a = 0.36
	Not added.

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3426.00, newcc : 3454.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3454.00, newcc : 3482.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 35
a = 0.35
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3482.00, newcc : 3510.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3510.00, newcc : 3538.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3538.00, newcc : 3566.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3566.00, newcc : 3594.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3594.00, newcc : 3622.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3622.00, newcc : 3650.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3650.00, newcc : 3678.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3678.00, newcc : 3706.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3706.00, newcc : 3734.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3734.00, newcc : 3762.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3762.00, newcc : 3790.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3790.00, newcc : 3818.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 56.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3818.00, newcc : 3874.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 56.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 56.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3874.00, newcc : 3930.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 56.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 56.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3930.00, newcc : 3986.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 56.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 56.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3986.00, newcc : 4042.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 56.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 56.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 56.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4042.00, newcc : 4098.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 56.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 56.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4098.00, newcc : 4154.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4154.00, newcc : 4182.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4182.00, newcc : 4210.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4210.00, newcc : 4238.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4238.00, newcc : 4266.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4266.00, newcc : 4294.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4294.00, newcc : 4322.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4322.00, newcc : 4350.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.82
rand_100 = 86
a = 0.86
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
printNode End:
prob = 0.22
rand_100 = 77
a = 0.77
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 125.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 125.00, b_node_v = 1/1/1
printNode End:
prob = 0.18
rand_100 = 1
a = 0.01
	Added even though is duplicate.

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4350.00, newcc : 4378.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4378.00, newcc : 4406.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4406.00, newcc : 4434.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4434.00, newcc : 4462.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 153.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4462.00, newcc : 4615.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 153.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 153.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 153.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 11
a = 0.11
	Added even though is duplicate.

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 153.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4615.00, newcc : 4768.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 306.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 153.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4768.00, newcc : 4921.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 306.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 306.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 153.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 153.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4921.00, newcc : 5074.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 153.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 306.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 153.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5074.00, newcc : 5227.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 153.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 306.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 153.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5227.00, newcc : 5380.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 153.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 306.00, b_node_v = 1/1/1
h = 6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 153.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 153.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5380.00, newcc : 5533.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 153.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 153.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5533.00, newcc : 5686.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 306.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 306.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5686.00, newcc : 5992.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/7/7, g = 3, f = 9/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5992.00, newcc : 5999.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.78
rand_100 = 89
a = 0.89
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 9.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
prob = 0.44
rand_100 = 30
a = 0.30
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5999.00, newcc : 6006.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/7/7, g = 5, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 7
a = 0.07
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/7/7
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6006.00, newcc : 6013.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 42
a = 0.42
	Added even though is duplicate.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 90
a = 0.90
	Not added.

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6013.00, newcc : 6020.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6020.00, newcc : 6027.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 10
a = 0.10
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6027.00, newcc : 6034.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6034.00, newcc : 6041.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6041.00, newcc : 6048.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6048.00, newcc : 6055.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6055.00, newcc : 6062.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6062.00, newcc : 6069.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6069.00, newcc : 6076.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6076.00, newcc : 6083.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6083.00, newcc : 6090.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6090.00, newcc : 6097.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6097.00, newcc : 6104.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6104.00, newcc : 6111.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6111.00, newcc : 6118.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 77
a = 0.77
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6118.00, newcc : 6125.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6125.00, newcc : 6132.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6132.00, newcc : 6153.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6153.00, newcc : 6174.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6174.00, newcc : 6195.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6195.00, newcc : 6216.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6216.00, newcc : 6237.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6237.00, newcc : 6258.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6258.00, newcc : 6265.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6265.00, newcc : 6272.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6272.00, newcc : 6279.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6279.00, newcc : 6286.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6286.00, newcc : 6293.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6293.00, newcc : 6300.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6300.00, newcc : 6307.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6307.00, newcc : 6314.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6314.00, newcc : 6321.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6321.00, newcc : 6342.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6342.00, newcc : 6363.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6363.00, newcc : 6384.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6384.00, newcc : 6405.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6405.00, newcc : 6426.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6426.00, newcc : 6447.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6447.00, newcc : 6468.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6468.00, newcc : 6489.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6489.00, newcc : 6510.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/7/7, g = 5, f = 11/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6510.00, newcc : 6517.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:
prob = 0.17
rand_100 = 72
a = 0.72
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 41.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 41.00, b_node_v = 1/1/1
printNode End:
prob = 0.15
rand_100 = 37
a = 0.37
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6517.00, newcc : 6524.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/7/7
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6524.00, newcc : 6531.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6531.00, newcc : 6538.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6538.00, newcc : 6545.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6545.00, newcc : 6552.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6552.00, newcc : 6559.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6559.00, newcc : 6566.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6566.00, newcc : 6573.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 2
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6573.00, newcc : 6575.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 39
a = 0.39
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
8/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6575.00, newcc : 6577.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
prob = 0.11
rand_100 = 70
a = 0.70
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 30
a = 0.30
	Added even though is duplicate.

*********************************************


printNode:
5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6577.00, newcc : 6579.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 14
a = 0.14
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
9/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 5, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 5, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6579.00, newcc : 6581.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
10/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6581.00, newcc : 6583.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6583.00, newcc : 6585.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6585.00, newcc : 6587.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6587.00, newcc : 6589.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
printNode End:
prob = 0.04
rand_100 = 1
a = 0.01
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 2
a = 0.02
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 6
a = 0.06
	Added even though is duplicate.

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6589.00, newcc : 6593.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6593.00, newcc : 6597.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6597.00, newcc : 6601.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6601.00, newcc : 6605.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6605.00, newcc : 6607.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
10/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
9/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 18.00, b_node_v = 1/1/1
printNode End:
prob = 0.10
rand_100 = 55
a = 0.55
	Not added.

*********************************************


printNode:
5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6607.00, newcc : 6609.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
10/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
10/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6609.00, newcc : 6611.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 17
a = 0.17
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 29
a = 0.29
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 50.00, b_node_v = 1/1/1
printNode End:
prob = 0.04
rand_100 = 65
a = 0.65
	Not added.

*********************************************


printNode:
5/10/10, g = 6, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6611.00, newcc : 6615.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.67
rand_100 = 53
a = 0.53
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 7, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/9/9, g = 7, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6615.00, newcc : 6619.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6619.00, newcc : 6621.00
*******************Child #0********************

print h_child_v
5/12/12
print b_child_v
1/1/1
print f_child_v
11/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6621.00, newcc : 6623.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 82
a = 0.82
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 7, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/9/9, g = 7, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6623.00, newcc : 6625.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6625.00, newcc : 6633.00
*******************Child #0********************

print h_child_v
5/12/12
print b_child_v
1/1/1
print f_child_v
13/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6633.00, newcc : 6635.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6635.00, newcc : 6637.00
*******************Child #0********************

print h_child_v
5/12/12
print b_child_v
1/1/1
print f_child_v
13/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6637.00, newcc : 6641.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/7/7, g = 5, f = 12/12/12, cc = 35.00, b_node_v = 1/1/1
printNode End:
prob = 0.10
rand_100 = 53
a = 0.53
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 79
a = 0.79
	Not added.

*********************************************


printNode:
5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6641.00, newcc : 6645.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 78
a = 0.78
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 29
a = 0.29
	Added even though is duplicate.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 31
a = 0.31
	Not added.

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6645.00, newcc : 6649.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6649.00, newcc : 6653.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 96
a = 0.96
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6653.00, newcc : 6657.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6657.00, newcc : 6661.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6661.00, newcc : 6665.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6665.00, newcc : 6669.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6669.00, newcc : 6673.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6673.00, newcc : 6677.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6677.00, newcc : 6681.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6681.00, newcc : 6685.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6685.00, newcc : 6689.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6689.00, newcc : 6693.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6693.00, newcc : 6697.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6697.00, newcc : 6701.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6701.00, newcc : 6705.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 96
a = 0.96
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6705.00, newcc : 6709.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6709.00, newcc : 6713.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6713.00, newcc : 6725.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6725.00, newcc : 6737.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6737.00, newcc : 6749.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6749.00, newcc : 6761.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6761.00, newcc : 6773.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6773.00, newcc : 6777.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6777.00, newcc : 6781.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6781.00, newcc : 6785.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6785.00, newcc : 6789.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6789.00, newcc : 6793.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6793.00, newcc : 6797.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6797.00, newcc : 6801.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6801.00, newcc : 6805.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6805.00, newcc : 6809.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6809.00, newcc : 6817.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
printNode End:
prob = 0.13
rand_100 = 11
a = 0.11
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 95
a = 0.95
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 55
a = 0.55
	Not added.

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6817.00, newcc : 6825.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6825.00, newcc : 6833.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6833.00, newcc : 6841.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6841.00, newcc : 6849.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 32.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6849.00, newcc : 6881.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 32.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6881.00, newcc : 6913.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 32.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6913.00, newcc : 6945.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 32.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6945.00, newcc : 6977.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 32.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6977.00, newcc : 7009.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 32.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7009.00, newcc : 7041.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 32.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 32.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7041.00, newcc : 7073.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 32.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7073.00, newcc : 7105.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 32.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7105.00, newcc : 7137.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/8/8, g = 4, f = 10/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7137.00, newcc : 7157.00
*******************Child #0********************

print h_child_v
7/9/9
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/7/7
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/7/7, g = 5, f = 11/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/7/7, g = 5, f = 11/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7157.00, newcc : 7177.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 33
a = 0.33
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 80.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 80.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 17
a = 0.17
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 100.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7177.00, newcc : 7197.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 100.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/7/7
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7197.00, newcc : 7217.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 100.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7217.00, newcc : 7237.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 100.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 100.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7237.00, newcc : 7257.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 100.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7257.00, newcc : 7277.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 100.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7277.00, newcc : 7297.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 100.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7297.00, newcc : 7317.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7317.00, newcc : 7337.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/8/8, g = 6, f = 12/14/14, cc = 100.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 100.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7337.00, newcc : 7437.00
*******************Child #0********************

print h_child_v
7/9/9
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/7/7
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7437.00, newcc : 7441.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
10/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.67
rand_100 = 65
a = 0.65
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 45
a = 0.45
	Added even though is duplicate.

*********************************************


printNode:
6/8/8, g = 4, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7441.00, newcc : 7449.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.57
rand_100 = 92
a = 0.92
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
10/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 5, f = 10/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7449.00, newcc : 7457.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 28
a = 0.28
	Added even though is duplicate.

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7457.00, newcc : 7465.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7465.00, newcc : 7473.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7473.00, newcc : 7481.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7481.00, newcc : 7489.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 5, f = 10/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7489.00, newcc : 7497.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.67
rand_100 = 95
a = 0.95
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 57
a = 0.57
	Not added.

*********************************************


printNode:
5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7497.00, newcc : 7505.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 7, f = 12/16/16, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/9/9, g = 7, f = 12/16/16, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7505.00, newcc : 7513.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7513.00, newcc : 7521.00
*******************Child #0********************

print h_child_v
5/12/12
print b_child_v
1/1/1
print f_child_v
13/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 16.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7521.00, newcc : 7537.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 93
a = 0.93
	Not added.

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 16.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7537.00, newcc : 7553.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 16.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7553.00, newcc : 7569.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 16.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7569.00, newcc : 7585.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 16.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7585.00, newcc : 7601.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 16.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7601.00, newcc : 7617.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 16.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7617.00, newcc : 7633.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 16.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7633.00, newcc : 7649.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 32.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7649.00, newcc : 7681.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 16.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7681.00, newcc : 7697.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 7, f = 12/16/16, cc = 16.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 16.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7697.00, newcc : 7713.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 7, f = 12/16/16, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 16.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7713.00, newcc : 7729.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/9/9, g = 5, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7729.00, newcc : 7743.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
printNode End:
prob = 0.54
rand_100 = 10
a = 0.10
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 26.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 26.00, b_node_v = 1/1/1
printNode End:
prob = 0.35
rand_100 = 1
a = 0.01
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 40.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7743.00, newcc : 7757.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 40.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 40.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7757.00, newcc : 7771.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 40.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7771.00, newcc : 7785.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7785.00, newcc : 7799.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7799.00, newcc : 7805.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 40.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/11/11
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 40.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/11/11, g = 5, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7805.00, newcc : 7811.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 40.00, b_node_v = 1/1/1
h = 6/11/11, g = 5, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 40.00, b_node_v = 1/1/1
printNode End:
prob = 0.13
rand_100 = 13
a = 0.13
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 46.00, b_node_v = 1/1/1
h = 6/11/11, g = 5, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 46.00, b_node_v = 1/1/1
h = 6/11/11, g = 5, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 66
a = 0.66
	Not added.

*********************************************


printNode:
6/8/8, g = 6, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7811.00, newcc : 7823.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 46.00, b_node_v = 1/1/1
h = 6/11/11, g = 5, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7823.00, newcc : 7835.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/10/10, g = 6, f = 12/16/16, cc = 46.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 46.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7835.00, newcc : 7881.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/11/11
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/11/11, g = 5, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7881.00, newcc : 7887.00
*******************Child #0********************

print h_child_v
6/12/12
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/12/12, g = 6, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/12/12, g = 6, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/10/10, g = 6, f = 12/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7887.00, newcc : 7893.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/11/11
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/12/12, g = 6, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7893.00, newcc : 7899.00
*******************Child #0********************

print h_child_v
6/11/11
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 1
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7899.00, newcc : 7900.00
*******************Child #0********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
9/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/8/8, g = 2, f = 9/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
9/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 1.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/8/8, g = 2, f = 9/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 86
a = 0.86
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
9/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 2.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/8/8, g = 2, f = 9/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 20
a = 0.20
	Added even though is duplicate.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 2, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 2, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 2
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7900.00, newcc : 7901.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.12
rand_100 = 54
a = 0.54
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 3, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 3, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 48
a = 0.48
	Added even though is duplicate.

*********************************************


printNode:
5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7901.00, newcc : 7902.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 54
a = 0.54
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 14
a = 0.14
	Added even though is duplicate.

*********************************************


printNode:
4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7902.00, newcc : 7903.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7903.00, newcc : 7904.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 49
a = 0.49
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7904.00, newcc : 7905.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7905.00, newcc : 7906.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7906.00, newcc : 7907.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7907.00, newcc : 7908.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7908.00, newcc : 7909.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7909.00, newcc : 7910.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7910.00, newcc : 7911.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7911.00, newcc : 7912.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7912.00, newcc : 7913.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 10
a = 0.10
	Added even though is duplicate.

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7913.00, newcc : 7914.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7914.00, newcc : 7915.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7915.00, newcc : 7916.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7916.00, newcc : 7918.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7918.00, newcc : 7920.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7920.00, newcc : 7922.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7922.00, newcc : 7923.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 94
a = 0.94
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7923.00, newcc : 7924.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 83
a = 0.83
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7924.00, newcc : 7925.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7925.00, newcc : 7926.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7926.00, newcc : 7927.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7927.00, newcc : 7928.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7928.00, newcc : 7929.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7929.00, newcc : 7930.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7930.00, newcc : 7931.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7931.00, newcc : 7933.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7933.00, newcc : 7935.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7935.00, newcc : 7937.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7937.00, newcc : 7939.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7939.00, newcc : 7940.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 13
a = 0.13
	Added even though is duplicate.

*********************************************


printNode:
3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7940.00, newcc : 7941.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7941.00, newcc : 7942.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 74
a = 0.74
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7942.00, newcc : 7943.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7943.00, newcc : 7944.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7944.00, newcc : 7947.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7947.00, newcc : 7950.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 62
a = 0.62
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 7
a = 0.07
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7950.00, newcc : 7953.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7953.00, newcc : 7956.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7956.00, newcc : 7959.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7959.00, newcc : 7962.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7962.00, newcc : 7965.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7965.00, newcc : 7968.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7968.00, newcc : 7971.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7971.00, newcc : 7974.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7974.00, newcc : 7977.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7977.00, newcc : 7980.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7980.00, newcc : 7983.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7983.00, newcc : 7986.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7986.00, newcc : 7989.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.75
rand_100 = 74
a = 0.74
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 86
a = 0.86
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7989.00, newcc : 7992.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7992.00, newcc : 7995.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7995.00, newcc : 8007.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8007.00, newcc : 8019.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8019.00, newcc : 8031.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8031.00, newcc : 8043.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8043.00, newcc : 8055.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8055.00, newcc : 8067.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8067.00, newcc : 8068.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 7
a = 0.07
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8068.00, newcc : 8069.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 30
a = 0.30
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8069.00, newcc : 8070.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8070.00, newcc : 8071.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8071.00, newcc : 8072.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8072.00, newcc : 8073.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8073.00, newcc : 8074.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8074.00, newcc : 8075.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8075.00, newcc : 8076.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8076.00, newcc : 8077.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8077.00, newcc : 8082.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8082.00, newcc : 8087.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8087.00, newcc : 8089.00
*******************Child #0********************

print h_child_v
4/8/8
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/8/8, g = 8, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/8/8, g = 8, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8089.00, newcc : 8091.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/8/8, g = 8, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8091.00, newcc : 8093.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/8/8, g = 8, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8093.00, newcc : 8095.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8095.00, newcc : 8096.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 75
a = 0.75
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 26
a = 0.26
	Added even though is duplicate.

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8096.00, newcc : 8097.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 8
a = 0.08
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8097.00, newcc : 8098.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 32
a = 0.32
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8098.00, newcc : 8099.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8099.00, newcc : 8100.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8100.00, newcc : 8101.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8101.00, newcc : 8102.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8102.00, newcc : 8103.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8103.00, newcc : 8104.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8104.00, newcc : 8105.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8105.00, newcc : 8106.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8106.00, newcc : 8107.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8107.00, newcc : 8108.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8108.00, newcc : 8109.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8109.00, newcc : 8110.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8110.00, newcc : 8111.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 57
a = 0.57
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8111.00, newcc : 8112.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8112.00, newcc : 8113.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8113.00, newcc : 8116.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8116.00, newcc : 8119.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8119.00, newcc : 8122.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8122.00, newcc : 8125.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8125.00, newcc : 8128.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8128.00, newcc : 8131.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8131.00, newcc : 8132.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8132.00, newcc : 8133.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8133.00, newcc : 8137.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8137.00, newcc : 8141.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8141.00, newcc : 8145.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8145.00, newcc : 8149.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8149.00, newcc : 8153.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8153.00, newcc : 8157.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8157.00, newcc : 8161.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8161.00, newcc : 8163.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 84
a = 0.84
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.40
rand_100 = 7
a = 0.07
	Added even though is duplicate.

*********************************************


printNode:
5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8163.00, newcc : 8165.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8165.00, newcc : 8167.00
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 6, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 51
a = 0.51
	Not added.

*********************************************


printNode:
3/6/6, g = 6, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8167.00, newcc : 8169.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8169.00, newcc : 8171.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8171.00, newcc : 8173.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8173.00, newcc : 8175.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8175.00, newcc : 8177.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8177.00, newcc : 8179.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8179.00, newcc : 8181.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8181.00, newcc : 8183.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8183.00, newcc : 8185.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8185.00, newcc : 8187.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8187.00, newcc : 8189.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8189.00, newcc : 8191.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8191.00, newcc : 8193.00
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8193.00, newcc : 8195.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8195.00, newcc : 8197.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8197.00, newcc : 8199.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 4
a = 0.04
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 69
a = 0.69
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.40
rand_100 = 15
a = 0.15
	Added even though is duplicate.

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8199.00, newcc : 8205.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8205.00, newcc : 8211.00
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8211.00, newcc : 8217.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8217.00, newcc : 8223.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8223.00, newcc : 8228.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/7/7, g = 5, f = 12/12/12, cc = 39.00, b_node_v = 1/1/1
printNode End:
prob = 0.11
rand_100 = 54
a = 0.54
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 2
a = 0.02
	Added even though is duplicate.

*********************************************


printNode:
5/5/5, g = 5, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8228.00, newcc : 8233.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 92
a = 0.92
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 43
a = 0.43
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 81
a = 0.81
	Not added.

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8233.00, newcc : 8238.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8238.00, newcc : 8243.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 4
a = 0.04
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8243.00, newcc : 8248.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8248.00, newcc : 8253.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8253.00, newcc : 8258.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8258.00, newcc : 8263.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8263.00, newcc : 8268.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8268.00, newcc : 8273.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8273.00, newcc : 8278.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8278.00, newcc : 8283.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8283.00, newcc : 8288.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8288.00, newcc : 8293.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8293.00, newcc : 8298.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8298.00, newcc : 8303.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8303.00, newcc : 8308.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 85
a = 0.85
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8308.00, newcc : 8313.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8313.00, newcc : 8318.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 15.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8318.00, newcc : 8333.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 15.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 15.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8333.00, newcc : 8348.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 15.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 15.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8348.00, newcc : 8363.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 15.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 15.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8363.00, newcc : 8378.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 15.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 15.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8378.00, newcc : 8393.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 15.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 15.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8393.00, newcc : 8408.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8408.00, newcc : 8413.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8413.00, newcc : 8418.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8418.00, newcc : 8423.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8423.00, newcc : 8428.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8428.00, newcc : 8433.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8433.00, newcc : 8438.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8438.00, newcc : 8443.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8443.00, newcc : 8448.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8448.00, newcc : 8453.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8453.00, newcc : 8463.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.71
rand_100 = 2
a = 0.02
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
prob = 0.42
rand_100 = 10
a = 0.10
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 3
a = 0.03
	Added even though is duplicate.

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8463.00, newcc : 8473.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 10.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8473.00, newcc : 8483.00
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8483.00, newcc : 8493.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 10.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 10.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8493.00, newcc : 8503.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8503.00, newcc : 8513.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 30.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8513.00, newcc : 8543.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 30.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 30.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 20
a = 0.20
	Added even though is duplicate.

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 30.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8543.00, newcc : 8573.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 30.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8573.00, newcc : 8603.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 30.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 30.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8603.00, newcc : 8633.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 30.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 30.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8633.00, newcc : 8663.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 30.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 30.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8663.00, newcc : 8693.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 30.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 30.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 30.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8693.00, newcc : 8723.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 30.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 30.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8723.00, newcc : 8753.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 60.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 60.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8753.00, newcc : 8813.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8813.00, newcc : 8817.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.67
rand_100 = 87
a = 0.87
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
10/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8817.00, newcc : 8821.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
printNode End:
prob = 0.14
rand_100 = 32
a = 0.32
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
printNode End:
prob = 0.12
rand_100 = 57
a = 0.57
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8821.00, newcc : 8825.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8825.00, newcc : 8829.00
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8829.00, newcc : 8833.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8833.00, newcc : 8837.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8837.00, newcc : 8841.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8841.00, newcc : 8845.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
printNode End:
prob = 0.11
rand_100 = 36
a = 0.36
	Not added.

*********************************************


printNode:
5/10/10, g = 6, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8845.00, newcc : 8849.00
*******************Child #0********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 7, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 7, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8849.00, newcc : 8853.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 7, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8853.00, newcc : 8857.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 7, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8857.00, newcc : 8861.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8861.00, newcc : 8865.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 19
a = 0.19
	Added even though is duplicate.

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8865.00, newcc : 8869.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8869.00, newcc : 8873.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8873.00, newcc : 8877.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8877.00, newcc : 8881.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8881.00, newcc : 8885.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8885.00, newcc : 8889.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8889.00, newcc : 8893.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8893.00, newcc : 8901.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/8/8, g = 6, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 36.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8901.00, newcc : 8937.00
*******************Child #0********************

print h_child_v
7/9/9
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 36.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8937.00, newcc : 8973.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8973.00, newcc : 8979.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.60
rand_100 = 2
a = 0.02
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 10.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 10.00, b_node_v = 1/1/1
printNode End:
prob = 0.38
rand_100 = 42
a = 0.42
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 16.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8979.00, newcc : 8985.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 16.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 16.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8985.00, newcc : 8991.00
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 16.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8991.00, newcc : 8997.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 16.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8997.00, newcc : 9003.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9003.00, newcc : 9009.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/10/10, g = 6, f = 12/16/16, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 16.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9009.00, newcc : 9025.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9025.00, newcc : 9033.00
*******************Child #0********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/8/8, g = 4, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/8/8, g = 4, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 67
a = 0.67
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 4, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9033.00, newcc : 9041.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/7/7, g = 5, f = 12/12/12, cc = 44.00, b_node_v = 1/1/1
printNode End:
prob = 0.15
rand_100 = 11
a = 0.11
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/7/7
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/5/5, g = 5, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9041.00, newcc : 9049.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 86
a = 0.86
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 23
a = 0.23
	Added even though is duplicate.

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9049.00, newcc : 9057.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9057.00, newcc : 9065.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 8
a = 0.08
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9065.00, newcc : 9073.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9073.00, newcc : 9081.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9081.00, newcc : 9089.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9089.00, newcc : 9097.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9097.00, newcc : 9105.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9105.00, newcc : 9113.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9113.00, newcc : 9121.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9121.00, newcc : 9129.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9129.00, newcc : 9137.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9137.00, newcc : 9145.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9145.00, newcc : 9153.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9153.00, newcc : 9161.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9161.00, newcc : 9169.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 4
a = 0.04
	Added even though is duplicate.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9169.00, newcc : 9177.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9177.00, newcc : 9185.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 24.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9185.00, newcc : 9209.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 24.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9209.00, newcc : 9233.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 24.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9233.00, newcc : 9257.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 24.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9257.00, newcc : 9281.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 24.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9281.00, newcc : 9305.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 24.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9305.00, newcc : 9329.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9329.00, newcc : 9337.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9337.00, newcc : 9345.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9345.00, newcc : 9353.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9353.00, newcc : 9361.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9361.00, newcc : 9369.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9369.00, newcc : 9377.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9377.00, newcc : 9385.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9385.00, newcc : 9393.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9393.00, newcc : 9401.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 24.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9401.00, newcc : 9425.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 22
a = 0.22
	Added even though is duplicate.

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 24.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9425.00, newcc : 9449.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 24.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9449.00, newcc : 9473.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 24.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9473.00, newcc : 9497.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 24.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9497.00, newcc : 9521.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 24.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9521.00, newcc : 9545.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 24.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9545.00, newcc : 9569.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 24.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9569.00, newcc : 9593.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 48.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 48.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9593.00, newcc : 9641.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/7/7, g = 5, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9641.00, newcc : 9649.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 42
a = 0.42
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9649.00, newcc : 9657.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/7/7
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9657.00, newcc : 9665.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9665.00, newcc : 9673.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9673.00, newcc : 9681.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9681.00, newcc : 9689.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9689.00, newcc : 9697.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9697.00, newcc : 9705.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9705.00, newcc : 9713.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 16.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9713.00, newcc : 9729.00
*******************Child #0********************

print h_child_v
7/9/9
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/7/7
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/7/7, g = 5, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 52.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9729.00, newcc : 9781.00
*******************Child #0********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 52.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9781.00, newcc : 9833.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/7/7
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 52.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9833.00, newcc : 9885.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 52.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9885.00, newcc : 9937.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 52.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9937.00, newcc : 9989.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 52.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9989.00, newcc : 10041.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 52.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10041.00, newcc : 10093.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 52.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 52.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10093.00, newcc : 10145.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 52.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 52.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10145.00, newcc : 10197.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 2
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10197.00, newcc : 10200.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/9/9, g = 3, f = 9/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 3, f = 9/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/9/9, g = 3, f = 9/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 54
a = 0.54
	Not added.

*********************************************


printNode:
6/9/9, g = 3, f = 9/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10200.00, newcc : 10206.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
10/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
prob = 0.27
rand_100 = 26
a = 0.26
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 22.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/8/8, g = 4, f = 11/12/12, cc = 22.00, b_node_v = 1/1/1
printNode End:
prob = 0.21
rand_100 = 31
a = 0.31
	Not added.

*********************************************


printNode:
6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10206.00, newcc : 10212.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 28.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
10/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 28.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/11/11, g = 5, f = 10/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/11/11, g = 5, f = 10/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10212.00, newcc : 10218.00
*******************Child #0********************

print h_child_v
5/12/12
print b_child_v
1/1/1
print f_child_v
11/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 28.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/12/12, g = 6, f = 11/18/18, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/12/12, g = 6, f = 11/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 28.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/12/12, g = 6, f = 11/18/18, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10218.00, newcc : 10224.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 28.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10224.00, newcc : 10230.00
*******************Child #0********************

print h_child_v
5/12/12
print b_child_v
1/1/1
print f_child_v
13/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10230.00, newcc : 10236.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 28.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 14
a = 0.14
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10236.00, newcc : 10248.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 28.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/11/11, g = 7, f = 12/18/18, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10248.00, newcc : 10260.00
*******************Child #0********************

print h_child_v
5/12/12
print b_child_v
1/1/1
print f_child_v
13/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10260.00, newcc : 10263.00
*******************Child #0********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 4, f = 11/12/12, cc = 28.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/8/8, g = 4, f = 11/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
prob = 0.10
rand_100 = 80
a = 0.80
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 4, f = 11/12/12, cc = 31.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/8/8, g = 4, f = 11/12/12, cc = 31.00, b_node_v = 1/1/1
printNode End:
prob = 0.09
rand_100 = 7
a = 0.07
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 4, f = 11/12/12, cc = 34.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/8/8, g = 4, f = 11/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:
prob = 0.08
rand_100 = 85
a = 0.85
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10263.00, newcc : 10266.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 93
a = 0.93
	Not added.

*********************************************


printNode:
5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10266.00, newcc : 10269.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 68
a = 0.68
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 17
a = 0.17
	Added even though is duplicate.

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10269.00, newcc : 10272.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10272.00, newcc : 10275.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 61
a = 0.61
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10275.00, newcc : 10278.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10278.00, newcc : 10281.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10281.00, newcc : 10284.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10284.00, newcc : 10287.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10287.00, newcc : 10290.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10290.00, newcc : 10293.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10293.00, newcc : 10296.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10296.00, newcc : 10299.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10299.00, newcc : 10302.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10302.00, newcc : 10305.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10305.00, newcc : 10308.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10308.00, newcc : 10311.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10311.00, newcc : 10314.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 85
a = 0.85
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10314.00, newcc : 10317.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10317.00, newcc : 10320.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 9.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10320.00, newcc : 10329.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 9.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10329.00, newcc : 10338.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 9.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10338.00, newcc : 10347.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 9.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10347.00, newcc : 10356.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 9.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10356.00, newcc : 10365.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10365.00, newcc : 10368.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10368.00, newcc : 10371.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10371.00, newcc : 10374.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10374.00, newcc : 10377.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10377.00, newcc : 10380.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10380.00, newcc : 10383.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10383.00, newcc : 10386.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10386.00, newcc : 10389.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10389.00, newcc : 10392.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10392.00, newcc : 10398.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
prob = 0.40
rand_100 = 68
a = 0.68
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:
prob = 0.29
rand_100 = 99
a = 0.99
	Not added.

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10398.00, newcc : 10404.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10404.00, newcc : 10410.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10410.00, newcc : 10416.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10416.00, newcc : 10422.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10422.00, newcc : 10443.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 52
a = 0.52
	Not added.

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10443.00, newcc : 10464.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10464.00, newcc : 10485.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10485.00, newcc : 10506.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10506.00, newcc : 10527.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10527.00, newcc : 10548.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10548.00, newcc : 10569.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10569.00, newcc : 10590.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10590.00, newcc : 10632.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10632.00, newcc : 10638.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 7, f = 12/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10638.00, newcc : 10644.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 7, f = 12/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10644.00, newcc : 10650.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10650.00, newcc : 10653.00
*******************Child #0********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10653.00, newcc : 10656.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 16
a = 0.16
	Added even though is duplicate.

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10656.00, newcc : 10659.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10659.00, newcc : 10662.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10662.00, newcc : 10665.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10665.00, newcc : 10668.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10668.00, newcc : 10671.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10671.00, newcc : 10674.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10674.00, newcc : 10677.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10677.00, newcc : 10683.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/8/8, g = 4, f = 11/12/12, cc = 37.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 37.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10683.00, newcc : 10720.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/7/7, g = 5, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 37.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
7/9/9
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 37.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/9/9, g = 5, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
printNode End:
prob = 0.65
rand_100 = 9
a = 0.09
	Added even though is duplicate.

*********************************************


printNode:
6/9/9, g = 5, f = 11/14/14, cc = 37.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 37.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10720.00, newcc : 10757.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 57.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 37.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/10/10, g = 6, f = 12/16/16, cc = 37.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 37.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10757.00, newcc : 10794.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/11/11
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/7/7, g = 5, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 37.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10794.00, newcc : 10831.00
*******************Child #0********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/9/9, g = 5, f = 12/14/14, cc = 57.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 37.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10831.00, newcc : 10868.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/9/9, g = 5, f = 12/14/14, cc = 57.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 57.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 37.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 37.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 57.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 37.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 11
a = 0.11
	Added even though is duplicate.

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 37.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10868.00, newcc : 10905.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 74.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 57.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 37.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10905.00, newcc : 10942.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 74.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 57.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 74.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 57.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 37.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 37.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10942.00, newcc : 10979.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 37.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 74.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 57.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 37.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10979.00, newcc : 11016.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 37.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 74.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 57.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 37.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 11016.00, newcc : 11053.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 37.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 74.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 57.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 37.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 37.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 11053.00, newcc : 11090.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 37.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 37.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 11090.00, newcc : 11127.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 74.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 74.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 11127.00, newcc : 11201.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/9/9, g = 5, f = 12/14/14, cc = 57.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 57.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 11201.00, newcc : 11258.00
*******************Child #0********************

print h_child_v
7/10/10
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
7/10/10
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

ss_probes = 100
bc: 1/1/1, cc: 11258.00
Actual search time: 0.13s [t=0.36s]
Initial state h value: 6/6/6.
Expanded 0 state(s).
Reopened 0 state(s).
Evaluated 1 state(s).
Evaluations: 3
Generated 0 state(s).
Dead ends: 0 state(s).
Expanded until last jump: 0 state(s).
Reopened until last jump: 0 state(s).
Evaluated until last jump: 1 state(s).
Generated until last jump: 0 state(s).
Number of registered states: 82
Search time: 0.14s
Total time: 0.36s
Search stopped without finding a solution.
Peak memory: 4620 KB
