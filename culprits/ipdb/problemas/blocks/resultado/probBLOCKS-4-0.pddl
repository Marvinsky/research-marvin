reading input... [t=0.00s]
Simplifying transitions... done!
done reading input! [t=0.00s]
building causal graph...done! [t=0.00s]
packing state variables...done! [t=0.00s]
Variables: 9
Facts: 30
Bytes per state: 4
done initalizing global data [t=0.00s]
calling ScalarEvaluator Min parser
calling ScalarEvaluator Min parser
Average operator cost: 1.00
PDB collection construction time: 0.00s
done calculating initial pattern collection and candidate patterns for the search
current collection size is 15
current initial h value: 6
pattern: [1, 6] - improvement: 5
pattern: [2, 6] - improvement: 13
pattern: [3, 7] - improvement: 15
pattern: [4, 8] - improvement: 1
pattern: [5, 6] - improvement: 5
found a better pattern with improvement 15
pattern: [3, 7]
Hill climbing time so far: 0.01s
current collection size is 25
current initial h value: 6
pattern: [1, 6] - improvement: 7
pattern: [2, 6] - improvement: 17
pattern: [4, 8] - improvement: 3
pattern: [5, 6] - improvement: 7
pattern: [2, 3, 7] - improvement: 30
pattern: [3, 5, 7] - improvement: 69
pattern: [3, 6, 7] - improvement: 99
pattern: [3, 7, 8] - improvement: 16
found a better pattern with improvement 99
pattern: [3, 6, 7]
Hill climbing time so far: 0.02s
current collection size is 75
current initial h value: 6
pattern: [1, 6] - improvement: 4
pattern: [2, 6] - improvement: 17
pattern: [4, 8] - improvement: 2
pattern: [5, 6] - improvement: 4
pattern: [3, 5, 7] - improvement: 36
pattern: [3, 7, 8] - improvement: 12
pattern: [1, 3, 6, 7] - improvement: 23
pattern: [2, 3, 6, 7] - improvement: 28
pattern: [3, 5, 6, 7] - improvement: 124
pattern: [3, 6, 7, 8] - improvement: 127
found a better pattern with improvement 127
pattern: [3, 6, 7, 8]
Hill climbing time so far: 0.04s
current collection size is 325
current initial h value: 6
pattern: [1, 6] - improvement: 6
pattern: [2, 6] - improvement: 13
pattern: [4, 8] - improvement: 4
pattern: [5, 6] - improvement: 6
pattern: [3, 5, 7] - improvement: 37
pattern: [1, 3, 6, 7] - improvement: 18
pattern: [2, 3, 6, 7] - improvement: 28
pattern: [3, 5, 6, 7] - improvement: 112
pattern: [0, 3, 6, 7, 8] - improvement: 90
pattern: [1, 3, 6, 7, 8] - improvement: 291
pattern: [2, 3, 6, 7, 8] - improvement: 221
pattern: [3, 4, 6, 7, 8] - improvement: 107
pattern: [3, 5, 6, 7, 8] - improvement: 386
found a better pattern with improvement 386
pattern: [3, 5, 6, 7, 8]
Hill climbing time so far: 0.06s
current collection size is 825
current initial h value: 6
pattern: [2, 6] - improvement: 7
pattern: [2, 3, 6, 7] - improvement: 7
pattern: [2, 3, 6, 7, 8] - improvement: 125
pattern: [3, 4, 6, 7, 8] - improvement: 113
pattern: [0, 3, 5, 6, 7, 8] - improvement: 218
pattern: [1, 3, 5, 6, 7, 8] - improvement: 153
pattern: [2, 3, 5, 6, 7, 8] - improvement: 400
pattern: [3, 4, 5, 6, 7, 8] - improvement: 113
found a better pattern with improvement 400
pattern: [2, 3, 5, 6, 7, 8]
Hill climbing time so far: 0.08s
current collection size is 1825
current initial h value: 6
pattern: [3, 4, 6, 7, 8] - improvement: 64
pattern: [0, 3, 5, 6, 7, 8] - improvement: 194
pattern: [1, 3, 5, 6, 7, 8] - improvement: 144
pattern: [3, 4, 5, 6, 7, 8] - improvement: 82
pattern: [0, 2, 3, 5, 6, 7, 8] - improvement: 497
pattern: [1, 2, 3, 5, 6, 7, 8] - improvement: 222
pattern: [2, 3, 4, 5, 6, 7, 8] - improvement: 102
found a better pattern with improvement 497
pattern: [0, 2, 3, 5, 6, 7, 8]
Hill climbing time so far: 0.11s
current collection size is 6825
current initial h value: 6
pattern: [4, 8] - improvement: 3
pattern: [3, 4, 6, 7, 8] - improvement: 61
pattern: [1, 3, 5, 6, 7, 8] - improvement: 107
pattern: [3, 4, 5, 6, 7, 8] - improvement: 61
pattern: [1, 2, 3, 5, 6, 7, 8] - improvement: 186
pattern: [2, 3, 4, 5, 6, 7, 8] - improvement: 75
pattern: [0, 1, 2, 3, 5, 6, 7, 8] - improvement: 288
pattern: [0, 2, 3, 4, 5, 6, 7, 8] - improvement: 132
found a better pattern with improvement 288
pattern: [0, 1, 2, 3, 5, 6, 7, 8]
Hill climbing time so far: 0.15s
current collection size is 16825
current initial h value: 6
pattern: [4, 8] - improvement: 2
pattern: [3, 4, 6, 7, 8] - improvement: 50
pattern: [3, 4, 5, 6, 7, 8] - improvement: 50
pattern: [2, 3, 4, 5, 6, 7, 8] - improvement: 61
pattern: [0, 2, 3, 4, 5, 6, 7, 8] - improvement: 123
pattern: [0, 1, 2, 3, 4, 5, 6, 7, 8] - improvement: 163
found a better pattern with improvement 163
pattern: [0, 1, 2, 3, 4, 5, 6, 7, 8]
Hill climbing time so far: 0.19s
current collection size is 36825
current initial h value: 6
Improvement below threshold. Stop hill climbing.
Pruned 8 of 9 cliques
Pruned 10 of 11 PDBs
Dominance pruning took 0.00s
iPDB: iterations = 9
iPDB: num_patterns = 1
iPDB: size = 20000
iPDB: generated = 43
iPDB: rejected = 0
iPDB: max_pdb_size = 20000
iPDB: hill climbing time: 0.22s
Pattern generation (Haslum et al.) time: 0.22s
returning MinEvaluator
Conducting best first search with reopening closed nodes, (real) bound = 2147483647
77: heuristics.size() = 3
Initializing landmark cut heuristic...
0 = 6
1 = 6
Initializing merge-and-shrink heuristic...
Merge strategy: linear
Linear merge strategy: Variable order type: CG/GOAL, tie breaking on level (main)
Shrink strategy: f-preserving
Transition system size limit: 50000
Transition system size limit right before merge: 50000
Prefer shrinking high or low f states: high
Prefer shrinking high or low h states: low
Label reduction: all transition systems with fixpoint computation
System order: random
Expensive statistics: disabled
Building transition system...
Building atomic transition systems... 
Atomic transition system #0: computing distances using unit-cost algorithm
Atomic transition system #1: computing distances using unit-cost algorithm
Atomic transition system #2: computing distances using unit-cost algorithm
Atomic transition system #3: computing distances using unit-cost algorithm
Atomic transition system #4: computing distances using unit-cost algorithm
Atomic transition system #5: computing distances using unit-cost algorithm
Atomic transition system #6: computing distances using unit-cost algorithm
Atomic transition system #7: computing distances using unit-cost algorithm
Atomic transition system #8: computing distances using unit-cost algorithm
Merging transition systems...
First variable: 8
Next variable: 5
Atomic transition system #8: 5 states, ???/13 arcs, 2268 bytes
Atomic transition system #8: init h=2, max f=4, max g=2, max h=2 [t=0.22s]
Atomic transition system #5: 2 states, ???/3 arcs, 2020 bytes
Atomic transition system #5: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Atomic transition system #5: 2 states, ???/3 arcs, 2020 bytes
Atomic transition system #5: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Atomic transition system #8: 5 states, ???/13 arcs, 2268 bytes
Atomic transition system #8: init h=2, max f=4, max g=2, max h=2 [t=0.22s]
Merging atomic transition system #8 and atomic transition system #5
Transition system (2/9 vars): computing distances using unit-cost algorithm
Transition system (2/9 vars): 10 states, ???/27 arcs, 2532 bytes
Transition system (2/9 vars): init h=2, max f=6, max g=3, max h=3 [t=0.22s]
Next variable: 7
Transition system (2/9 vars): 10 states, ???/27 arcs, 2532 bytes
Transition system (2/9 vars): init h=2, max f=6, max g=3, max h=3 [t=0.22s]
Atomic transition system #7: 5 states, ???/13 arcs, 2268 bytes
Atomic transition system #7: init h=2, max f=4, max g=2, max h=2 [t=0.22s]
Atomic transition system #7: 5 states, ???/13 arcs, 2268 bytes
Atomic transition system #7: init h=2, max f=4, max g=2, max h=2 [t=0.22s]
Transition system (2/9 vars): 10 states, ???/27 arcs, 2532 bytes
Transition system (2/9 vars): init h=2, max f=6, max g=3, max h=3 [t=0.22s]
Merging transition system (2/9 vars) and atomic transition system #7
Transition system (3/9 vars): computing distances using unit-cost algorithm
Transition system (3/9 vars): 50 states, ???/195 arcs, 5184 bytes
Transition system (3/9 vars): init h=4, max f=10, max g=5, max h=5 [t=0.22s]
Next variable: 6
Transition system (3/9 vars): 50 states, ???/195 arcs, 5184 bytes
Transition system (3/9 vars): init h=4, max f=10, max g=5, max h=5 [t=0.22s]
Atomic transition system #6: 5 states, ???/13 arcs, 2268 bytes
Atomic transition system #6: init h=2, max f=4, max g=2, max h=2 [t=0.22s]
Label reduction: 32 labels, 30 after reduction
Atomic transition system #6: 5 states, ???/13 arcs, 2252 bytes
Atomic transition system #6: init h=2, max f=4, max g=2, max h=2 [t=0.22s]
Transition system (3/9 vars): 50 states, ???/195 arcs, 5152 bytes
Transition system (3/9 vars): init h=4, max f=10, max g=5, max h=5 [t=0.22s]
Merging transition system (3/9 vars) and atomic transition system #6
Transition system (4/9 vars): computing distances using unit-cost algorithm
Transition system (4/9 vars): 250 states, ???/1275 arcs, 21248 bytes
Transition system (4/9 vars): init h=6, max f=14, max g=7, max h=7 [t=0.22s]
Next variable: 4
Transition system (4/9 vars): 250 states, ???/1275 arcs, 21248 bytes
Transition system (4/9 vars): init h=6, max f=14, max g=7, max h=7 [t=0.22s]
Atomic transition system #4: 2 states, ???/5 arcs, 2036 bytes
Atomic transition system #4: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Label reduction: 30 labels, 26 after reduction
Atomic transition system #4: 2 states, ???/5 arcs, 2004 bytes
Atomic transition system #4: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Transition system (4/9 vars): 250 states, ???/1275 arcs, 21184 bytes
Transition system (4/9 vars): init h=6, max f=14, max g=7, max h=7 [t=0.22s]
Merging transition system (4/9 vars) and atomic transition system #4
Transition system (5/9 vars): computing distances using unit-cost algorithm
Transition system (5/9 vars): 500 states, ???/2850 arcs, 45756 bytes
Transition system (5/9 vars): init h=6, max f=17, max g=12, max h=9 [t=0.22s]
Next variable: 3
Transition system (5/9 vars): 500 states, ???/2850 arcs, 45756 bytes
Transition system (5/9 vars): init h=6, max f=17, max g=12, max h=9 [t=0.22s]
Atomic transition system #3: 2 states, ???/5 arcs, 2004 bytes
Atomic transition system #3: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Label reduction: 26 labels, 21 after reduction
Atomic transition system #3: 2 states, ???/5 arcs, 1964 bytes
Atomic transition system #3: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Transition system (5/9 vars): 500 states, ???/2850 arcs, 45676 bytes
Transition system (5/9 vars): init h=6, max f=17, max g=12, max h=9 [t=0.22s]
Merging transition system (5/9 vars) and atomic transition system #3
Transition system (6/9 vars): computing distances using unit-cost algorithm
Transition system (6/9 vars): 1000 states, ???/6300 arcs, 96604 bytes
Transition system (6/9 vars): init h=6, max f=19, max g=12, max h=11 [t=0.22s]
Next variable: 2
Transition system (6/9 vars): 1000 states, ???/6300 arcs, 96604 bytes
Transition system (6/9 vars): init h=6, max f=19, max g=12, max h=11 [t=0.22s]
Atomic transition system #2: 2 states, ???/5 arcs, 1964 bytes
Atomic transition system #2: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Label reduction: 21 labels, 15 after reduction
Atomic transition system #2: 2 states, ???/5 arcs, 1916 bytes
Atomic transition system #2: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Transition system (6/9 vars): 1000 states, ???/6300 arcs, 96508 bytes
Transition system (6/9 vars): init h=6, max f=19, max g=12, max h=11 [t=0.22s]
Merging transition system (6/9 vars) and atomic transition system #2
Transition system (7/9 vars): computing distances using unit-cost algorithm
Transition system (7/9 vars): 2000 states, ???/13800 arcs, 205516 bytes
Transition system (7/9 vars): init h=6, max f=21, max g=12, max h=13 [t=0.22s]
Next variable: 1
Transition system (7/9 vars): 2000 states, ???/13800 arcs, 205516 bytes
Transition system (7/9 vars): init h=6, max f=21, max g=12, max h=13 [t=0.22s]
Atomic transition system #1: 2 states, ???/5 arcs, 1916 bytes
Atomic transition system #1: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Label reduction: 15 labels, 11 after reduction
Atomic transition system #1: 2 states, ???/5 arcs, 1884 bytes
Atomic transition system #1: init h=0, max f=1, max g=1, max h=0 [t=0.22s]
Transition system (7/9 vars): 2000 states, ???/13800 arcs, 205452 bytes
Transition system (7/9 vars): init h=6, max f=21, max g=12, max h=13 [t=0.22s]
Merging transition system (7/9 vars) and atomic transition system #1
Transition system (8/9 vars): computing distances using unit-cost algorithm
Transition system (8/9 vars): unreachable: 1016 states, irrelevant: 0 states
Transition system (8/9 vars): applying abstraction (4000 to 2984 states)
Transition system (8/9 vars): applying abstraction to lookup table
Transition system (8/9 vars): 2984 states, ???/18576 arcs, 363628 bytes
Transition system (8/9 vars): init h=6, max f=23, max g=12, max h=13 [t=0.23s]
Next variable: 0
Transition system (8/9 vars): 2984 states, ???/18576 arcs, 363628 bytes
Transition system (8/9 vars): init h=6, max f=23, max g=12, max h=13 [t=0.23s]
Atomic transition system #0: 5 states, ???/13 arcs, 2100 bytes
Atomic transition system #0: init h=0, max f=2, max g=2, max h=0 [t=0.23s]
Label reduction: 11 labels, 9 after reduction
Atomic transition system #0: 5 states, ???/13 arcs, 2084 bytes
Atomic transition system #0: init h=0, max f=2, max g=2, max h=0 [t=0.23s]
Transition system (8/9 vars): 2984 states, ???/18576 arcs, 325712 bytes
Transition system (8/9 vars): init h=6, max f=23, max g=12, max h=13 [t=0.23s]
Merging transition system (8/9 vars) and atomic transition system #0
Transition system (9/9 vars): computing distances using unit-cost algorithm
Transition system (9/9 vars): unreachable: 14795 states, irrelevant: 0 states
Transition system (9/9 vars): applying abstraction (14920 to 125 states)
Transition system (9/9 vars): applying abstraction to lookup table
Transition system (9/9 vars): 125 states, ???/272 arcs, 102452 bytes
Transition system (9/9 vars): init h=6, max f=18, max g=6, max h=12 [t=0.23s]
Transition system (9/9 vars): 125 states, ???/272 arcs, 102452 bytes
Transition system (9/9 vars): init h=6, max f=18, max g=6, max h=12 [t=0.23s]
Order of merged transition systems: 8 5, 9 7, 10 6, 11 4, 12 3, 13 2, 14 1, 15 0, 
Done initializing merge-and-shrink heuristic [0.01s]
initial h value: 6
Estimated peak memory for transition system: 102452 bytes
2 = 6
	Mining_h[0]:6
	Mining_h[1]:6
	Mining_h[2]:6
f = 0 [1 evaluated, 0 expanded, t=0.23s, 4668 KB]
Best heuristic value: 6/6/6 [g=0, 1 evaluated, 0 expanded, t=0.23s, 4668 KB]
probes = 100

print h_initial_v
6/6/6
print b_initial_v
1/1/1
initial_state_id = #0

printNode:
6/6/6, g = 0, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 0
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:

printQueue End:
	new node added.

printNode:
7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
6/6/6
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 1, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
6/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 1, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 1, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
6/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 1, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 1, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 71
a = 0.71
	Not added.

*********************************************


printNode:
5/5/5, g = 1, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 1
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
6/6/6
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 2, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 2, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 2, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 2, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 2, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 12
a = 0.12
	Added even though is duplicate.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 2, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 2, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 17
a = 0.17
	Added even though is duplicate.

*********************************************


printNode:
4/4/4, g = 2, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 2
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
6/6/6
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 3, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
6/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 3, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 3, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
6/6/6
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 4, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 4, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 4, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 4
a = 0.04
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 4, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
6/6/6
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 5, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 5, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
6/6/6
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 6, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 6, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 6, f = 6/6/6, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 19
a = 0.19
	Added even though is duplicate.

*********************************************


printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 67
a = 0.67
	Not added.

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 50
a = 0.50
	Not added.

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 6.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 19
a = 0.19
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 22
a = 0.22
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 59
a = 0.59
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 47
a = 0.47
	Added even though is duplicate.

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 3.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 54
a = 0.54
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.40
rand_100 = 66
a = 0.66
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 7.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 3, f = 6/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 6.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
7/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 4, f = 7/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 4, f = 7/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 4, f = 8/8/8, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 19
a = 0.19
	Added even though is duplicate.

*********************************************


printNode:
3/6/6, g = 4, f = 7/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 41
a = 0.41
	Not added.

*********************************************


printNode:
3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 73
a = 0.73
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 4, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 5, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 5, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 5, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 6, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 33
a = 0.33
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 6.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 39
a = 0.39
	Not added.

*********************************************


printNode:
2/2/2, g = 6, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 7, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 7, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 8, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 8, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 8, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 97
a = 0.97
	Not added.

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 9.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
prob = 0.38
rand_100 = 68
a = 0.68
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.27
rand_100 = 60
a = 0.60
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 31
a = 0.31
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 5, f = 8/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.75
rand_100 = 60
a = 0.60
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 6, f = 9/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 9.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 86
a = 0.86
	Not added.

*********************************************


printNode:
3/6/6, g = 6, f = 9/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.75
rand_100 = 17
a = 0.17
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.75
rand_100 = 59
a = 0.59
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 11.00, b_node_v = 1/1/1
printNode End:
prob = 0.21
rand_100 = 11
a = 0.11
	Added even though is duplicate.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 15.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
prob = 0.46
rand_100 = 57
a = 0.57
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 26.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 26.00, b_node_v = 1/1/1
printNode End:
prob = 0.32
rand_100 = 14
a = 0.14
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 24.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 24.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 24.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 24.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 24.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 24.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 38.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 50.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 38.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 38.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 38.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 38.00, newcc : 76.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 38.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 38.00, b_node_v = 1/1/1
h = 4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 38.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 38.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 38.00, newcc : 76.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 38.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 38.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 4, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 38.00, newcc : 39.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/7/7, g = 5, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 81
a = 0.81
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 6, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 80
a = 0.80
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 71
a = 0.71
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 26
a = 0.26
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
prob = 0.08
rand_100 = 42
a = 0.42
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 68
a = 0.68
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 61
a = 0.61
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
prob = 0.17
rand_100 = 11
a = 0.11
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 71
a = 0.71
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 6, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 21
a = 0.21
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.45
rand_100 = 25
a = 0.25
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 11.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 11.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 11.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 11.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 11.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 11.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 11.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 11.00, b_node_v = 1/1/1
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 11.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 11.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 11.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 11.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 11.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 11.00, newcc : 22.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 6, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 40
a = 0.40
	Added even though is duplicate.

*********************************************


printNode:
3/6/6, g = 6, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
printNode End:
prob = 0.17
rand_100 = 29
a = 0.29
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 14.00
*******************Child #0********************

print h_child_v
4/8/8
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/8/8, g = 8, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/8/8, g = 8, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/8/8, g = 8, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 24.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/8/8, g = 8, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 13.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 52
a = 0.52
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 66
a = 0.66
	Not added.

*********************************************


printNode:
4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 25
a = 0.25
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 64
a = 0.64
	Not added.

*********************************************


printNode:
2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 51
a = 0.51
	Not added.

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 3.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 42
a = 0.42
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 99
a = 0.99
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 89
a = 0.89
	Not added.

*********************************************


printNode:
3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 53
a = 0.53
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 4.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 13.00, b_node_v = 1/1/1
printNode End:
prob = 0.19
rand_100 = 10
a = 0.10
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 81
a = 0.81
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 59
a = 0.59
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 9.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 12.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 9.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 9.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9.00, newcc : 18.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 9.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 9.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9.00, newcc : 18.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 9.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9.00, newcc : 10.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 58
a = 0.58
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 25
a = 0.25
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 3.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 0
a = 0.00
	Added even though is duplicate.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 89
a = 0.89
	Not added.

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 62
a = 0.62
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 97
a = 0.97
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 15
a = 0.15
	Added even though is duplicate.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 24.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 24.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 24.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 20.00
bc new is added
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 20.00, newcc : 40.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 20.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 20.00, newcc : 40.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 20.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 20.00, newcc : 40.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 1, f = 6/8/8, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 1
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
7/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 2, f = 7/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 2, f = 7/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 2, f = 8/8/8, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.40
rand_100 = 12
a = 0.12
	Added even though is duplicate.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 2, f = 7/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 2, f = 8/8/8, cc = 5.00, b_node_v = 1/1/1
printNode End:
prob = 0.29
rand_100 = 6
a = 0.06
	Added even though is duplicate.

*********************************************


printNode:
5/8/8, g = 2, f = 7/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 2
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
7/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 3, f = 7/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 3, f = 7/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
9/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
8/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 4, f = 8/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/10/10, g = 4, f = 8/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/10/10, g = 4, f = 8/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
10/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
9/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 5, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 5, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
10/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 2
a = 0.02
	Added even though is duplicate.

*********************************************


printNode:
4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 15
a = 0.15
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 4, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.40
rand_100 = 24
a = 0.24
	Added even though is duplicate.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 4, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:
prob = 0.29
rand_100 = 99
a = 0.99
	Not added.

*********************************************


printNode:
5/8/8, g = 4, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 6.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
9/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 5, f = 9/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 5, f = 9/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.67
rand_100 = 47
a = 0.47
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
10/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 6, f = 10/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/10/10, g = 6, f = 10/16/16, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.40
rand_100 = 62
a = 0.62
	Not added.

*********************************************


printNode:
4/10/10, g = 6, f = 10/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.67
rand_100 = 64
a = 0.64
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 10.00, b_node_v = 1/1/1
printNode End:
prob = 0.29
rand_100 = 36
a = 0.36
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 18
a = 0.18
	Added even though is duplicate.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 0
a = 0.00
	Added even though is duplicate.

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 18.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 14.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 14.00, newcc : 28.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 14.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 14.00, newcc : 16.00
*******************Child #0********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
10/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
9/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 5, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 5, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 14
a = 0.14
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
10/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 40
a = 0.40
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 29
a = 0.29
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 10.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 10.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 63
a = 0.63
	Not added.

*********************************************


printNode:
5/10/10, g = 6, f = 11/16/16, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 12.00
*******************Child #0********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 7, f = 12/16/16, cc = 10.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 7, f = 12/16/16, cc = 10.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 10.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 10.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 7, f = 12/16/16, cc = 10.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 10.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10.00, newcc : 20.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 7, f = 12/16/16, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 10.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10.00, newcc : 12.00
*******************Child #0********************

print h_child_v
5/12/12
print b_child_v
1/1/1
print f_child_v
11/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
10/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
h = 5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 7
a = 0.07
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 10.00, b_node_v = 1/1/1
h = 5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 10.00, b_node_v = 1/1/1
h = 5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/11/11, g = 7, f = 12/18/18, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 12.00
*******************Child #0********************

print h_child_v
5/12/12
print b_child_v
1/1/1
print f_child_v
13/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 10.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 10.00
bc new is added
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10.00, newcc : 12.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
5/12/12
print b_child_v
1/1/1
print f_child_v
13/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 2, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 2
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 3, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 3, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 3, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 3, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 3, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 14
a = 0.14
	Added even though is duplicate.

*********************************************


printNode:
5/5/5, g = 3, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 4, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 81
a = 0.81
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 21
a = 0.21
	Added even though is duplicate.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 82
a = 0.82
	Not added.

*********************************************


printNode:
4/4/4, g = 4, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 5, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 5, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 5, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 6, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 47
a = 0.47
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 6, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 7, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 7, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 8, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 8, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 8, f = 8/8/8, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 17
a = 0.17
	Added even though is duplicate.

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 14.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 14.00, newcc : 28.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 14.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 14.00, newcc : 21.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 99
a = 0.99
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 79
a = 0.79
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 14.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 14.00, newcc : 28.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 14.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 14.00, newcc : 28.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 5, f = 8/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 6, f = 9/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 14.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 79
a = 0.79
	Not added.

*********************************************


printNode:
3/6/6, g = 6, f = 9/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 48
a = 0.48
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 28.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 21.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 38
a = 0.38
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 43
a = 0.43
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 21.00, newcc : 42.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 21.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 21.00, newcc : 42.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 21.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 21.00, newcc : 42.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 21.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 21.00, newcc : 42.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 21.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 21.00, newcc : 42.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 21.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 21.00, newcc : 42.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 21.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 21.00, newcc : 42.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.75
rand_100 = 76
a = 0.76
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 21.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 63.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 31
a = 0.31
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 21.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 21.00, newcc : 42.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 84.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 84.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 84.00, newcc : 168.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 84.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 84.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 84.00, newcc : 168.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 84.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 6, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 84.00, newcc : 91.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 66
a = 0.66
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 51
a = 0.51
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 35.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 42.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 35.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 35.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 35.00, newcc : 49.00
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 14.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 14.00, newcc : 28.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 5, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
prob = 0.26
rand_100 = 44
a = 0.44
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 27.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 27.00, b_node_v = 1/1/1
printNode End:
prob = 0.21
rand_100 = 48
a = 0.48
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:
prob = 0.17
rand_100 = 29
a = 0.29
	Not added.

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 26
a = 0.26
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 10
a = 0.10
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 55
a = 0.55
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 21.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 21.00, newcc : 42.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 21.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 21.00, newcc : 42.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 21.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 21.00, newcc : 42.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 7.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 7.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 7.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 7.00, newcc : 14.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 28.00
bc new is added
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 28.00, newcc : 56.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 28.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 28.00, newcc : 56.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 28.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 28.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 28.00, newcc : 56.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 28.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 28.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 3, f = 8/10/10, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 28.00, newcc : 42.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.88
rand_100 = 39
a = 0.39
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
prob = 0.47
rand_100 = 75
a = 0.75
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 4, f = 9/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 4, f = 9/12/12, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 28.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 18
a = 0.18
	Added even though is duplicate.

*********************************************


printNode:
5/8/8, g = 4, f = 9/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 14.00
bc new is added
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.78
rand_100 = 23
a = 0.23
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 5, f = 9/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 5, f = 9/12/12, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/7/7, g = 5, f = 9/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 14.00, newcc : 28.00
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 6, f = 9/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 81
a = 0.81
	Not added.

*********************************************


printNode:
3/6/6, g = 6, f = 9/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 14.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 14.00, newcc : 28.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 14.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 14.00, newcc : 28.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 14.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 14.00, newcc : 28.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 14.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 14.00, newcc : 28.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 14.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 14.00, newcc : 28.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 14.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 14.00, newcc : 28.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 14.00
bc new is added
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 14.00, newcc : 28.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 14.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 14.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 14.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 14.00, newcc : 28.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.70
rand_100 = 9
a = 0.09
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
printNode End:
prob = 0.41
rand_100 = 57
a = 0.57
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 28.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 59
a = 0.59
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 41.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 85
a = 0.85
	Not added.

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 42.00
bc new is added
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 55.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 84.00
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 55.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 42.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 55.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 84.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 4, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 42.00
bc new is added
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 55.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 55.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 55.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 55.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 49
a = 0.49
	Added even though is duplicate.

*********************************************


printNode:
5/5/5, g = 5, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 84.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 55.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 55.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 55.00, b_node_v = 1/1/1
printNode End:
prob = 0.43
rand_100 = 74
a = 0.74
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 97.00, b_node_v = 1/1/1
printNode End:
prob = 0.30
rand_100 = 8
a = 0.08
	Added even though is duplicate.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 139.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 139.00, b_node_v = 1/1/1
printNode End:
prob = 0.23
rand_100 = 85
a = 0.85
	Not added.

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 42.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 84.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 72
a = 0.72
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 42.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 84.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 42.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 84.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 42.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 84.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 42.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 84.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 42.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 84.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 42.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 84.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 42.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 42.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 6
a = 0.06
	Added even though is duplicate.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 84.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 126.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 42.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 126.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 126.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 168.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 126.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 126.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 126.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 126.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 126.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 126.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 126.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 126.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 126.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 126.00, newcc : 252.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 126.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 126.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 126.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 126.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 126.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 126.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 126.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 126.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 126.00, newcc : 252.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 126.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 126.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 126.00, newcc : 168.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 42.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 84.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 42.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 84.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 42.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 84.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 42.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 84.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 84.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 84.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:
prob = 0.71
rand_100 = 25
a = 0.25
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 118.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 118.00, b_node_v = 1/1/1
printNode End:
prob = 0.42
rand_100 = 76
a = 0.76
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 84.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 181.00, b_node_v = 1/1/1
printNode End:
prob = 0.32
rand_100 = 12
a = 0.12
	Added even though is duplicate.

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 84.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 84.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 84.00, newcc : 168.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 84.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 84.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 84.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 84.00
bc new is added
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 84.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 84.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 84.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 84.00, newcc : 168.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 84.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 84.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 84.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 84.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 84.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 84.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 84.00, newcc : 168.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 265.00
bc new is added
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 265.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 265.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 265.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 32
a = 0.32
	Added even though is duplicate.

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 265.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 265.00, newcc : 530.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 530.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 265.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 530.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 530.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 265.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 265.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 265.00, newcc : 530.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 265.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 530.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 265.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 265.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 530.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 265.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 265.00, newcc : 530.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 265.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 530.00, b_node_v = 1/1/1
h = 6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 265.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 265.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 265.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 265.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 265.00, newcc : 530.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 530.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 530.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/8/8, g = 2, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 2
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 530.00, newcc : 532.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/9/9, g = 3, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 40
a = 0.40
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
8/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 30.00, b_node_v = 1/1/1
printNode End:
prob = 0.06
rand_100 = 87
a = 0.87
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 85
a = 0.85
	Not added.

*********************************************


printNode:
5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 18.00, b_node_v = 1/1/1
printNode End:
prob = 0.10
rand_100 = 5
a = 0.05
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
9/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 5, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 5, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
10/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/10/10, g = 6, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 202.00, b_node_v = 1/1/1
printNode End:
prob = 0.01
rand_100 = 64
a = 0.64
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 204.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 36
a = 0.36
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 204.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 204.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 2
a = 0.02
	Added even though is duplicate.

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 6.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 204.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 204.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 204.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 3, f = 8/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 6.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
10/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 204.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
9/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 204.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 204.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 32.00, b_node_v = 1/1/1
printNode End:
prob = 0.06
rand_100 = 85
a = 0.85
	Not added.

*********************************************


printNode:
5/10/10, g = 4, f = 9/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
10/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 204.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
10/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 204.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/9/9, g = 5, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 204.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 44
a = 0.44
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 204.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 57
a = 0.57
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 204.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 204.00, b_node_v = 1/1/1
printNode End:
prob = 0.01
rand_100 = 18
a = 0.18
	Not added.

*********************************************


printNode:
5/10/10, g = 6, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 7, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 7, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 7, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 7, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/11/11, g = 5, f = 10/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
5/12/12
print b_child_v
1/1/1
print f_child_v
11/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/10/10, g = 6, f = 11/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
h = 5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 14
a = 0.14
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/11/11, g = 7, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
h = 5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 7, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/9/9, g = 7, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/11/11, g = 7, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 6.00
*******************Child #0********************

print h_child_v
5/12/12
print b_child_v
1/1/1
print f_child_v
13/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/12/12, g = 6, f = 11/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/11/11, g = 7, f = 12/18/18, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
5/12/12
print b_child_v
1/1/1
print f_child_v
13/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 4, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/7/7, g = 5, f = 12/12/12, cc = 42.00, b_node_v = 1/1/1
printNode End:
prob = 0.09
rand_100 = 74
a = 0.74
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/5/5, g = 5, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 17
a = 0.17
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 82
a = 0.82
	Not added.

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 35
a = 0.35
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 206.00, b_node_v = 1/1/1
printNode End:
prob = 0.02
rand_100 = 30
a = 0.30
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 210.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 210.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 66
a = 0.66
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 210.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 49
a = 0.49
	Not added.

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 210.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 210.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 210.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 24.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 210.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 20.00
bc new is added
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 210.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 20.00, newcc : 40.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 210.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 20.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 210.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 20.00, newcc : 40.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 210.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 20.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 210.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 20.00, newcc : 40.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/8/8, g = 4, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 34.00
bc new is added
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 210.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 20.00, b_node_v = 1/1/1
printNode End:
prob = 0.63
rand_100 = 29
a = 0.29
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
10/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 210.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 5, f = 10/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 210.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 34.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 34.00, newcc : 68.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 210.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 210.00, b_node_v = 1/1/1
printNode End:
prob = 0.14
rand_100 = 48
a = 0.48
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 244.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 244.00, b_node_v = 1/1/1
printNode End:
prob = 0.12
rand_100 = 61
a = 0.61
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 278.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 34.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 278.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 34.00
bc new is added
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 278.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 34.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 278.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 34.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 34.00, newcc : 68.00
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 278.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 34.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 278.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 34.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 34.00, newcc : 68.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 34.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 5, f = 10/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 34.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 34.00, newcc : 68.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 278.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 34.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 278.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.89
rand_100 = 63
a = 0.63
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 34.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 278.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 278.00, b_node_v = 1/1/1
printNode End:
prob = 0.11
rand_100 = 46
a = 0.46
	Not added.

*********************************************


printNode:
5/10/10, g = 6, f = 11/16/16, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 34.00
bc new is added
*******************Child #0********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 312.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 7, f = 12/16/16, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 7, f = 12/16/16, cc = 34.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 312.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 34.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 34.00, newcc : 68.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 7, f = 12/16/16, cc = 34.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 312.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 34.00
bc new is added
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 7, f = 12/16/16, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 34.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 34.00, newcc : 68.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 34.00
bc new is added
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 312.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 312.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 312.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 22
a = 0.22
	Added even though is duplicate.

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 34.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 34.00, newcc : 68.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 68.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 312.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 34.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 68.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 312.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 68.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 312.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 34.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 34.00, newcc : 68.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 68.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 312.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 34.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 68.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 312.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 34.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 34.00, newcc : 68.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 68.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 312.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 34.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 34.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 34.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 34.00, newcc : 68.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 68.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 68.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/8/8, g = 6, f = 12/14/14, cc = 312.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 312.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 68.00, newcc : 380.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 7, f = 12/16/16, cc = 312.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 7, f = 12/16/16, cc = 312.00, b_node_v = 1/1/1
h = 6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 312.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 312.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 312.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 7, f = 12/16/16, cc = 312.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 312.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 312.00, newcc : 624.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/9/9, g = 3, f = 9/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
10/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/10/10, g = 4, f = 10/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.67
rand_100 = 35
a = 0.35
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 99
a = 0.99
	Not added.

*********************************************


printNode:
6/8/8, g = 4, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 12.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 54.00, b_node_v = 1/1/1
printNode End:
prob = 0.13
rand_100 = 80
a = 0.80
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 62.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 62.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 62.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 62.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 62.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 62.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 62.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 62.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 62.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 62.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 62.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 62.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 62.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/8/8, g = 6, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 62.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/9/9, g = 5, f = 11/14/14, cc = 62.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 62.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 62.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 62.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 38.00, b_node_v = 1/1/1
printNode End:
prob = 0.62
rand_100 = 29
a = 0.29
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 62.00, b_node_v = 1/1/1
h = 6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 100.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 62.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 51
a = 0.51
	Not added.

*********************************************


printNode:
6/8/8, g = 6, f = 12/14/14, cc = 124.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 124.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 62.00, newcc : 186.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/7/7
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/10/10, g = 4, f = 10/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 100.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/11/11
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 100.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/11/11, g = 5, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 100.00, b_node_v = 1/1/1
h = 6/11/11, g = 5, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 100.00, b_node_v = 1/1/1
printNode End:
prob = 0.06
rand_100 = 63
a = 0.63
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 106.00, b_node_v = 1/1/1
h = 6/11/11, g = 5, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 106.00, b_node_v = 1/1/1
h = 6/11/11, g = 5, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 61
a = 0.61
	Not added.

*********************************************


printNode:
6/8/8, g = 6, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 106.00, b_node_v = 1/1/1
h = 6/11/11, g = 5, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 24.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/10/10, g = 6, f = 12/16/16, cc = 106.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 106.00
bc new is added
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/11/11, g = 5, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/11/11, g = 7, f = 12/18/18, cc = 106.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/11/11, g = 7, f = 12/18/18, cc = 106.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 106.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 106.00, newcc : 212.00
*******************Child #0********************

print h_child_v
5/12/12
print b_child_v
1/1/1
print f_child_v
13/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/11/11, g = 5, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
6/12/12
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/12/12, g = 6, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/12/12, g = 6, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/10/10, g = 6, f = 12/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/11/11
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/12/12, g = 6, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
6/11/11
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/7/7, g = 1, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 1
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 7.00
*******************Child #0********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
9/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/8/8, g = 2, f = 9/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
9/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 1.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/8/8, g = 2, f = 9/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 61
a = 0.61
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
9/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 2.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/8/8, g = 2, f = 9/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 41
a = 0.41
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 2, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 2, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 2
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/7/7, g = 3, f = 10/10/10, cc = 7.00, b_node_v = 1/1/1
printNode End:
prob = 0.12
rand_100 = 0
a = 0.00
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 3, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 3, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 31
a = 0.31
	Added even though is duplicate.

*********************************************


printNode:
5/5/5, g = 3, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 55
a = 0.55
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 96
a = 0.96
	Not added.

*********************************************


printNode:
4/4/4, g = 4, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
8/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 5, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 36
a = 0.36
	Added even though is duplicate.

*********************************************


printNode:
2/2/2, g = 6, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 7, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
8/8/8
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 8, f = 8/8/8, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 44
a = 0.44
	Added even though is duplicate.

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 3.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 74
a = 0.74
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 94
a = 0.94
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 5, f = 8/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 85
a = 0.85
	Not added.

*********************************************


printNode:
3/6/6, g = 6, f = 9/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 96
a = 0.96
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 4.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 8
a = 0.08
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 87
a = 0.87
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.75
rand_100 = 89
a = 0.89
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 67
a = 0.67
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 24.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 24.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 6, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 13.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 46
a = 0.46
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.20
rand_100 = 16
a = 0.16
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 6.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 7.00
*******************Child #0********************

print h_child_v
4/8/8
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/8/8, g = 8, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/8/8, g = 8, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/8/8, g = 8, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/8/8, g = 8, f = 12/16/16, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 5, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 3.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 26
a = 0.26
	Added even though is duplicate.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 16
a = 0.16
	Added even though is duplicate.

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 86
a = 0.86
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 85
a = 0.85
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 93
a = 0.93
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 4.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 1.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 1.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 1.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 1.00, newcc : 2.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 3, f = 8/10/10, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 6.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 4, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 74
a = 0.74
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.40
rand_100 = 49
a = 0.49
	Not added.

*********************************************


printNode:
5/8/8, g = 4, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/7/7, g = 5, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 6, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 6, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 92
a = 0.92
	Not added.

*********************************************


printNode:
3/6/6, g = 6, f = 9/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 2.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 2.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 2.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 2.00, newcc : 4.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 24
a = 0.24
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 84
a = 0.84
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.40
rand_100 = 23
a = 0.23
	Added even though is duplicate.

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 4, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/7/7, g = 5, f = 12/12/12, cc = 46.00, b_node_v = 1/1/1
printNode End:
prob = 0.10
rand_100 = 46
a = 0.46
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/7/7
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/5/5, g = 5, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 15
a = 0.15
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 22
a = 0.22
	Added even though is duplicate.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:
prob = 0.25
rand_100 = 64
a = 0.64
	Not added.

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 78
a = 0.78
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 10.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 56
a = 0.56
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 15.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 20.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 15.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 15.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 15.00, newcc : 30.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 15.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 15.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 15.00, newcc : 30.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 25.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 20.00
bc new is added
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 20.00, newcc : 40.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 20.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 20.00, newcc : 40.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 20.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
h = 6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 20.00, newcc : 40.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 20.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 20.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 20.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 20.00, newcc : 40.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/7/7, g = 5, f = 11/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.56
rand_100 = 53
a = 0.53
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 9.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 9.00, b_node_v = 1/1/1
printNode End:
prob = 0.36
rand_100 = 5
a = 0.05
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/7/7
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
h = 6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 5.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 10.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 5.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 5.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/8/8, g = 4, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 5.00, newcc : 9.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 2.00, b_node_v = 1/1/1
printNode End:
prob = 0.67
rand_100 = 39
a = 0.39
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
10/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 14.00, b_node_v = 1/1/1
printNode End:
prob = 0.22
rand_100 = 90
a = 0.90
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 18.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 18.00, b_node_v = 1/1/1
printNode End:
prob = 0.18
rand_100 = 17
a = 0.17
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 22.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 22.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 22.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 22.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 22.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 22.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 5, f = 10/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 22.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/10/10, g = 6, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 22.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/10/10, g = 6, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 22.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 22.00, b_node_v = 1/1/1
printNode End:
prob = 0.15
rand_100 = 63
a = 0.63
	Not added.

*********************************************


printNode:
5/10/10, g = 6, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 26.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 7, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 7, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 26.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 7, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 26.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 7, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 26.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 26.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 26.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 75
a = 0.75
	Not added.

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 26.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 26.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 26.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 26.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 26.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 26.00, b_node_v = 1/1/1
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 4.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 8.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 4.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 4.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 4.00, newcc : 12.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/8/8, g = 6, f = 12/14/14, cc = 26.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 26.00
bc new is added
*******************Child #0********************

print h_child_v
7/9/9
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 26.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 26.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 26.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 26.00, newcc : 52.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 4.00, b_node_v = 1/1/1
printNode End:
prob = 0.60
rand_100 = 62
a = 0.62
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 10.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 31
a = 0.31
	Added even though is duplicate.

*********************************************


printNode:
6/8/8, g = 6, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 18.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 10.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 7, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 7, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 10.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 7, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 12.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 24.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/10/10, g = 6, f = 12/16/16, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 10.00
bc new is added
*******************Child #0********************

print h_child_v
6/11/11
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 7, f = 12/16/16, cc = 10.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/9/9, g = 7, f = 12/16/16, cc = 10.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 10.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 10.00, newcc : 20.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/7/7, g = 3, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/8/8, g = 4, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/8/8, g = 4, f = 11/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 27
a = 0.27
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/8/8, g = 4, f = 11/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 66
a = 0.66
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 4, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/7/7, g = 5, f = 12/12/12, cc = 51.00, b_node_v = 1/1/1
printNode End:
prob = 0.14
rand_100 = 97
a = 0.97
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 23
a = 0.23
	Added even though is duplicate.

*********************************************


printNode:
5/5/5, g = 5, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 75
a = 0.75
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 8
a = 0.08
	Added even though is duplicate.

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 65
a = 0.65
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 8.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 15
a = 0.15
	Added even though is duplicate.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 24.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 24.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 24.00, newcc : 48.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 24.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 24.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 24.00, newcc : 48.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 24.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 24.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 24.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 24.00, newcc : 48.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 8.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 16.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 8.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 8.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 16.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 8.00, newcc : 24.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 95
a = 0.95
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
prob = 0.40
rand_100 = 34
a = 0.34
	Added even though is duplicate.

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 16.00
bc new is added
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 16.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 16.00, newcc : 32.00
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 16.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 16.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 16.00, newcc : 32.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 16.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 16.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 40.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 16.00, newcc : 56.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 40.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 40.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 40.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 45
a = 0.45
	Added even though is duplicate.

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 40.00
bc new is added
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 80.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 40.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 40.00, newcc : 80.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 80.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 80.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 40.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 40.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 40.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 80.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 40.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 40.00, newcc : 80.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 40.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 80.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 40.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 40.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 80.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 40.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 40.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 40.00, newcc : 80.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 40.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 40.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 80.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 80.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 40.00, newcc : 120.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/8/8, g = 6, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 32.00
bc new is added
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 7, f = 12/16/16, cc = 32.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/9/9, g = 7, f = 12/16/16, cc = 32.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 32.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 32.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 32.00, newcc : 64.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 7, f = 12/16/16, cc = 32.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 32.00
bc new is added
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/7/7, g = 5, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 59.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 32.00, newcc : 91.00
*******************Child #0********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 59.00
bc new is added
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 59.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 59.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 59.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 87
a = 0.87
	Not added.

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 59.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 59.00, newcc : 118.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 118.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 59.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 118.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 118.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 59.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 59.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 59.00, newcc : 118.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 59.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 118.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 59.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 59.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 118.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 59.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 59.00, newcc : 118.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 59.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 118.00, b_node_v = 1/1/1
h = 7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 59.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 59.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 59.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 59.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 59.00, newcc : 118.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 118.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 118.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/8/8, g = 2, f = 9/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 2
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 118.00, newcc : 121.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
7/9/9
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
9/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/9/9, g = 3, f = 9/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/9/9, g = 3, f = 9/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
7/10/10
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
10/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/10/10, g = 4, f = 10/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 4, f = 10/14/14, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/8/8, g = 4, f = 11/12/12, cc = 24.00, b_node_v = 1/1/1
printNode End:
prob = 0.11
rand_100 = 4
a = 0.04
	Added even though is duplicate.

*********************************************


printNode:
6/10/10, g = 4, f = 10/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 27.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 27.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 64
a = 0.64
	Not added.

*********************************************


printNode:
6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 27.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 27.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 85
a = 0.85
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 27.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 27.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/7/7, g = 7, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/7/7, g = 7, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 27.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/7/7, g = 7, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 27.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
h = 7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 27.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/10/10, g = 6, f = 12/16/16, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/7/7, g = 3, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 15.00
*******************Child #0********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 4, f = 11/12/12, cc = 27.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/8/8, g = 4, f = 11/12/12, cc = 27.00, b_node_v = 1/1/1
printNode End:
prob = 0.10
rand_100 = 11
a = 0.11
	Not added.

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 4, f = 11/12/12, cc = 30.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/8/8, g = 4, f = 11/12/12, cc = 30.00, b_node_v = 1/1/1
printNode End:
prob = 0.09
rand_100 = 0
a = 0.00
	Added even though is duplicate.

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 4, f = 11/12/12, cc = 33.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/8/8, g = 4, f = 11/12/12, cc = 33.00, b_node_v = 1/1/1
printNode End:
prob = 0.08
rand_100 = 92
a = 0.92
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 4, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 5, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 89
a = 0.89
	Not added.

*********************************************


printNode:
5/5/5, g = 5, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 37
a = 0.37
	Added even though is duplicate.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 96
a = 0.96
	Not added.

*********************************************


printNode:
4/4/4, g = 6, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
10/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 7, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 88
a = 0.88
	Not added.

*********************************************


printNode:
2/2/2, g = 8, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 9, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
10/10/10
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
0/0/0, g = 10, f = 10/10/10, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 7, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
h = 4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.33
rand_100 = 79
a = 0.79
	Not added.

*********************************************


printNode:
3/6/6, g = 8, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 9.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 12.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 9.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 9.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9.00, newcc : 18.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 9.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 9.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 9.00, newcc : 18.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/6/6, g = 8, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
4/7/7
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 5, f = 10/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 9.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 9.00, b_node_v = 1/1/1
printNode End:
prob = 0.40
rand_100 = 99
a = 0.99
	Not added.

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 15.00, b_node_v = 1/1/1
printNode End:
prob = 0.29
rand_100 = 7
a = 0.07
	Added even though is duplicate.

*********************************************


printNode:
5/8/8, g = 6, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/9/9, g = 7, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
4/9/9, g = 7, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/10/10
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/10/10, g = 8, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/10/10, g = 8, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
5/11/11
print b_child_v
1/1/1
print f_child_v
14/20/20
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
4/9/9
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 21.00
bc new is added
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 83
a = 0.83
	Not added.

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 21.00, newcc : 42.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 21.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 21.00, newcc : 42.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 21.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 21.00, newcc : 42.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 21.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 21.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 21.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 21.00, newcc : 42.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 42.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/8/8, g = 6, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 42.00, newcc : 48.00
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/9/9
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/9/9, g = 7, f = 12/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/9/9, g = 7, f = 12/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
14/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/10/10
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/7/7, g = 5, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 82
a = 0.82
	Not added.

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 6.00
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 3.00
bc new is added
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 3.00, newcc : 9.00
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/8/8, g = 4, f = 11/12/12, cc = 36.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 36.00
bc new is added
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/7/7, g = 5, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 36.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
7/9/9
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 6/9/9, g = 5, f = 11/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/7/7, g = 5, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/9/9, g = 5, f = 11/14/14, cc = 36.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 36.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 36.00, newcc : 72.00
*******************Child #0********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 36.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/10/10, g = 6, f = 12/16/16, cc = 36.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 36.00
bc new is added
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/11/11
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/7/7, g = 5, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 36.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 36.00, newcc : 72.00
*******************Child #0********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 36.00
bc new is added
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 43
a = 0.43
	Added even though is duplicate.

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 36.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 36.00, newcc : 72.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 72.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 36.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 72.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 72.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 36.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 36.00, newcc : 72.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 72.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 36.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 72.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 36.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 36.00, newcc : 72.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 72.00, b_node_v = 1/1/1
h = 7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 36.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 36.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 36.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 36.00, newcc : 72.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 72.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 72.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/9/9, g = 3, f = 10/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
g = 3
w = 3.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 72.00, newcc : 75.00
*******************Child #0********************

print h_child_v
7/10/10
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/10/10, g = 4, f = 11/14/14, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 25
a = 0.25
	Added even though is duplicate.

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/8/8, g = 4, f = 11/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
11/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/8/8, g = 4, f = 11/12/12, cc = 3.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/8/8, g = 4, f = 11/12/12, cc = 3.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 40
a = 0.40
	Added even though is duplicate.

*********************************************


printNode:
7/8/8, g = 4, f = 11/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
7/7/7, g = 5, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
7/9/9
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
7/9/9, g = 5, f = 12/14/14, cc = 36.00, b_node_v = 1/1/1
printNode End:
prob = 0.14
rand_100 = 88
a = 0.88
	Not added.

*********************************************

*******************Child #2********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
11/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/9/9, g = 5, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
7/10/10
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/10/10
print b_child_v
1/1/1
print f_child_v
12/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/7/7, g = 5, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/10/10, g = 6, f = 12/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/10/10, g = 6, f = 12/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
6/9/9
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/7/7, g = 5, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/9/9, g = 5, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/6/6, g = 6, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/6/6, g = 6, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
7/7/7
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 7/9/9, g = 5, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/5/5, g = 7, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #3********************

print h_child_v
5/7/7
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 5/5/5, g = 7, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	Duplicate node.

printNode:
5/7/7, g = 7, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
prob = 0.50
rand_100 = 96
a = 0.96
	Not added.

*********************************************


printNode:
5/5/5, g = 7, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
4/4/4, g = 8, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 8
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
5/5/5
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 5/7/7, g = 7, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #2********************

print h_child_v
3/5/5
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
3/5/5, g = 9, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
3/3/3, g = 9, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
2/2/2, g = 10, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
2/2/2, g = 10, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 10
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
3/3/3
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
1/1/1, g = 11, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
1/1/1, g = 11, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 11
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
0/0/0
print b_child_v
1/1/1
print f_child_v
12/12/12
print f_b_child_v
1/1/1
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 1
allFalse = 0

Some or all of them are true

printQueue:
h = 3/5/5, g = 9, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
h = 5/7/7, g = 7, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
h = 7/9/9, g = 5, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
h = 7/10/10, g = 4, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
0/0/0, g = 12, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
2/2/2
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
0/0/0, g = 12, f = 12/12/12, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 12
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
1/1/1
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
3/5/5, g = 9, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 9
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
4/6/6
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
3/6/6
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
4/4/4
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
5/7/7, g = 7, f = 12/14/14, cc = 12.00, b_node_v = 1/1/1
printNode End:
g = 7
w = 12.00
bc new is added
*******************Child #0********************

print h_child_v
6/8/8
print b_child_v
1/1/1
print f_child_v
14/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
5/8/8
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #3********************

print h_child_v
6/6/6
print b_child_v
1/1/1
print f_child_v
14/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/9/9, g = 5, f = 12/14/14, cc = 42.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 42.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 12.00, newcc : 54.00
*******************Child #0********************

print h_child_v
7/10/10
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
7/10/10
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/10/10, g = 4, f = 11/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 4
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
7/9/9
print b_child_v
1/1/1
print f_child_v
12/14/14
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:

printQueue End:
	new node added.

printNode:
7/9/9, g = 5, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
6/11/11
print b_child_v
1/1/1
print f_child_v
11/16/16
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/9/9, g = 5, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/11/11, g = 5, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************


printNode:
6/11/11, g = 5, f = 11/16/16, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
6/12/12
print b_child_v
1/1/1
print f_child_v
12/18/18
print f_b_child_v
1/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 0

Some or all of them are true

printQueue:
h = 7/9/9, g = 5, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1

printQueue End:
	new node added.

printNode:
6/12/12, g = 6, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
printNode End:

*********************************************

*******************Child #1********************

print h_child_v
7/10/10
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
6/12/12, g = 6, f = 12/18/18, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 6
w = 6.00
bc new is added
*******************Child #0********************

print h_child_v
6/11/11
print b_child_v
1/1/1
print f_child_v
13/18/18
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************


printNode:
7/9/9, g = 5, f = 12/14/14, cc = 6.00, b_node_v = 1/1/1
printNode End:
g = 5
w = 6.00
bc old is being updated
	bc duplicate: 1/1/1, cc : 6.00, newcc : 12.00
*******************Child #0********************

print h_child_v
7/10/10
print b_child_v
1/1/1
print f_child_v
13/16/16
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #1********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

*******************Child #2********************

print h_child_v
7/8/8
print b_child_v
1/1/1
print f_child_v
13/14/14
print f_b_child_v
0/0/0
Let see if we can prune with f-value less or equal than the f-value!
allTrue = 0
allFalse = 1
All are false - pruned!

*********************************************

ss_probes = 100
bc: 0/0/0, cc: 2.00
Actual search time: 0.14s [t=0.37s]
Initial state h value: 6/6/6.
Expanded 0 state(s).
Reopened 0 state(s).
Evaluated 1 state(s).
Evaluations: 3
Generated 0 state(s).
Dead ends: 0 state(s).
Expanded until last jump: 0 state(s).
Reopened until last jump: 0 state(s).
Evaluated until last jump: 1 state(s).
Generated until last jump: 0 state(s).
Number of registered states: 84
Search time: 0.15s
Total time: 0.37s
Search stopped without finding a solution.
Peak memory: 4668 KB
