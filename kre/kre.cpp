#include <iostream>
#include <fstream>
#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <string>
#include <cstdio>
#include <cstdlib>


#include <dirent.h>
#include <vector>


using namespace std;


void create_report2(string astarText, string fileName, string pasta, string heuristic) {
        cout<<astarText<<"\n\n";
         
        string tniveles = "totalniveles:"; //total number of levels
	string fnivel = "fnivel:"; //nivel 
	string nodosNivel = "nodesGeneratedByLevel:"; //number of nodes generated by level
        string time = "time0:"; //timer
        string nodesUpToNivel = "nodesGeneratedToTheLevel:"; //number of nodes generated to the  level
	string countLastNodesGerados = "count_last_nodes_gerados:";

	int count_lastNodes = 0;
	int total_niveles = 0;

	string amount;
	ifstream astar;
        ifstream astar2;
	
	astar.open(astarText.c_str());
        
	string output;

        output = fileName;    
        output =  pasta+"/"+output;
	output = "testkre/"+heuristic+"/report/"+output;
	output = "marvin/" + output;
	output = "marvin/" + output;
	output = "/home/" + output;	
        cout<<output.c_str()<<endl;

	ofstream outputFile;
	outputFile.open(output.c_str(), ios::out);
	
	outputFile<<"\t"<<astarText.c_str()<<endl;
 	//first while just to find the total number of levels.
        while (astar>>amount) {
		if (amount == tniveles) {
			astar>>amount;
			outputFile<<"totalniveles:\t"<<amount<<"\n";
			total_niveles = atoi(amount.c_str());
		} else if (amount == countLastNodesGerados) {
			astar>>amount;
		        count_lastNodes = atoi(amount.c_str());
		}
	}
        astar.close();

	astar2.open(astarText.c_str());	
	outputFile<<"\tf\t\t#Nodes_by_level\t\tRuntime(s)\t\t#Nodes_to_the_level\n";
        int c1 = 0;
	int c2 = 0;
	while (astar2>>amount) {
           if (amount != tniveles) {
	        if (amount == fnivel) {
			astar2>>amount;
			outputFile<<"\t"<<amount<<"\t\t";
		} else if (amount == nodosNivel) {
 			if (c1 != (total_niveles-2)) {
				astar2>>amount;
				outputFile<<amount<<"\t\t";
			} else {
				astar2>>amount;
				int a1 = atoi(amount.c_str());
				int n1 = a1 + count_lastNodes;
				outputFile<<n1<<"\t\t";
			}
                        c1++;
		} else if (amount == time) {
			astar2>>amount;
			outputFile<<"\t"<<amount<<"\t\t";
		} else if (amount == nodesUpToNivel) {
			if (c2 != (total_niveles - 2)) {
				astar2>>amount;
                        	outputFile<<"\t"<<amount<<"\n";
			} else {
				astar2>>amount;
				int a2 = atoi(amount.c_str());
				int n2 = a2 + count_lastNodes;
				outputFile<<"\t"<<n2<<"\n";
			}
			c2++;
		}
	   }
	}
	astar2.close();
	outputFile.close();

}

void create_kre_report(string Ni, string bf, string fdist) {
	cout<<"Ni = "<<Ni<<endl;
       	
	string str;
        string title;
        int totallevels;
        int totallevels2;

        cout<<"--------------Number of nodes generated by level----------------"<<endl;
	ifstream fNi(Ni.c_str());
	fNi>>title;
        fNi>>str;
        fNi>>totallevels;
        fNi>>str;
        fNi>>str;
        fNi>>str;
        fNi>>str;
	float** levels = new float*[totallevels];
        for (int i = 0; i < totallevels; i++) {
	    levels[i] = new float[4];
	}
	for (int i = 0; i < totallevels; i++) {
	    for (int j = 0; j < 4; j++) {
		fNi>>levels[i][j];
	    }
	}
	vector<int> v_Ni;
	for (int i = 0; i < totallevels; i++) {
	    v_Ni.insert(v_Ni.begin() + i, levels[i][1]);
	}

        cout<<"v_Ni.size() = "<<v_Ni.size()<<endl;
	//for (int i = 0; i < v_Ni.size(); i++) {
	//    cout<<v_Ni.at(i)<<endl;
	//}
        fNi.close(); 
        
        cout<<"---------------------Branching factor--------------------"<<endl;
       
	cout<<"bf = "<<bf<<endl;
      
        ifstream fbf(bf.c_str());
	fbf>>str;
        fbf>>str;
        fbf>>totallevels2;
        fbf>>str;
        fbf>>str;
        fbf>>str;
        fbf>>str;
 	float** levels2 = new float*[totallevels2];
        for (int i = 0; i < totallevels2; i++) {
	    levels2[i] = new float[2];
	}
	for (int i = 0; i < totallevels2; i++) {
	    for (int j = 0; j < 2; j++) {
		fbf>>levels2[i][j];
	    }
	}       

	vector<double> v_bf;
	for (int i = 0; i < totallevels2 - 1; i++) {
	    v_bf.insert(v_bf.begin() + i, levels2[i][1]);
	}
        cout<<"bf."<<endl;
	for (int i = 0; i < v_bf.size(); i++) {
	    cout<<v_bf.at(i)<<endl;
	}





	cout<<"-------------------F distribution------------"<<endl;
	cout<<"fdist = "<<fdist<<endl;
        ifstream ffdist(fdist.c_str());
  



}


void create_report1(string heuristic, int countProblems) {

	int countRead = 0;
	do {

		ifstream readFile("h/report/d/entradalmcut-blocks.txt");
        	string pasta;
        	string domain;
		std::vector<string> fileNames;
                std::vector<string> fileNames2;
                std::vector<string> fileNames3;
                string Ni;
                string bf;
                string fdist;

		readFile>>pasta;
                
		string  pastaReporte = "mkdir /home/marvin/marvin/kre/"+heuristic+"/report/"+pasta;
		system(pastaReporte.c_str());     
                cout<<"--------------------------------------------------"<<endl; 
		//Read the files to get the number of nodes by level of BFS
        	string output;
                output =  pasta+"/"+output;
		output = "test/"+heuristic+"/report/"+output;
		output = "marvin/" + output;
		output = "marvin/" + output;
		output = "/home/" + output;	
	
        	DIR *dir;
        	struct dirent *ent;
        
       	 	dir = opendir(output.c_str());
        	if (dir != NULL) {
	    		while ((ent = readdir(dir)) != NULL) {
				string fileName = ent->d_name;
				int sizeName = fileName.size();
                		if ((sizeName == 1)  || (sizeName == 2) || (sizeName == 9)) {
					//TODO
				} else {
		    			fileNames.push_back(fileName);
				}
            		}
            		closedir(dir);
		} else {
	    		cout<<"Error trying to open the directory."<<endl;
		}

    	
                cout<<"\n";
	        cout<<"--------------------------------------------------"<<endl;
		//Read the files that contains the Branching factor of the BFS
		string output3;
                output3 = "resultado/"+output3;
                output3 =  pasta+"/"+output3;
		output3 = "test/"+heuristic+"/report/"+output3;
		output3 = "marvin/" + output3;
		output3 = "marvin/" + output3;
		output3 = "/home/" + output3;	
		
        	DIR *dir2;
        	struct dirent *ent2;
        
       	 	dir2 = opendir(output3.c_str());
        	if (dir2 != NULL) {
	    		while ((ent2 = readdir(dir2)) != NULL) {
				string fileName = ent2->d_name;
				int sizeName = fileName.size();
                		if ((sizeName == 1)  || (sizeName == 2)) {
					//TODO
				} else {
		    			fileNames2.push_back(fileName);
				}
            		}
            		closedir(dir2);
		} else {
	    		cout<<"Error trying to open the directory."<<endl;

		}

        
                cout<<"\n";
	        cout<<"--------------------------------------------------"<<endl;
		//Read the files that contains the f-Distribution

		string output5;
                output5 = "fdist/"+output5;
                output5 =  pasta+"/"+output5;
		output5 = "testss/"+heuristic+"/report/"+output5;
		output5 = "marvin/" + output5;
		output5 = "marvin/" + output5;
		output5 = "/home/" + output5;	
	
        	DIR *dir3;
        	struct dirent *ent3;
        
       	 	dir3 = opendir(output5.c_str());
        	if (dir2 != NULL) {
	    		while ((ent3 = readdir(dir3)) != NULL) {
				string fileName = ent3->d_name;
				int sizeName = fileName.size();
                		if ((sizeName == 1)  || (sizeName == 2)) {
					//TODO
				} else {
		    			fileNames3.push_back(fileName);
				}
            		}
            		closedir(dir3);
		} else {
	    		cout<<"Error trying to open the directory."<<endl;

		}
                
		for (int i = 0; i < fileNames.size(); i++) {
                    string one = fileNames.at(i);
                    Ni = output+fileNames.at(i); 
		    for (int j = 0; j < fileNames2.size(); j++) {
                        string two = fileNames2.at(j);
                        bf = output3+fileNames2.at(j);
			for (int k = 0; k < fileNames3.size(); k++) {
                            fdist = output5+fileNames3.at(k);
			    string three = fileNames3.at(k);
                            if ((one == two) && (one == three) && (two == three)) {
                                create_kre_report(Ni.c_str(), bf.c_str(), fdist.c_str());
			    }
			}
		    }
		}


	
	    	countRead = countRead + 1;
	} while (countRead < countProblems);


}


void create_report() {
	ifstream readFile("h/report/oneHeuristicReport.txt");
	int quantidade_total_opt;
	int total_heuristics;	 
	readFile>>quantidade_total_opt;
	readFile>>total_heuristics;
	
	int counter = 0;
	string heuristic;
	do {
		readFile>>heuristic;
		create_report1(heuristic, quantidade_total_opt);
		counter++;
	} while (counter < total_heuristics);
}




int main() {

	create_report();

	return 0;
}
